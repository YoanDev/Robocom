
Robocom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009498  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f6c  08009f6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f74  08009f74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004388  20000078  08009ff0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004400  08009ff0  00024400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edce  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004098  00000000  00000000  0003ee72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00042f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  000444f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a581  00000000  00000000  00045998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019432  00000000  00000000  0005ff19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af79  00000000  00000000  0007934b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001142c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006698  00000000  00000000  00114318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009620 	.word	0x08009620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009620 	.word	0x08009620

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <NRF24_DelayMicroSeconds+0x3c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <NRF24_DelayMicroSeconds+0x40>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	0c9a      	lsrs	r2, r3, #18
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005a8:	bf00      	nop
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	60fa      	str	r2, [r7, #12]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <NRF24_DelayMicroSeconds+0x22>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	165e9f81 	.word	0x165e9f81

080005cc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <NRF24_csn+0x20>
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <NRF24_csn+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <NRF24_csn+0x3c>)
 80005e0:	8811      	ldrh	r1, [r2, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ff01 	bl	80033ec <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ea:	e007      	b.n	80005fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <NRF24_csn+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <NRF24_csn+0x3c>)
 80005f2:	8811      	ldrh	r1, [r2, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fef8 	bl	80033ec <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a8 	.word	0x200000a8
 8000608:	200000ac 	.word	0x200000ac

0800060c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <NRF24_ce+0x20>
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <NRF24_ce+0x38>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <NRF24_ce+0x3c>)
 8000620:	8811      	ldrh	r1, [r2, #0]
 8000622:	2201      	movs	r2, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fee1 	bl	80033ec <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800062a:	e007      	b.n	800063c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <NRF24_ce+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <NRF24_ce+0x3c>)
 8000632:	8811      	ldrh	r1, [r2, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fed8 	bl	80033ec <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000a8 	.word	0x200000a8
 8000648:	200000ae 	.word	0x200000ae

0800064c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffb8 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <NRF24_read_register+0x4c>)
 8000670:	f003 fbd9 	bl	8003e26 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	1c59      	adds	r1, r3, #1
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	2201      	movs	r2, #1
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <NRF24_read_register+0x4c>)
 8000680:	f003 fd0d 	bl	800409e <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff9f 	bl	80005cc <NRF24_csn>
	return retData;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b0 	.word	0x200000b0

0800069c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff8d 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 031f 	and.w	r3, r3, #31
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2201      	movs	r2, #1
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006c6:	f003 fbae 	bl	8003e26 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006d4:	f003 fce3 	bl	800409e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff77 	bl	80005cc <NRF24_csn>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000b0 	.word	0x200000b0

080006ec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff65 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	b2db      	uxtb	r3, r3
 800070a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	2202      	movs	r2, #2
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <NRF24_write_register+0x40>)
 800071a:	f003 fb84 	bl	8003e26 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff54 	bl	80005cc <NRF24_csn>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000b0 	.word	0x200000b0

08000730 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff43 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	b2db      	uxtb	r3, r3
 800074e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000750:	f107 010c 	add.w	r1, r7, #12
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <NRF24_write_registerN+0x4c>)
 800075a:	f003 fb64 	bl	8003e26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	b29a      	uxth	r2, r3
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	6839      	ldr	r1, [r7, #0]
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <NRF24_write_registerN+0x4c>)
 8000768:	f003 fb5d 	bl	8003e26 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff2d 	bl	80005cc <NRF24_csn>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000b0 	.word	0x200000b0

08000780 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff1d 	bl	80005cc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000796:	f107 010f 	add.w	r1, r7, #15
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <NRF24_write_payload+0x40>)
 80007a0:	f003 fb41 	bl	8003e26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <NRF24_write_payload+0x40>)
 80007ae:	f003 fb3a 	bl	8003e26 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ff0a 	bl	80005cc <NRF24_csn>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000b0 	.word	0x200000b0

080007c4 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80007d0:	f000 fa86 	bl	8000ce0 <NRF24_getPayloadSize>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	4293      	cmp	r3, r2
 80007dc:	d303      	bcc.n	80007e6 <NRF24_read_payload+0x22>
 80007de:	f000 fa7f 	bl	8000ce0 <NRF24_getPayloadSize>
 80007e2:	4603      	mov	r3, r0
 80007e4:	e000      	b.n	80007e8 <NRF24_read_payload+0x24>
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff feee 	bl	80005cc <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80007f0:	2361      	movs	r3, #97	; 0x61
 80007f2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80007f4:	f107 010e 	add.w	r1, r7, #14
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	2201      	movs	r2, #1
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <NRF24_read_payload+0x5c>)
 80007fe:	f003 fb12 	bl	8003e26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	b29a      	uxth	r2, r3
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <NRF24_read_payload+0x5c>)
 800080c:	f003 fc47 	bl	800409e <HAL_SPI_Receive>
	NRF24_csn(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fedb 	bl	80005cc <NRF24_csn>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000b0 	.word	0x200000b0

08000824 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000828:	21ff      	movs	r1, #255	; 0xff
 800082a:	20e1      	movs	r0, #225	; 0xe1
 800082c:	f7ff ff5e 	bl	80006ec <NRF24_write_register>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000838:	21ff      	movs	r1, #255	; 0xff
 800083a:	20e2      	movs	r0, #226	; 0xe2
 800083c:	f7ff ff56 	bl	80006ec <NRF24_write_register>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800084a:	2007      	movs	r0, #7
 800084c:	f7ff fefe 	bl	800064c <NRF24_read_register>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000860:	b082      	sub	sp, #8
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
 8000870:	4613      	mov	r3, r2
 8000872:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000874:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <NRF24_begin+0x1b0>)
 8000876:	4618      	mov	r0, r3
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2258      	movs	r2, #88	; 0x58
 800087e:	4619      	mov	r1, r3
 8000880:	f007 fcd0 	bl	8008224 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000884:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <NRF24_begin+0x1b4>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800088a:	4a63      	ldr	r2, [pc, #396]	; (8000a18 <NRF24_begin+0x1b8>)
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000890:	4a62      	ldr	r2, [pc, #392]	; (8000a1c <NRF24_begin+0x1bc>)
 8000892:	883b      	ldrh	r3, [r7, #0]
 8000894:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fe98 	bl	80005cc <NRF24_csn>
	NRF24_ce(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff feb5 	bl	800060c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80008a2:	2005      	movs	r0, #5
 80008a4:	f002 fa36 	bl	8002d14 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80008a8:	2108      	movs	r1, #8
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff1e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80008b0:	213f      	movs	r1, #63	; 0x3f
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff ff1a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80008b8:	2103      	movs	r1, #3
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff ff16 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80008c0:	2103      	movs	r1, #3
 80008c2:	2003      	movs	r0, #3
 80008c4:	f7ff ff12 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80008c8:	2103      	movs	r1, #3
 80008ca:	2004      	movs	r0, #4
 80008cc:	f7ff ff0e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80008d0:	2102      	movs	r1, #2
 80008d2:	2005      	movs	r0, #5
 80008d4:	f7ff ff0a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80008d8:	210f      	movs	r1, #15
 80008da:	2006      	movs	r0, #6
 80008dc:	f7ff ff06 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80008e0:	210e      	movs	r1, #14
 80008e2:	2007      	movs	r0, #7
 80008e4:	f7ff ff02 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff fefe 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2009      	movs	r0, #9
 80008f4:	f7ff fefa 	bl	80006ec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008f8:	23e7      	movs	r3, #231	; 0xe7
 80008fa:	733b      	strb	r3, [r7, #12]
 80008fc:	23e7      	movs	r3, #231	; 0xe7
 80008fe:	72fb      	strb	r3, [r7, #11]
 8000900:	23e7      	movs	r3, #231	; 0xe7
 8000902:	72bb      	strb	r3, [r7, #10]
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	727b      	strb	r3, [r7, #9]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2205      	movs	r2, #5
 8000912:	4619      	mov	r1, r3
 8000914:	200a      	movs	r0, #10
 8000916:	f7ff ff0b 	bl	8000730 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800091a:	23c2      	movs	r3, #194	; 0xc2
 800091c:	733b      	strb	r3, [r7, #12]
 800091e:	23c2      	movs	r3, #194	; 0xc2
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	72bb      	strb	r3, [r7, #10]
 8000926:	23c2      	movs	r3, #194	; 0xc2
 8000928:	727b      	strb	r3, [r7, #9]
 800092a:	23c2      	movs	r3, #194	; 0xc2
 800092c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2205      	movs	r2, #5
 8000934:	4619      	mov	r1, r3
 8000936:	200b      	movs	r0, #11
 8000938:	f7ff fefa 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800093c:	21c3      	movs	r1, #195	; 0xc3
 800093e:	200c      	movs	r0, #12
 8000940:	f7ff fed4 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000944:	21c4      	movs	r1, #196	; 0xc4
 8000946:	200d      	movs	r0, #13
 8000948:	f7ff fed0 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800094c:	21c5      	movs	r1, #197	; 0xc5
 800094e:	200e      	movs	r0, #14
 8000950:	f7ff fecc 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000954:	21c6      	movs	r1, #198	; 0xc6
 8000956:	200f      	movs	r0, #15
 8000958:	f7ff fec8 	bl	80006ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800095c:	23e7      	movs	r3, #231	; 0xe7
 800095e:	733b      	strb	r3, [r7, #12]
 8000960:	23e7      	movs	r3, #231	; 0xe7
 8000962:	72fb      	strb	r3, [r7, #11]
 8000964:	23e7      	movs	r3, #231	; 0xe7
 8000966:	72bb      	strb	r3, [r7, #10]
 8000968:	23e7      	movs	r3, #231	; 0xe7
 800096a:	727b      	strb	r3, [r7, #9]
 800096c:	23e7      	movs	r3, #231	; 0xe7
 800096e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2205      	movs	r2, #5
 8000976:	4619      	mov	r1, r3
 8000978:	2010      	movs	r0, #16
 800097a:	f7ff fed9 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	2011      	movs	r0, #17
 8000982:	f7ff feb3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000986:	2100      	movs	r1, #0
 8000988:	2012      	movs	r0, #18
 800098a:	f7ff feaf 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800098e:	2100      	movs	r1, #0
 8000990:	2013      	movs	r0, #19
 8000992:	f7ff feab 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	2014      	movs	r0, #20
 800099a:	f7ff fea7 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800099e:	2100      	movs	r1, #0
 80009a0:	2015      	movs	r0, #21
 80009a2:	f7ff fea3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2016      	movs	r0, #22
 80009aa:	f7ff fe9f 	bl	80006ec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80009ae:	f000 fb3b 	bl	8001028 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	201c      	movs	r0, #28
 80009b6:	f7ff fe99 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	201d      	movs	r0, #29
 80009be:	f7ff fe95 	bl	80006ec <NRF24_write_register>
	printRadioSettings();
 80009c2:	f000 fb4b 	bl	800105c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80009c6:	210f      	movs	r1, #15
 80009c8:	200f      	movs	r0, #15
 80009ca:	f000 f941 	bl	8000c50 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f000 f9c7 	bl	8000d62 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 f9fd 	bl	8000dd4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 fa40 	bl	8000e60 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80009e0:	f000 f992 	bl	8000d08 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80009e4:	2020      	movs	r0, #32
 80009e6:	f000 f963 	bl	8000cb0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80009ea:	f000 fb15 	bl	8001018 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80009ee:	204c      	movs	r0, #76	; 0x4c
 80009f0:	f000 f949 	bl	8000c86 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80009f4:	f7ff ff16 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009f8:	f7ff ff1c 	bl	8000834 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80009fc:	f000 fa6b 	bl	8000ed6 <NRF24_powerDown>
	
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000b0 	.word	0x200000b0
 8000a14:	200000a8 	.word	0x200000a8
 8000a18:	200000ac 	.word	0x200000ac
 8000a1c:	200000ae 	.word	0x200000ae

08000a20 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fe11 	bl	800064c <NRF24_read_register>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f043 0303 	orr.w	r3, r3, #3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fe59 	bl	80006ec <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <NRF24_startListening+0x48>)
 8000a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	d004      	beq.n	8000a4e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000a44:	2205      	movs	r2, #5
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <NRF24_startListening+0x48>)
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f7ff fe71 	bl	8000730 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000a4e:	f7ff fee9 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a52:	f7ff feef 	bl	8000834 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fdd8 	bl	800060c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000a5c:	2096      	movs	r0, #150	; 0x96
 8000a5e:	f7ff fd93 	bl	8000588 <NRF24_DelayMicroSeconds>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000098 	.word	0x20000098

08000a6c <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fdcb 	bl	800060c <NRF24_ce>
	NRF24_flush_tx();
 8000a76:	f7ff fed5 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a7a:	f7ff fedb 	bl	8000834 <NRF24_flush_rx>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000a90:	f000 fac2 	bl	8001018 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fa5b 	bl	8000f54 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000a9e:	f002 f92d 	bl	8002cfc <HAL_GetTick>
 8000aa2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000aa8:	f107 030d 	add.w	r3, r7, #13
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2008      	movs	r0, #8
 8000ab2:	f7ff fdf3 	bl	800069c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000ab6:	f7ff fec5 	bl	8000844 <NRF24_get_status>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d107      	bne.n	8000ad8 <NRF24_write+0x54>
 8000ac8:	f002 f918 	bl	8002cfc <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8e7      	bhi.n	8000aa8 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000ad8:	f107 010b 	add.w	r1, r7, #11
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <NRF24_write+0x90>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa65 	bl	8000fb2 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ae8:	7b3b      	ldrb	r3, [r7, #12]
 8000aea:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <NRF24_write+0x90>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000af4:	f000 f900 	bl	8000cf8 <NRF24_getDynamicPayloadSize>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <NRF24_write+0x94>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000b00:	f000 f80c 	bl	8000b1c <NRF24_available>
	NRF24_flush_tx();
 8000b04:	f7ff fe8e 	bl	8000824 <NRF24_flush_tx>
	return retStatus;
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000a0 	.word	0x200000a0
 8000b18:	200000a1 	.word	0x200000a1

08000b1c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f9e7 	bl	8000ef4 <NRF24_availablePipe>
 8000b26:	4603      	mov	r3, r0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fe41 	bl	80007c4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000b42:	2017      	movs	r0, #23
 8000b44:	f7ff fd82 	bl	800064c <NRF24_read_register>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000b50:	f7ff fe70 	bl	8000834 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000b54:	f000 f8d0 	bl	8000cf8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000b76:	463b      	mov	r3, r7
 8000b78:	2205      	movs	r2, #5
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f7ff fdd7 	bl	8000730 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000b82:	463b      	mov	r3, r7
 8000b84:	2205      	movs	r2, #5
 8000b86:	4619      	mov	r1, r3
 8000b88:	2010      	movs	r0, #16
 8000b8a:	f7ff fdd1 	bl	8000730 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <NRF24_openWritingPipe+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	bf28      	it	cs
 8000b9c:	4613      	movcs	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2011      	movs	r0, #17
 8000ba4:	f7ff fda2 	bl	80006ec <NRF24_write_register>
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000a2 	.word	0x200000a2

08000bb4 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4601      	mov	r1, r0
 8000bbc:	e9c7 2300 	strd	r2, r3, [r7]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d104      	bne.n	8000bd4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bce:	491c      	ldr	r1, [pc, #112]	; (8000c40 <NRF24_openReadingPipe+0x8c>)
 8000bd0:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d82d      	bhi.n	8000c36 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d808      	bhi.n	8000bf2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <NRF24_openReadingPipe+0x90>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	4639      	mov	r1, r7
 8000be8:	2205      	movs	r2, #5
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fda0 	bl	8000730 <NRF24_write_registerN>
 8000bf0:	e007      	b.n	8000c02 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <NRF24_openReadingPipe+0x90>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd97 	bl	8000730 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <NRF24_openReadingPipe+0x94>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <NRF24_openReadingPipe+0x98>)
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd6c 	bl	80006ec <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff fd19 	bl	800064c <NRF24_read_register>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fd5b 	bl	80006ec <NRF24_write_register>
	}
	
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000098 	.word	0x20000098
 8000c44:	08009cf8 	.word	0x08009cf8
 8000c48:	08009d00 	.word	0x08009d00
 8000c4c:	200000a2 	.word	0x200000a2

08000c50 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	2004      	movs	r0, #4
 8000c7a:	f7ff fd37 	bl	80006ec <NRF24_write_register>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000c90:	237f      	movs	r3, #127	; 0x7f
 8000c92:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	bf28      	it	cs
 8000c9c:	4613      	movcs	r3, r2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f7ff fd22 	bl	80006ec <NRF24_write_register>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	bf28      	it	cs
 8000cc6:	4613      	movcs	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <NRF24_setPayloadSize+0x2c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000a2 	.word	0x200000a2

08000ce0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	return payload_size;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <NRF24_getPayloadSize+0x14>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000a2 	.word	0x200000a2

08000cf8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000cfc:	2060      	movs	r0, #96	; 0x60
 8000cfe:	f7ff fca5 	bl	800064c <NRF24_read_register>
 8000d02:	4603      	mov	r3, r0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d0c:	201d      	movs	r0, #29
 8000d0e:	f7ff fc9d 	bl	800064c <NRF24_read_register>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f023 0304 	bic.w	r3, r3, #4
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	201d      	movs	r0, #29
 8000d1e:	f7ff fce5 	bl	80006ec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	201c      	movs	r0, #28
 8000d26:	f7ff fce1 	bl	80006ec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d2a:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <NRF24_disableDynamicPayloads+0x2c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200000a3 	.word	0x200000a3

08000d38 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d48:	213f      	movs	r1, #63	; 0x3f
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fcce 	bl	80006ec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d50:	e003      	b.n	8000d5a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d52:	2100      	movs	r1, #0
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fcc9 	bl	80006ec <NRF24_write_register>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d6c:	2006      	movs	r0, #6
 8000d6e:	f7ff fc6d 	bl	800064c <NRF24_read_register>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f023 0306 	bic.w	r3, r3, #6
 8000d7c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d104      	bne.n	8000d8e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f043 0306 	orr.w	r3, r3, #6
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e019      	b.n	8000dc2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d104      	bne.n	8000d9e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e011      	b.n	8000dc2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d104      	bne.n	8000dae <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e009      	b.n	8000dc2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d103      	bne.n	8000dc2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f043 0306 	orr.w	r3, r3, #6
 8000dc0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f7ff fc90 	bl	80006ec <NRF24_write_register>
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000de2:	2006      	movs	r0, #6
 8000de4:	f7ff fc32 	bl	800064c <NRF24_read_register>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <NRF24_setDataRate+0x88>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000df8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d107      	bne.n	8000e10 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <NRF24_setDataRate+0x88>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	e00d      	b.n	8000e2c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d107      	bne.n	8000e26 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <NRF24_setDataRate+0x88>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	73bb      	strb	r3, [r7, #14]
 8000e24:	e002      	b.n	8000e2c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <NRF24_setDataRate+0x88>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2006      	movs	r0, #6
 8000e32:	f7ff fc5b 	bl	80006ec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e36:	2006      	movs	r0, #6
 8000e38:	f7ff fc08 	bl	800064c <NRF24_read_register>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e002      	b.n	8000e52 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <NRF24_setDataRate+0x88>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000a4 	.word	0x200000a4

08000e60 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fbee 	bl	800064c <NRF24_read_register>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f023 030c 	bic.w	r3, r3, #12
 8000e76:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00f      	beq.n	8000e9e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d104      	bne.n	8000e8e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e007      	b.n	8000e9e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fc22 	bl	80006ec <NRF24_write_register>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <NRF24_disableCRC>:

  return result;
}
//36. Disable CRC
void NRF24_disableCRC( void )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	uint8_t disable = NRF24_read_register(REG_CONFIG) & ~_BV(BIT_EN_CRC) ;
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fbc8 	bl	800064c <NRF24_read_register>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f023 0308 	bic.w	r3, r3, #8
 8000ec2:	71fb      	strb	r3, [r7, #7]
  NRF24_write_register( REG_CONFIG, disable ) ;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fc0f 	bl	80006ec <NRF24_write_register>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fbb6 	bl	800064c <NRF24_read_register>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f023 0302 	bic.w	r3, r3, #2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fbfe 	bl	80006ec <NRF24_write_register>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000efc:	f7ff fca2 	bl	8000844 <NRF24_get_status>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d017      	beq.n	8000f4a <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	085b      	lsrs	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	2007      	movs	r0, #7
 8000f34:	f7ff fbda 	bl	80006ec <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f42:	2120      	movs	r1, #32
 8000f44:	2007      	movs	r0, #7
 8000f46:	f7ff fbd1 	bl	80006ec <NRF24_write_register>
    }
  }
  return result;
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fb53 	bl	800060c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fb70 	bl	800064c <NRF24_read_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fbb5 	bl	80006ec <NRF24_write_register>
  NRF24_ce(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fb42 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000f88:	2096      	movs	r0, #150	; 0x96
 8000f8a:	f7ff fafd 	bl	8000588 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fbf4 	bl	8000780 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff fb37 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f7ff faf2 	bl	8000588 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fb31 	bl	800060c <NRF24_ce>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fbe:	f7ff fc41 	bl	8000844 <NRF24_get_status>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000fcc:	2170      	movs	r1, #112	; 0x70
 8000fce:	2007      	movs	r0, #7
 8000fd0:	f7ff fb8c 	bl	80006ec <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bf14      	ite	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	2300      	moveq	r3, #0
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	701a      	strb	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800101c:	2170      	movs	r1, #112	; 0x70
 800101e:	2007      	movs	r0, #7
 8001020:	f7ff fb64 	bl	80006ec <NRF24_write_register>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff facc 	bl	80005cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001034:	2350      	movs	r3, #80	; 0x50
 8001036:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001038:	2373      	movs	r3, #115	; 0x73
 800103a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	2202      	movs	r2, #2
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <NRF24_ACTIVATE_cmd+0x30>)
 8001044:	f002 feef 	bl	8003e26 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fabf 	bl	80005cc <NRF24_csn>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000b0 	.word	0x200000b0

0800105c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0a1      	sub	sp, #132	; 0x84
 8001060:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	49c3      	ldr	r1, [pc, #780]	; (8001374 <printRadioSettings+0x318>)
 8001068:	4618      	mov	r0, r3
 800106a:	f007 fa15 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f8b4 	bl	80001e0 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	f107 0108 	add.w	r1, r7, #8
 8001080:	230a      	movs	r3, #10
 8001082:	48bd      	ldr	r0, [pc, #756]	; (8001378 <printRadioSettings+0x31c>)
 8001084:	f003 febb 	bl	8004dfe <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fadf 	bl	800064c <NRF24_read_register>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <printRadioSettings+0x5e>
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	49b2      	ldr	r1, [pc, #712]	; (800137c <printRadioSettings+0x320>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 f9f0 	bl	8008498 <siprintf>
 80010b8:	e00c      	b.n	80010d4 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	49b0      	ldr	r1, [pc, #704]	; (8001380 <printRadioSettings+0x324>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 f9e9 	bl	8008498 <siprintf>
 80010c6:	e005      	b.n	80010d4 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	49ad      	ldr	r1, [pc, #692]	; (8001384 <printRadioSettings+0x328>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 f9e2 	bl	8008498 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f881 	bl	80001e0 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 0108 	add.w	r1, r7, #8
 80010e6:	230a      	movs	r3, #10
 80010e8:	48a3      	ldr	r0, [pc, #652]	; (8001378 <printRadioSettings+0x31c>)
 80010ea:	f003 fe88 	bl	8004dfe <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff faac 	bl	800064c <NRF24_read_register>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010fe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001102:	2b00      	cmp	r3, #0
 8001104:	bfcc      	ite	gt
 8001106:	2301      	movgt	r3, #1
 8001108:	2300      	movle	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800110e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001112:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfcc      	ite	gt
 800111a:	2301      	movgt	r3, #1
 800111c:	2300      	movle	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfcc      	ite	gt
 8001142:	2301      	movgt	r3, #1
 8001144:	2300      	movle	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfcc      	ite	gt
 8001156:	2301      	movgt	r3, #1
 8001158:	2300      	movle	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800115e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001162:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfcc      	ite	gt
 800116a:	2301      	movgt	r3, #1
 800116c:	2300      	movle	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f107 0008 	add.w	r0, r7, #8
 8001174:	9303      	str	r3, [sp, #12]
 8001176:	9402      	str	r4, [sp, #8]
 8001178:	9101      	str	r1, [sp, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	4633      	mov	r3, r6
 800117e:	462a      	mov	r2, r5
 8001180:	4981      	ldr	r1, [pc, #516]	; (8001388 <printRadioSettings+0x32c>)
 8001182:	f007 f989 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f828 	bl	80001e0 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	f107 0108 	add.w	r1, r7, #8
 8001198:	230a      	movs	r3, #10
 800119a:	4877      	ldr	r0, [pc, #476]	; (8001378 <printRadioSettings+0x31c>)
 800119c:	f003 fe2f 	bl	8004dfe <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fa53 	bl	800064c <NRF24_read_register>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bfcc      	ite	gt
 80011b8:	2301      	movgt	r3, #1
 80011ba:	2300      	movle	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bfcc      	ite	gt
 80011cc:	2301      	movgt	r3, #1
 80011ce:	2300      	movle	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bfcc      	ite	gt
 80011e0:	2301      	movgt	r3, #1
 80011e2:	2300      	movle	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfcc      	ite	gt
 80011f4:	2301      	movgt	r3, #1
 80011f6:	2300      	movle	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfcc      	ite	gt
 8001208:	2301      	movgt	r3, #1
 800120a:	2300      	movle	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001214:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfcc      	ite	gt
 800121c:	2301      	movgt	r3, #1
 800121e:	2300      	movle	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f107 0008 	add.w	r0, r7, #8
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	9402      	str	r4, [sp, #8]
 800122a:	9101      	str	r1, [sp, #4]
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	4633      	mov	r3, r6
 8001230:	462a      	mov	r2, r5
 8001232:	4956      	ldr	r1, [pc, #344]	; (800138c <printRadioSettings+0x330>)
 8001234:	f007 f930 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7fe ffcf 	bl	80001e0 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 0108 	add.w	r1, r7, #8
 800124a:	230a      	movs	r3, #10
 800124c:	484a      	ldr	r0, [pc, #296]	; (8001378 <printRadioSettings+0x31c>)
 800124e:	f003 fdd6 	bl	8004dfe <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff f9fa 	bl	800064c <NRF24_read_register>
 8001258:	4603      	mov	r3, r0
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001262:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001266:	3302      	adds	r3, #2
 8001268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800126c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4946      	ldr	r1, [pc, #280]	; (8001390 <printRadioSettings+0x334>)
 8001276:	4618      	mov	r0, r3
 8001278:	f007 f90e 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ffad 	bl	80001e0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f107 0108 	add.w	r1, r7, #8
 800128e:	230a      	movs	r3, #10
 8001290:	4839      	ldr	r0, [pc, #228]	; (8001378 <printRadioSettings+0x31c>)
 8001292:	f003 fdb4 	bl	8004dfe <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001296:	2005      	movs	r0, #5
 8001298:	f7ff f9d8 	bl	800064c <NRF24_read_register>
 800129c:	4603      	mov	r3, r0
 800129e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4939      	ldr	r1, [pc, #228]	; (8001394 <printRadioSettings+0x338>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 f8f1 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff90 	bl	80001e0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 0108 	add.w	r1, r7, #8
 80012c8:	230a      	movs	r3, #10
 80012ca:	482b      	ldr	r0, [pc, #172]	; (8001378 <printRadioSettings+0x31c>)
 80012cc:	f003 fd97 	bl	8004dfe <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f7ff f9bb 	bl	800064c <NRF24_read_register>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80012dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <printRadioSettings+0x29a>
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	492a      	ldr	r1, [pc, #168]	; (8001398 <printRadioSettings+0x33c>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 f8d2 	bl	8008498 <siprintf>
 80012f4:	e005      	b.n	8001302 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4928      	ldr	r1, [pc, #160]	; (800139c <printRadioSettings+0x340>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f007 f8cb 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff6a 	bl	80001e0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	230a      	movs	r3, #10
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <printRadioSettings+0x31c>)
 8001318:	f003 fd71 	bl	8004dfe <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800131c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001320:	f003 0306 	and.w	r3, r3, #6
 8001324:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001328:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001332:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <printRadioSettings+0x2ec>
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4918      	ldr	r1, [pc, #96]	; (80013a0 <printRadioSettings+0x344>)
 8001340:	4618      	mov	r0, r3
 8001342:	f007 f8a9 	bl	8008498 <siprintf>
 8001346:	e03b      	b.n	80013c0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <printRadioSettings+0x302>
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4913      	ldr	r1, [pc, #76]	; (80013a4 <printRadioSettings+0x348>)
 8001356:	4618      	mov	r0, r3
 8001358:	f007 f89e 	bl	8008498 <siprintf>
 800135c:	e030      	b.n	80013c0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800135e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001362:	2b02      	cmp	r3, #2
 8001364:	d122      	bne.n	80013ac <printRadioSettings+0x350>
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	490f      	ldr	r1, [pc, #60]	; (80013a8 <printRadioSettings+0x34c>)
 800136c:	4618      	mov	r0, r3
 800136e:	f007 f893 	bl	8008498 <siprintf>
 8001372:	e025      	b.n	80013c0 <printRadioSettings+0x364>
 8001374:	08009638 	.word	0x08009638
 8001378:	20000108 	.word	0x20000108
 800137c:	0800966c 	.word	0x0800966c
 8001380:	08009688 	.word	0x08009688
 8001384:	080096a4 	.word	0x080096a4
 8001388:	080096b8 	.word	0x080096b8
 800138c:	080096fc 	.word	0x080096fc
 8001390:	08009748 	.word	0x08009748
 8001394:	08009764 	.word	0x08009764
 8001398:	08009778 	.word	0x08009778
 800139c:	08009790 	.word	0x08009790
 80013a0:	080097a8 	.word	0x080097a8
 80013a4:	080097bc 	.word	0x080097bc
 80013a8:	080097d0 	.word	0x080097d0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d105      	bne.n	80013c0 <printRadioSettings+0x364>
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	49d7      	ldr	r1, [pc, #860]	; (8001718 <printRadioSettings+0x6bc>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f007 f86c 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff0b 	bl	80001e0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f107 0108 	add.w	r1, r7, #8
 80013d2:	230a      	movs	r3, #10
 80013d4:	48d1      	ldr	r0, [pc, #836]	; (800171c <printRadioSettings+0x6c0>)
 80013d6:	f003 fd12 	bl	8004dfe <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80013da:	463b      	mov	r3, r7
 80013dc:	2205      	movs	r2, #5
 80013de:	4619      	mov	r1, r3
 80013e0:	200a      	movs	r0, #10
 80013e2:	f7ff f95b 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	461c      	mov	r4, r3
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	461d      	mov	r5, r3
 80013ee:	78bb      	ldrb	r3, [r7, #2]
 80013f0:	787a      	ldrb	r2, [r7, #1]
 80013f2:	7839      	ldrb	r1, [r7, #0]
 80013f4:	f107 0008 	add.w	r0, r7, #8
 80013f8:	9102      	str	r1, [sp, #8]
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	462b      	mov	r3, r5
 8001400:	4622      	mov	r2, r4
 8001402:	49c7      	ldr	r1, [pc, #796]	; (8001720 <printRadioSettings+0x6c4>)
 8001404:	f007 f848 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fee7 	bl	80001e0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f107 0108 	add.w	r1, r7, #8
 800141a:	230a      	movs	r3, #10
 800141c:	48bf      	ldr	r0, [pc, #764]	; (800171c <printRadioSettings+0x6c0>)
 800141e:	f003 fcee 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001422:	463b      	mov	r3, r7
 8001424:	2205      	movs	r2, #5
 8001426:	4619      	mov	r1, r3
 8001428:	200b      	movs	r0, #11
 800142a:	f7ff f937 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800142e:	793b      	ldrb	r3, [r7, #4]
 8001430:	461c      	mov	r4, r3
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	461d      	mov	r5, r3
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	787a      	ldrb	r2, [r7, #1]
 800143a:	7839      	ldrb	r1, [r7, #0]
 800143c:	f107 0008 	add.w	r0, r7, #8
 8001440:	9102      	str	r1, [sp, #8]
 8001442:	9201      	str	r2, [sp, #4]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	462b      	mov	r3, r5
 8001448:	4622      	mov	r2, r4
 800144a:	49b6      	ldr	r1, [pc, #728]	; (8001724 <printRadioSettings+0x6c8>)
 800144c:	f007 f824 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fec3 	bl	80001e0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	230a      	movs	r3, #10
 8001464:	48ad      	ldr	r0, [pc, #692]	; (800171c <printRadioSettings+0x6c0>)
 8001466:	f003 fcca 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800146a:	463b      	mov	r3, r7
 800146c:	2201      	movs	r2, #1
 800146e:	4619      	mov	r1, r3
 8001470:	200c      	movs	r0, #12
 8001472:	f7ff f913 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001476:	783b      	ldrb	r3, [r7, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	49aa      	ldr	r1, [pc, #680]	; (8001728 <printRadioSettings+0x6cc>)
 8001480:	4618      	mov	r0, r3
 8001482:	f007 f809 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fea8 	bl	80001e0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f107 0108 	add.w	r1, r7, #8
 8001498:	230a      	movs	r3, #10
 800149a:	48a0      	ldr	r0, [pc, #640]	; (800171c <printRadioSettings+0x6c0>)
 800149c:	f003 fcaf 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80014a0:	463b      	mov	r3, r7
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	200d      	movs	r0, #13
 80014a8:	f7ff f8f8 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ac:	783b      	ldrb	r3, [r7, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	499d      	ldr	r1, [pc, #628]	; (800172c <printRadioSettings+0x6d0>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 ffee 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe8d 	bl	80001e0 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 0108 	add.w	r1, r7, #8
 80014ce:	230a      	movs	r3, #10
 80014d0:	4892      	ldr	r0, [pc, #584]	; (800171c <printRadioSettings+0x6c0>)
 80014d2:	f003 fc94 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80014d6:	463b      	mov	r3, r7
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	200e      	movs	r0, #14
 80014de:	f7ff f8dd 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e2:	783b      	ldrb	r3, [r7, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4991      	ldr	r1, [pc, #580]	; (8001730 <printRadioSettings+0x6d4>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 ffd3 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fe72 	bl	80001e0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f107 0108 	add.w	r1, r7, #8
 8001504:	230a      	movs	r3, #10
 8001506:	4885      	ldr	r0, [pc, #532]	; (800171c <printRadioSettings+0x6c0>)
 8001508:	f003 fc79 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800150c:	463b      	mov	r3, r7
 800150e:	2201      	movs	r2, #1
 8001510:	4619      	mov	r1, r3
 8001512:	200f      	movs	r0, #15
 8001514:	f7ff f8c2 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001518:	783b      	ldrb	r3, [r7, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4984      	ldr	r1, [pc, #528]	; (8001734 <printRadioSettings+0x6d8>)
 8001522:	4618      	mov	r0, r3
 8001524:	f006 ffb8 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe57 	bl	80001e0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f107 0108 	add.w	r1, r7, #8
 800153a:	230a      	movs	r3, #10
 800153c:	4877      	ldr	r0, [pc, #476]	; (800171c <printRadioSettings+0x6c0>)
 800153e:	f003 fc5e 	bl	8004dfe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001542:	463b      	mov	r3, r7
 8001544:	2205      	movs	r2, #5
 8001546:	4619      	mov	r1, r3
 8001548:	2010      	movs	r0, #16
 800154a:	f7ff f8a7 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800154e:	793b      	ldrb	r3, [r7, #4]
 8001550:	461c      	mov	r4, r3
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	461d      	mov	r5, r3
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	787a      	ldrb	r2, [r7, #1]
 800155a:	7839      	ldrb	r1, [r7, #0]
 800155c:	f107 0008 	add.w	r0, r7, #8
 8001560:	9102      	str	r1, [sp, #8]
 8001562:	9201      	str	r2, [sp, #4]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	462b      	mov	r3, r5
 8001568:	4622      	mov	r2, r4
 800156a:	4973      	ldr	r1, [pc, #460]	; (8001738 <printRadioSettings+0x6dc>)
 800156c:	f006 ff94 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fe33 	bl	80001e0 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29a      	uxth	r2, r3
 800157e:	f107 0108 	add.w	r1, r7, #8
 8001582:	230a      	movs	r3, #10
 8001584:	4865      	ldr	r0, [pc, #404]	; (800171c <printRadioSettings+0x6c0>)
 8001586:	f003 fc3a 	bl	8004dfe <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800158a:	2011      	movs	r0, #17
 800158c:	f7ff f85e 	bl	800064c <NRF24_read_register>
 8001590:	4603      	mov	r3, r0
 8001592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001596:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4966      	ldr	r1, [pc, #408]	; (800173c <printRadioSettings+0x6e0>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 ff77 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe16 	bl	80001e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f107 0108 	add.w	r1, r7, #8
 80015bc:	230a      	movs	r3, #10
 80015be:	4857      	ldr	r0, [pc, #348]	; (800171c <printRadioSettings+0x6c0>)
 80015c0:	f003 fc1d 	bl	8004dfe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff f841 	bl	800064c <NRF24_read_register>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4958      	ldr	r1, [pc, #352]	; (8001740 <printRadioSettings+0x6e4>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 ff5a 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdf9 	bl	80001e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	230a      	movs	r3, #10
 80015f8:	4848      	ldr	r0, [pc, #288]	; (800171c <printRadioSettings+0x6c0>)
 80015fa:	f003 fc00 	bl	8004dfe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80015fe:	2013      	movs	r0, #19
 8001600:	f7ff f824 	bl	800064c <NRF24_read_register>
 8001604:	4603      	mov	r3, r0
 8001606:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	494b      	ldr	r1, [pc, #300]	; (8001744 <printRadioSettings+0x6e8>)
 8001618:	4618      	mov	r0, r3
 800161a:	f006 ff3d 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fddc 	bl	80001e0 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	f107 0108 	add.w	r1, r7, #8
 8001630:	230a      	movs	r3, #10
 8001632:	483a      	ldr	r0, [pc, #232]	; (800171c <printRadioSettings+0x6c0>)
 8001634:	f003 fbe3 	bl	8004dfe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001638:	2014      	movs	r0, #20
 800163a:	f7ff f807 	bl	800064c <NRF24_read_register>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001644:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	493d      	ldr	r1, [pc, #244]	; (8001748 <printRadioSettings+0x6ec>)
 8001652:	4618      	mov	r0, r3
 8001654:	f006 ff20 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdbf 	bl	80001e0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	f107 0108 	add.w	r1, r7, #8
 800166a:	230a      	movs	r3, #10
 800166c:	482b      	ldr	r0, [pc, #172]	; (800171c <printRadioSettings+0x6c0>)
 800166e:	f003 fbc6 	bl	8004dfe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001672:	2015      	movs	r0, #21
 8001674:	f7fe ffea 	bl	800064c <NRF24_read_register>
 8001678:	4603      	mov	r3, r0
 800167a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800167e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4930      	ldr	r1, [pc, #192]	; (800174c <printRadioSettings+0x6f0>)
 800168c:	4618      	mov	r0, r3
 800168e:	f006 ff03 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fda2 	bl	80001e0 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f107 0108 	add.w	r1, r7, #8
 80016a4:	230a      	movs	r3, #10
 80016a6:	481d      	ldr	r0, [pc, #116]	; (800171c <printRadioSettings+0x6c0>)
 80016a8:	f003 fba9 	bl	8004dfe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80016ac:	2016      	movs	r0, #22
 80016ae:	f7fe ffcd 	bl	800064c <NRF24_read_register>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4922      	ldr	r1, [pc, #136]	; (8001750 <printRadioSettings+0x6f4>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fee6 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fd85 	bl	80001e0 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 0108 	add.w	r1, r7, #8
 80016de:	230a      	movs	r3, #10
 80016e0:	480e      	ldr	r0, [pc, #56]	; (800171c <printRadioSettings+0x6c0>)
 80016e2:	f003 fb8c 	bl	8004dfe <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80016e6:	201c      	movs	r0, #28
 80016e8:	f7fe ffb0 	bl	800064c <NRF24_read_register>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016f6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bfcc      	ite	gt
 80016fe:	2301      	movgt	r3, #1
 8001700:	2300      	movle	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800170a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfcc      	ite	gt
 8001712:	2301      	movgt	r3, #1
 8001714:	2300      	movle	r3, #0
 8001716:	e01d      	b.n	8001754 <printRadioSettings+0x6f8>
 8001718:	080097e4 	.word	0x080097e4
 800171c:	20000108 	.word	0x20000108
 8001720:	080097f8 	.word	0x080097f8
 8001724:	08009828 	.word	0x08009828
 8001728:	08009858 	.word	0x08009858
 800172c:	08009880 	.word	0x08009880
 8001730:	080098a8 	.word	0x080098a8
 8001734:	080098d0 	.word	0x080098d0
 8001738:	080098f8 	.word	0x080098f8
 800173c:	08009924 	.word	0x08009924
 8001740:	08009940 	.word	0x08009940
 8001744:	0800995c 	.word	0x0800995c
 8001748:	08009978 	.word	0x08009978
 800174c:	08009994 	.word	0x08009994
 8001750:	080099b0 	.word	0x080099b0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001758:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800175c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001760:	2b00      	cmp	r3, #0
 8001762:	bfcc      	ite	gt
 8001764:	2301      	movgt	r3, #1
 8001766:	2300      	movle	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfcc      	ite	gt
 8001778:	2301      	movgt	r3, #1
 800177a:	2300      	movle	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001784:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfcc      	ite	gt
 800178c:	2301      	movgt	r3, #1
 800178e:	2300      	movle	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001794:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001798:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800179c:	2b00      	cmp	r3, #0
 800179e:	bfcc      	ite	gt
 80017a0:	2301      	movgt	r3, #1
 80017a2:	2300      	movle	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f107 0008 	add.w	r0, r7, #8
 80017aa:	9303      	str	r3, [sp, #12]
 80017ac:	9402      	str	r4, [sp, #8]
 80017ae:	9101      	str	r1, [sp, #4]
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	4633      	mov	r3, r6
 80017b4:	462a      	mov	r2, r5
 80017b6:	4936      	ldr	r1, [pc, #216]	; (8001890 <printRadioSettings+0x834>)
 80017b8:	f006 fe6e 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd0d 	bl	80001e0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f107 0108 	add.w	r1, r7, #8
 80017ce:	230a      	movs	r3, #10
 80017d0:	4830      	ldr	r0, [pc, #192]	; (8001894 <printRadioSettings+0x838>)
 80017d2:	f003 fb14 	bl	8004dfe <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017d6:	201d      	movs	r0, #29
 80017d8:	f7fe ff38 	bl	800064c <NRF24_read_register>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <printRadioSettings+0x7a0>
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	4929      	ldr	r1, [pc, #164]	; (8001898 <printRadioSettings+0x83c>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 fe4f 	bl	8008498 <siprintf>
 80017fa:	e005      	b.n	8001808 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4926      	ldr	r1, [pc, #152]	; (800189c <printRadioSettings+0x840>)
 8001802:	4618      	mov	r0, r3
 8001804:	f006 fe48 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fce7 	bl	80001e0 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	f107 0108 	add.w	r1, r7, #8
 800181a:	230a      	movs	r3, #10
 800181c:	481d      	ldr	r0, [pc, #116]	; (8001894 <printRadioSettings+0x838>)
 800181e:	f003 faee 	bl	8004dfe <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001822:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <printRadioSettings+0x7e0>
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <printRadioSettings+0x844>)
 8001834:	4618      	mov	r0, r3
 8001836:	f006 fe2f 	bl	8008498 <siprintf>
 800183a:	e005      	b.n	8001848 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <printRadioSettings+0x848>)
 8001842:	4618      	mov	r0, r3
 8001844:	f006 fe28 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fcc7 	bl	80001e0 <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	f107 0108 	add.w	r1, r7, #8
 800185a:	230a      	movs	r3, #10
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <printRadioSettings+0x838>)
 800185e:	f003 face 	bl	8004dfe <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4910      	ldr	r1, [pc, #64]	; (80018a8 <printRadioSettings+0x84c>)
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fe15 	bl	8008498 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fcb4 	bl	80001e0 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	f107 0108 	add.w	r1, r7, #8
 8001880:	230a      	movs	r3, #10
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <printRadioSettings+0x838>)
 8001884:	f003 fabb 	bl	8004dfe <HAL_UART_Transmit>
}
 8001888:	bf00      	nop
 800188a:	3774      	adds	r7, #116	; 0x74
 800188c:	46bd      	mov	sp, r7
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001890:	080099cc 	.word	0x080099cc
 8001894:	20000108 	.word	0x20000108
 8001898:	08009a18 	.word	0x08009a18
 800189c:	08009a30 	.word	0x08009a30
 80018a0:	08009a48 	.word	0x08009a48
 80018a4:	08009a64 	.word	0x08009a64
 80018a8:	08009638 	.word	0x08009638

080018ac <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <Ringbuf_init+0x68>)
 80018b2:	4a19      	ldr	r2, [pc, #100]	; (8001918 <Ringbuf_init+0x6c>)
 80018b4:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <Ringbuf_init+0x70>)
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <Ringbuf_init+0x74>)
 80018ba:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <Ringbuf_init+0x78>)
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <Ringbuf_init+0x7c>)
 80018c0:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <Ringbuf_init+0x80>)
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <Ringbuf_init+0x84>)
 80018c6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <Ringbuf_init+0x88>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <Ringbuf_init+0x88>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <Ringbuf_init+0x8c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <Ringbuf_init+0x8c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <Ringbuf_init+0x88>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <Ringbuf_init+0x88>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0220 	orr.w	r2, r2, #32
 80018f6:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <Ringbuf_init+0x8c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <Ringbuf_init+0x8c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	60da      	str	r2, [r3, #12]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20004290 	.word	0x20004290
 8001918:	2000014c 	.word	0x2000014c
 800191c:	200042a0 	.word	0x200042a0
 8001920:	20000194 	.word	0x20000194
 8001924:	200042ac 	.word	0x200042ac
 8001928:	200001dc 	.word	0x200001dc
 800192c:	20004288 	.word	0x20004288
 8001930:	20000224 	.word	0x20000224
 8001934:	200042bc 	.word	0x200042bc
 8001938:	2000435c 	.word	0x2000435c

0800193c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	3301      	adds	r3, #1
 800194e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001952:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	429a      	cmp	r2, r3
 800195c:	d007      	beq.n	800196e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	79f9      	ldrb	r1, [r7, #7]
 8001966:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <Uart_read>:

	return -1;
}

int Uart_read(UART_HandleTypeDef *uart)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <Uart_read+0x9c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11c      	bne.n	80019c6 <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <Uart_read+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <Uart_read+0xa0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	429a      	cmp	r2, r3
 800199a:	d102      	bne.n	80019a2 <Uart_read+0x26>
		  {
		    return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e034      	b.n	8001a0c <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <Uart_read+0xa0>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <Uart_read+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <Uart_read+0xa0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <Uart_read+0xa0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 80019c2:	7bbb      	ldrb	r3, [r7, #14]
 80019c4:	e022      	b.n	8001a0c <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <Uart_read+0xa4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11c      	bne.n	8001a08 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <Uart_read+0xa8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <Uart_read+0xa8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	429a      	cmp	r2, r3
 80019dc:	d102      	bne.n	80019e4 <Uart_read+0x68>
		  {
		    return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e013      	b.n	8001a0c <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <Uart_read+0xa8>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <Uart_read+0xa8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <Uart_read+0xa8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <Uart_read+0xa8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	e001      	b.n	8001a0c <Uart_read+0x90>
		  }
	}

	else return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	200042bc 	.word	0x200042bc
 8001a1c:	20004290 	.word	0x20004290
 8001a20:	2000435c 	.word	0x2000435c
 8001a24:	200042ac 	.word	0x200042ac

08001a28 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db4c      	blt.n	8001ad2 <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <Uart_write+0xb8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d122      	bne.n	8001a86 <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <Uart_write+0xbc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	3301      	adds	r3, #1
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001a4e:	bf00      	nop
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <Uart_write+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0f9      	beq.n	8001a50 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <Uart_write+0xbc>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <Uart_write+0xbc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	b2c9      	uxtb	r1, r1
 8001a6a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <Uart_write+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <Uart_write+0xb8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <Uart_write+0xb8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a82:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001a84:	e025      	b.n	8001ad2 <Uart_write+0xaa>
		else if (uart == pc_uart){
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <Uart_write+0xc0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d121      	bne.n	8001ad2 <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <Uart_write+0xc4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	3301      	adds	r3, #1
 8001a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9a:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001a9c:	bf00      	nop
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <Uart_write+0xc4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d0f9      	beq.n	8001a9e <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <Uart_write+0xc4>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <Uart_write+0xc4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	b2c9      	uxtb	r1, r1
 8001ab8:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <Uart_write+0xc4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <Uart_write+0xc0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <Uart_write+0xc0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad0:	60da      	str	r2, [r3, #12]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200042bc 	.word	0x200042bc
 8001ae4:	200042a0 	.word	0x200042a0
 8001ae8:	2000435c 	.word	0x2000435c
 8001aec:	20004288 	.word	0x20004288

08001af0 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <IsDataAvailable+0x64>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d10e      	bne.n	8001b1e <IsDataAvailable+0x2e>
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <IsDataAvailable+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <IsDataAvailable+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	e014      	b.n	8001b48 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <IsDataAvailable+0x6c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10e      	bne.n	8001b44 <IsDataAvailable+0x54>
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <IsDataAvailable+0x70>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <IsDataAvailable+0x70>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3340      	adds	r3, #64	; 0x40
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b42:	e001      	b.n	8001b48 <IsDataAvailable+0x58>
	return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	200042bc 	.word	0x200042bc
 8001b58:	20004290 	.word	0x20004290
 8001b5c:	2000435c 	.word	0x2000435c
 8001b60:	200042ac 	.word	0x200042ac

08001b64 <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d023      	beq.n	8001bce <Uart_isr+0x6a>
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01e      	beq.n	8001bce <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <Uart_isr+0x128>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d107      	bne.n	8001bb6 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <Uart_isr+0x12c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fec4 	bl	800193c <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001bb4:	e063      	b.n	8001c7e <Uart_isr+0x11a>
        else if (huart == pc_uart)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a36      	ldr	r2, [pc, #216]	; (8001c94 <Uart_isr+0x130>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d15f      	bne.n	8001c7e <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <Uart_isr+0x134>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff feb8 	bl	800193c <store_char>
        return;
 8001bcc:	e057      	b.n	8001c7e <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d055      	beq.n	8001c84 <Uart_isr+0x120>
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d050      	beq.n	8001c84 <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <Uart_isr+0x128>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d122      	bne.n	8001c30 <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <Uart_isr+0x138>)
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <Uart_isr+0x138>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d108      	bne.n	8001c08 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001c06:	e03c      	b.n	8001c82 <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <Uart_isr+0x138>)
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <Uart_isr+0x138>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <Uart_isr+0x138>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	3301      	adds	r3, #1
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <Uart_isr+0x138>)
 8001c1e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	7b7a      	ldrb	r2, [r7, #13]
 8001c2c:	605a      	str	r2, [r3, #4]
    	return;
 8001c2e:	e028      	b.n	8001c82 <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <Uart_isr+0x130>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d124      	bne.n	8001c82 <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <Uart_isr+0x13c>)
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <Uart_isr+0x13c>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d108      	bne.n	8001c56 <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c52:	60da      	str	r2, [r3, #12]
    	return;
 8001c54:	e015      	b.n	8001c82 <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <Uart_isr+0x13c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <Uart_isr+0x13c>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <Uart_isr+0x13c>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	3301      	adds	r3, #1
 8001c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <Uart_isr+0x13c>)
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	7bba      	ldrb	r2, [r7, #14]
 8001c7a:	605a      	str	r2, [r3, #4]
    	return;
 8001c7c:	e001      	b.n	8001c82 <Uart_isr+0x11e>
        return;
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <Uart_isr+0x120>
    	return;
 8001c82:	bf00      	nop
    }
}
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200042bc 	.word	0x200042bc
 8001c90:	20004290 	.word	0x20004290
 8001c94:	2000435c 	.word	0x2000435c
 8001c98:	200042ac 	.word	0x200042ac
 8001c9c:	20000194 	.word	0x20000194
 8001ca0:	20000224 	.word	0x20000224

08001ca4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8001cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000026c 	.word	0x2000026c
 8001cd4:	20000320 	.word	0x20000320

08001cd8 <initNRF>:
void Tx_Adding_CRC(uint8_t *data, uint32_t len);
void extractData(char *b);
uint32_t extractCrc(char *b);

void initNRF(void)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b097      	sub	sp, #92	; 0x5c
 8001cdc:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(GPIOB, CSNpin_Pin, CEpin_Pin, hspi1);
 8001cde:	4c0e      	ldr	r4, [pc, #56]	; (8001d18 <initNRF+0x40>)
 8001ce0:	4668      	mov	r0, sp
 8001ce2:	1d23      	adds	r3, r4, #4
 8001ce4:	2254      	movs	r2, #84	; 0x54
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f006 fa9c 	bl	8008224 <memcpy>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <initNRF+0x44>)
 8001cf6:	f7fe fdb3 	bl	8000860 <NRF24_begin>
	NRF24_disableCRC();
 8001cfa:	f7ff f8d9 	bl	8000eb0 <NRF24_disableCRC>
	NRF24_setAutoAck(false);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff f81a 	bl	8000d38 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001d04:	2034      	movs	r0, #52	; 0x34
 8001d06:	f7fe ffbe 	bl	8000c86 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001d0a:	2020      	movs	r0, #32
 8001d0c:	f7fe ffd0 	bl	8000cb0 <NRF24_setPayloadSize>
	//nrf24_DebugUART_Init(huart2);
	//printRadioSettings();
}
 8001d10:	bf00      	nop
 8001d12:	3704      	adds	r7, #4
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	20004304 	.word	0x20004304
 8001d1c:	40020400 	.word	0x40020400

08001d20 <Tx_Adding_CRC>:

void Tx_Adding_CRC(uint8_t *data, uint32_t len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	uint32_t Tx_crc;
	uint8_t crcData[4] = {'\0'};
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
	Tx_crc  = HAL_CRC_Calculate(&hcrc,data, len);
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4819      	ldr	r0, [pc, #100]	; (8001d98 <Tx_Adding_CRC+0x78>)
 8001d34:	f001 f910 	bl	8002f58 <HAL_CRC_Calculate>
 8001d38:	6138      	str	r0, [r7, #16]
	crcData[0] = (Tx_crc & 0xFF000000)>>24; // on décompose le nombre en 4 pour le placer dans la trame
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	0e1b      	lsrs	r3, r3, #24
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	733b      	strb	r3, [r7, #12]
	crcData[1] = (Tx_crc & 0x00FF0000)>>16;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	737b      	strb	r3, [r7, #13]
	crcData[2] = (Tx_crc & 0x0000FF00)>>8;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	73bb      	strb	r3, [r7, #14]
	crcData[3] = (Tx_crc & 0x000000FF);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	73fb      	strb	r3, [r7, #15]

	data[len] = '|';
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	227c      	movs	r2, #124	; 0x7c
 8001d60:	701a      	strb	r2, [r3, #0]
	for (uint32_t n = 0;n<4; n++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e00e      	b.n	8001d86 <Tx_Adding_CRC+0x66>
	{
		data[len+1 + n ] = crcData[n];
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	f107 010c 	add.w	r1, r7, #12
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	440a      	add	r2, r1
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
	for (uint32_t n = 0;n<4; n++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d9ed      	bls.n	8001d68 <Tx_Adding_CRC+0x48>
	}
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200042b0 	.word	0x200042b0

08001d9c <extractCrc>:

uint32_t extractCrc(char *b)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	char delim[1] = "|";
 8001da4:	237c      	movs	r3, #124	; 0x7c
 8001da6:	723b      	strb	r3, [r7, #8]
	char *ptr = strtok(b, delim);
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 fbec 	bl	800858c <strtok>
 8001db4:	60f8      	str	r0, [r7, #12]
	ptr = strtok(NULL, delim);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f006 fbe5 	bl	800858c <strtok>
 8001dc2:	60f8      	str	r0, [r7, #12]
	return strtoul(ptr,NULL,10);
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f006 fcb7 	bl	800873c <strtoul>
 8001dce:	4603      	mov	r3, r0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <extractData>:

void extractData(char *b)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	char delim[1] = "|";
 8001de0:	237c      	movs	r3, #124	; 0x7c
 8001de2:	733b      	strb	r3, [r7, #12]
	strtok(b, delim);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f006 fbce 	bl	800858c <strtok>
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b092      	sub	sp, #72	; 0x48
 8001dfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfe:	f000 ff47 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e02:	f000 f90f 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e06:	f000 fa09 	bl	800221c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e0a:	f000 f9dd 	bl	80021c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001e0e:	f000 f9b1 	bl	8002174 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001e12:	f000 f979 	bl	8002108 <MX_SPI1_Init>
  MX_CRC_Init();
 8001e16:	f000 f963 	bl	80020e0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */



  simpleQueue = xQueueCreate(32,sizeof(buf));
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	2020      	movs	r0, #32
 8001e20:	f004 f824 	bl	8005e6c <xQueueGenericCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <main+0x1c4>)
 8001e28:	6013      	str	r3, [r2, #0]
  simpleQueue2 = xQueueCreate(32,sizeof(buf));
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	2020      	movs	r0, #32
 8001e30:	f004 f81c 	bl	8005e6c <xQueueGenericCreate>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a62      	ldr	r2, [pc, #392]	; (8001fc0 <main+0x1c8>)
 8001e38:	6013      	str	r3, [r2, #0]
  simpleQueue3 = xQueueCreate(32,sizeof(buf));
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	2020      	movs	r0, #32
 8001e40:	f004 f814 	bl	8005e6c <xQueueGenericCreate>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a5f      	ldr	r2, [pc, #380]	; (8001fc4 <main+0x1cc>)
 8001e48:	6013      	str	r3, [r2, #0]
  simpleQueue4 = xQueueCreate(32,sizeof(buf));
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	2020      	movs	r0, #32
 8001e50:	f004 f80c 	bl	8005e6c <xQueueGenericCreate>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a5c      	ldr	r2, [pc, #368]	; (8001fc8 <main+0x1d0>)
 8001e58:	6013      	str	r3, [r2, #0]

  initNRF();
 8001e5a:	f7ff ff3d 	bl	8001cd8 <initNRF>
  // 1
  if (simpleQueue == 0)  // Queue not created
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <main+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <main+0x8a>
    {
  	  char *str = "Unable to create Integer Queue 1\n\n";
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <main+0x1d4>)
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001e6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e6c:	f7fe f9b8 	bl	80001e0 <strlen>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
 8001e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e7a:	4855      	ldr	r0, [pc, #340]	; (8001fd0 <main+0x1d8>)
 8001e7c:	f002 ffbf 	bl	8004dfe <HAL_UART_Transmit>
 8001e80:	e00c      	b.n	8001e9c <main+0xa4>
    }
    else
    {
  	  char *str = "Integer Queue 1 Created successfully\n\n";
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <main+0x1dc>)
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001e86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e88:	f7fe f9aa 	bl	80001e0 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e96:	484e      	ldr	r0, [pc, #312]	; (8001fd0 <main+0x1d8>)
 8001e98:	f002 ffb1 	bl	8004dfe <HAL_UART_Transmit>
    }

  // 2
  if (simpleQueue2 == 0)  // Queue not created
 8001e9c:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <main+0x1c8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <main+0xc8>
    {
  	  char *str = "Unable to create Integer Queue 2\n\n";
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <main+0x1e0>)
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eaa:	f7fe f999 	bl	80001e0 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eb8:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <main+0x1d8>)
 8001eba:	f002 ffa0 	bl	8004dfe <HAL_UART_Transmit>
 8001ebe:	e00c      	b.n	8001eda <main+0xe2>
    }
    else
    {
  	  char *str = "Integer Queue 2 Created successfully\n\n";
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <main+0x1e4>)
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001ec4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ec6:	f7fe f98b 	bl	80001e0 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ed4:	483e      	ldr	r0, [pc, #248]	; (8001fd0 <main+0x1d8>)
 8001ed6:	f002 ff92 	bl	8004dfe <HAL_UART_Transmit>
    }

  // 3
  if (simpleQueue3 == 0)  // Queue not created
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <main+0x1cc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <main+0x106>
      {
    	  char *str = "Unable to create Integer Queue 3\n\n";
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <main+0x1e8>)
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee8:	f7fe f97a 	bl	80001e0 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef6:	4836      	ldr	r0, [pc, #216]	; (8001fd0 <main+0x1d8>)
 8001ef8:	f002 ff81 	bl	8004dfe <HAL_UART_Transmit>
 8001efc:	e00c      	b.n	8001f18 <main+0x120>
      }
      else
      {
    	  char *str = "Integer Queue 3 Created successfully\n\n";
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <main+0x1ec>)
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f04:	f7fe f96c 	bl	80001e0 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f12:	482f      	ldr	r0, [pc, #188]	; (8001fd0 <main+0x1d8>)
 8001f14:	f002 ff73 	bl	8004dfe <HAL_UART_Transmit>
      }

  // 4
  if (simpleQueue4 == 0)  // Queue not created
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <main+0x1d0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <main+0x144>
      {
    	  char *str = "Unable to create Integer Queue 4\n\n";
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <main+0x1f0>)
 8001f22:	623b      	str	r3, [r7, #32]
    	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001f24:	6a38      	ldr	r0, [r7, #32]
 8001f26:	f7fe f95b 	bl	80001e0 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	4826      	ldr	r0, [pc, #152]	; (8001fd0 <main+0x1d8>)
 8001f36:	f002 ff62 	bl	8004dfe <HAL_UART_Transmit>
 8001f3a:	e00c      	b.n	8001f56 <main+0x15e>
      }
      else
      {
    	  char *str = "Integer Queue 4 Created successfully\n\n";
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <main+0x1f4>)
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f42:	f7fe f94d 	bl	80001e0 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f50:	481f      	ldr	r0, [pc, #124]	; (8001fd0 <main+0x1d8>)
 8001f52:	f002 ff54 	bl	8004dfe <HAL_UART_Transmit>
      }

  xTaskCreate(taskUartPc, "task1", 128, NULL, 3,&SendertaskHC12_handler);
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <main+0x1f8>)
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <main+0x1fc>)
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <main+0x200>)
 8001f66:	f004 fc7c 	bl	8006862 <xTaskCreate>
  xTaskCreate(taskUartHc12, "task2", 128, NULL, 3,&ReceivertaskHC12_handler);
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <main+0x204>)
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2303      	movs	r3, #3
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	4922      	ldr	r1, [pc, #136]	; (8002000 <main+0x208>)
 8001f78:	4822      	ldr	r0, [pc, #136]	; (8002004 <main+0x20c>)
 8001f7a:	f004 fc72 	bl	8006862 <xTaskCreate>

  xTaskCreate(taskNrfTx, "task3", 128, NULL, 3,&SendertaskNRF_handler);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <main+0x210>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2303      	movs	r3, #3
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	4920      	ldr	r1, [pc, #128]	; (800200c <main+0x214>)
 8001f8c:	4820      	ldr	r0, [pc, #128]	; (8002010 <main+0x218>)
 8001f8e:	f004 fc68 	bl	8006862 <xTaskCreate>
  xTaskCreate(taskNrfRx, "task4", 128, NULL, 3,&ReceivertaskNRF_handler);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <main+0x21c>)
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2303      	movs	r3, #3
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	491e      	ldr	r1, [pc, #120]	; (8002018 <main+0x220>)
 8001fa0:	481e      	ldr	r0, [pc, #120]	; (800201c <main+0x224>)
 8001fa2:	f004 fc5e 	bl	8006862 <xTaskCreate>

  xMutex = xSemaphoreCreateMutex();
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f003 ffd3 	bl	8005f52 <xQueueCreateMutex>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <main+0x228>)
 8001fb0:	6013      	str	r3, [r2, #0]
  Ringbuf_init();
 8001fb2:	f7ff fc7b 	bl	80018ac <Ringbuf_init>
  vTaskStartScheduler();
 8001fb6:	f004 fdd5 	bl	8006b64 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001fba:	e7fe      	b.n	8001fba <main+0x1c2>
 8001fbc:	20004298 	.word	0x20004298
 8001fc0:	200042a8 	.word	0x200042a8
 8001fc4:	2000428c 	.word	0x2000428c
 8001fc8:	20004284 	.word	0x20004284
 8001fcc:	08009b7c 	.word	0x08009b7c
 8001fd0:	2000435c 	.word	0x2000435c
 8001fd4:	08009ba0 	.word	0x08009ba0
 8001fd8:	08009bc8 	.word	0x08009bc8
 8001fdc:	08009bec 	.word	0x08009bec
 8001fe0:	08009c14 	.word	0x08009c14
 8001fe4:	08009c38 	.word	0x08009c38
 8001fe8:	08009c60 	.word	0x08009c60
 8001fec:	08009c84 	.word	0x08009c84
 8001ff0:	20004294 	.word	0x20004294
 8001ff4:	08009cac 	.word	0x08009cac
 8001ff8:	080029f1 	.word	0x080029f1
 8001ffc:	200042a4 	.word	0x200042a4
 8002000:	08009cb4 	.word	0x08009cb4
 8002004:	08002b45 	.word	0x08002b45
 8002008:	2000429c 	.word	0x2000429c
 800200c:	08009cbc 	.word	0x08009cbc
 8002010:	08002949 	.word	0x08002949
 8002014:	20004280 	.word	0x20004280
 8002018:	08009cc4 	.word	0x08009cc4
 800201c:	08002849 	.word	0x08002849
 8002020:	200043e8 	.word	0x200043e8

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	; 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	2230      	movs	r2, #48	; 0x30
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f006 f904 	bl	8008240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <SystemClock_Config+0xb4>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <SystemClock_Config+0xb4>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <SystemClock_Config+0xb4>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <SystemClock_Config+0xb8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <SystemClock_Config+0xb8>)
 800206e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <SystemClock_Config+0xb8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002084:	2301      	movs	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002088:	2310      	movs	r3, #16
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002090:	f107 0320 	add.w	r3, r7, #32
 8002094:	4618      	mov	r0, r3
 8002096:	f001 f9c3 	bl	8003420 <HAL_RCC_OscConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80020a0:	f000 f912 	bl	80022c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a4:	230f      	movs	r3, #15
 80020a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fc25 	bl	8003910 <HAL_RCC_ClockConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80020cc:	f000 f8fc 	bl	80022c8 <Error_Handler>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3750      	adds	r7, #80	; 0x50
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000

080020e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_CRC_Init+0x20>)
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <MX_CRC_Init+0x24>)
 80020e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_CRC_Init+0x20>)
 80020ec:	f000 ff18 	bl	8002f20 <HAL_CRC_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80020f6:	f000 f8e7 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200042b0 	.word	0x200042b0
 8002104:	40023000 	.word	0x40023000

08002108 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <MX_SPI1_Init+0x64>)
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <MX_SPI1_Init+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_SPI1_Init+0x64>)
 8002114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_SPI1_Init+0x64>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_SPI1_Init+0x64>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_SPI1_Init+0x64>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_SPI1_Init+0x64>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_SPI1_Init+0x64>)
 8002134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_SPI1_Init+0x64>)
 800213c:	2220      	movs	r2, #32
 800213e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_SPI1_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_SPI1_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_SPI1_Init+0x64>)
 8002154:	220a      	movs	r2, #10
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <MX_SPI1_Init+0x64>)
 800215a:	f001 fddb 	bl	8003d14 <HAL_SPI_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002164:	f000 f8b0 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20004304 	.word	0x20004304
 8002170:	40013000 	.word	0x40013000

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021ac:	f002 fdda 	bl	8004d64 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 f887 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200042bc 	.word	0x200042bc
 80021c4:	40011000 	.word	0x40011000

080021c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART2_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 8002200:	f002 fdb0 	bl	8004d64 <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f000 f85d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000435c 	.word	0x2000435c
 8002218:	40004400 	.word	0x40004400

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <MX_GPIO_Init+0x80>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <MX_GPIO_Init+0x80>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_GPIO_Init+0x80>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_GPIO_Init+0x80>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <MX_GPIO_Init+0x80>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_GPIO_Init+0x80>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CEpin_Pin|CSNpin_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <MX_GPIO_Init+0x84>)
 8002272:	f001 f8bb 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CEpin_Pin CSNpin_Pin */
  GPIO_InitStruct.Pin = CEpin_Pin|CSNpin_Pin;
 8002276:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800227a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4619      	mov	r1, r3
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <MX_GPIO_Init+0x84>)
 8002290:	f000 ff28 	bl	80030e4 <HAL_GPIO_Init>

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022b6:	f000 fd0d 	bl	8002cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40000c00 	.word	0x40000c00

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>
	...

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_MspInit+0x54>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_MspInit+0x54>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_MspInit+0x54>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_MspInit+0x54>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_MspInit+0x54>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_MspInit+0x54>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	210f      	movs	r1, #15
 8002316:	f06f 0001 	mvn.w	r0, #1
 800231a:	f000 fdd7 	bl	8002ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_CRC_MspInit+0x3c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10d      	bne.n	800235a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_CRC_MspInit+0x40>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_CRC_MspInit+0x40>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_CRC_MspInit+0x40>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023000 	.word	0x40023000
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_SPI_MspInit+0x84>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d12b      	bne.n	80023ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 800239c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_SPI_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023ca:	23e0      	movs	r3, #224	; 0xe0
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023da:	2305      	movs	r3, #5
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_SPI_MspInit+0x8c>)
 80023e6:	f000 fe7d 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40013000 	.word	0x40013000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <HAL_UART_MspInit+0x108>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d135      	bne.n	800248e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_UART_MspInit+0x10c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_UART_MspInit+0x10c>)
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_UART_MspInit+0x10c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_UART_MspInit+0x10c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_UART_MspInit+0x10c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_UART_MspInit+0x10c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800245a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246c:	2307      	movs	r3, #7
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	4826      	ldr	r0, [pc, #152]	; (8002510 <HAL_UART_MspInit+0x110>)
 8002478:	f000 fe34 	bl	80030e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2105      	movs	r1, #5
 8002480:	2025      	movs	r0, #37	; 0x25
 8002482:	f000 fd23 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002486:	2025      	movs	r0, #37	; 0x25
 8002488:	f000 fd3c 	bl	8002f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800248c:	e038      	b.n	8002500 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_UART_MspInit+0x114>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d133      	bne.n	8002500 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_UART_MspInit+0x10c>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_UART_MspInit+0x10c>)
 80024a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_UART_MspInit+0x10c>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_UART_MspInit+0x10c>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_UART_MspInit+0x10c>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6313      	str	r3, [r2, #48]	; 0x30
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_UART_MspInit+0x10c>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024d0:	230c      	movs	r3, #12
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e0:	2307      	movs	r3, #7
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4809      	ldr	r0, [pc, #36]	; (8002510 <HAL_UART_MspInit+0x110>)
 80024ec:	f000 fdfa 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2105      	movs	r1, #5
 80024f4:	2026      	movs	r0, #38	; 0x26
 80024f6:	f000 fce9 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024fa:	2026      	movs	r0, #38	; 0x26
 80024fc:	f000 fd02 	bl	8002f04 <HAL_NVIC_EnableIRQ>
}
 8002500:	bf00      	nop
 8002502:	3730      	adds	r7, #48	; 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40011000 	.word	0x40011000
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000
 8002514:	40004400 	.word	0x40004400

08002518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	2032      	movs	r0, #50	; 0x32
 800252e:	f000 fccd 	bl	8002ecc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002532:	2032      	movs	r0, #50	; 0x32
 8002534:	f000 fce6 	bl	8002f04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_InitTick+0xa4>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_InitTick+0xa4>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6413      	str	r3, [r2, #64]	; 0x40
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_InitTick+0xa4>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002554:	f107 0210 	add.w	r2, r7, #16
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fba6 	bl	8003cb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002564:	f001 fb7c 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8002568:	4603      	mov	r3, r0
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_InitTick+0xa8>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	3b01      	subs	r3, #1
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_InitTick+0xac>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_InitTick+0xb0>)
 8002580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_InitTick+0xac>)
 8002584:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002588:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_InitTick+0xac>)
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_InitTick+0xac>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_InitTick+0xac>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <HAL_InitTick+0xac>)
 800259e:	f002 f961 	bl	8004864 <HAL_TIM_Base_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80025a8:	4806      	ldr	r0, [pc, #24]	; (80025c4 <HAL_InitTick+0xac>)
 80025aa:	f002 f9b5 	bl	8004918 <HAL_TIM_Base_Start_IT>
 80025ae:	4603      	mov	r3, r0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	431bde83 	.word	0x431bde83
 80025c4:	200043a0 	.word	0x200043a0
 80025c8:	40000c00 	.word	0x40000c00

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <NMI_Handler+0x4>

080025d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler+0x4>

080025de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80025fc:	4803      	ldr	r0, [pc, #12]	; (800260c <USART1_IRQHandler+0x14>)
 80025fe:	f7ff fab1 	bl	8001b64 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002602:	4802      	ldr	r0, [pc, #8]	; (800260c <USART1_IRQHandler+0x14>)
 8002604:	f002 fc8e 	bl	8004f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200042bc 	.word	0x200042bc

08002610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <USART2_IRQHandler+0x14>)
 8002616:	f7ff faa5 	bl	8001b64 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART2_IRQHandler+0x14>)
 800261c:	f002 fc82 	bl	8004f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000435c 	.word	0x2000435c

08002628 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM5_IRQHandler+0x10>)
 800262e:	f002 f9d5 	bl	80049dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200043a0 	.word	0x200043a0

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_kill>:

int _kill(int pid, int sig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002656:	f005 fcb1 	bl	8007fbc <__errno>
 800265a:	4603      	mov	r3, r0
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
	return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_exit>:

void _exit (int status)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffe7 	bl	800264c <_kill>
	while (1) {}		/* Make sure we hang here */
 800267e:	e7fe      	b.n	800267e <_exit+0x12>

08002680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e00a      	b.n	80026a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002692:	f3af 8000 	nop.w
 8002696:	4601      	mov	r1, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf0      	blt.n	8002692 <_read+0x12>
	}

return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e009      	b.n	80026e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60ba      	str	r2, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf1      	blt.n	80026cc <_write+0x12>
	}
	return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_close>:

int _close(int file)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
	return -1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271a:	605a      	str	r2, [r3, #4]
	return 0;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_isatty>:

int _isatty(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return 1;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f005 fc16 	bl	8007fbc <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20020000 	.word	0x20020000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	20000520 	.word	0x20000520
 80027c4:	20004400 	.word	0x20004400

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Nrf_rx_init>:
#include "tasks_robocom.h"

SemaphoreHandle_t xMutex;

void Nrf_rx_init(uint64_t RxpipeAddrs)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	e9c7 0100 	strd	r0, r1, [r7]
	//NRF24_openWritingPipe(0);
	NRF24_flush_tx();
 80027f6:	f7fe f815 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 80027fa:	f7fe f81b 	bl	8000834 <NRF24_flush_rx>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80027fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002802:	2001      	movs	r0, #1
 8002804:	f7fe f9d6 	bl	8000bb4 <NRF24_openReadingPipe>
	NRF24_startListening();
 8002808:	f7fe f90a 	bl	8000a20 <NRF24_startListening>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <Nrf_tx_init>:

void Nrf_tx_init(uint64_t TxpipeAddrs)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_flush_tx();
 800281e:	f7fe f801 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002822:	f7fe f807 	bl	8000834 <NRF24_flush_rx>
	NRF24_stopListening();
 8002826:	f7fe f921 	bl	8000a6c <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 800282a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282e:	f7fe f99d 	bl	8000b6c <NRF24_openWritingPipe>
	NRF24_openReadingPipe(1, 0);
 8002832:	2100      	movs	r1, #0
 8002834:	2001      	movs	r0, #1
 8002836:	f7fe f9bd 	bl	8000bb4 <NRF24_openReadingPipe>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	0000      	movs	r0, r0
 8002844:	0000      	movs	r0, r0
	...

08002848 <taskNrfRx>:

void taskNrfRx(void * argument)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	uint32_t *myRxData = (char *) malloc( 32 ); // buffer pour contenir les data du nrf
 8002850:	2020      	movs	r0, #32
 8002852:	f005 fcd7 	bl	8008204 <malloc>
 8002856:	4603      	mov	r3, r0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *myRxData2 = (char *) malloc( 32 );
 800285a:	2020      	movs	r0, #32
 800285c:	f005 fcd2 	bl	8008204 <malloc>
 8002860:	4603      	mov	r3, r0
 8002862:	623b      	str	r3, [r7, #32]
	uint32_t Tickdelay = pdMS_TO_TICKS(500);
 8002864:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002868:	61fb      	str	r3, [r7, #28]
	uint32_t val_crc = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
	uint32_t val_crc_verif = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
	char *b= (char *) malloc( 40 );//debug
 8002872:	2028      	movs	r0, #40	; 0x28
 8002874:	f005 fcc6 	bl	8008204 <malloc>
 8002878:	4603      	mov	r3, r0
 800287a:	613b      	str	r3, [r7, #16]
	char *c= (char *) malloc( 40 );//debug
 800287c:	2028      	movs	r0, #40	; 0x28
 800287e:	f005 fcc1 	bl	8008204 <malloc>
 8002882:	4603      	mov	r3, r0
 8002884:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		xSemaphoreTake( xMutex, portMAX_DELAY );
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <taskNrfRx+0xf0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 31ff 	mov.w	r1, #4294967295
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fd56 	bl	8006340 <xQueueSemaphoreTake>
		Nrf_rx_init(0x11223344AA);
 8002894:	a126      	add	r1, pc, #152	; (adr r1, 8002930 <taskNrfRx+0xe8>)
 8002896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800289a:	f7ff ffa7 	bl	80027ec <Nrf_rx_init>
		HAL_Delay(500);
 800289e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a2:	f000 fa37 	bl	8002d14 <HAL_Delay>
		if(NRF24_available())
 80028a6:	f7fe f939 	bl	8000b1c <NRF24_available>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d031      	beq.n	8002914 <taskNrfRx+0xcc>
		{
			NRF24_read(myRxData, 32);  // Réception du nrf
 80028b0:	2120      	movs	r1, #32
 80028b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028b4:	f7fe f93a 	bl	8000b2c <NRF24_read>
			strcpy(myRxData2,myRxData);
 80028b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ba:	6a38      	ldr	r0, [r7, #32]
 80028bc:	f005 fe5e 	bl	800857c <strcpy>
			val_crc = extractCrc(myRxData2); // Extraction du crc
 80028c0:	6a38      	ldr	r0, [r7, #32]
 80028c2:	f7ff fa6b 	bl	8001d9c <extractCrc>
 80028c6:	4603      	mov	r3, r0
 80028c8:	61bb      	str	r3, [r7, #24]
			extractData(myRxData); //extraction des données (myRxData est modifié)
 80028ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028cc:	f7ff fa84 	bl	8001dd8 <extractData>
			//val_crc_verif = Tx_Adding_CRC((uint32_t*)myRxData, strlen(myRxData)); // calcul du CRC
			sprintf(b,"%lu",val_crc); // debug
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	491a      	ldr	r1, [pc, #104]	; (800293c <taskNrfRx+0xf4>)
 80028d4:	6938      	ldr	r0, [r7, #16]
 80028d6:	f005 fddf 	bl	8008498 <siprintf>
			sprintf(c,"%lu",val_crc_verif); //debug
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4917      	ldr	r1, [pc, #92]	; (800293c <taskNrfRx+0xf4>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f005 fdda 	bl	8008498 <siprintf>
			}
			else
			{
				//HAL_UART_Transmit(&huart2, (uint8_t *)"CRC False\r\n", strlen("CRC False\r\n"), 10);
			}
			myRxData[32] = '\r';
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3380      	adds	r3, #128	; 0x80
 80028e8:	220d      	movs	r2, #13
 80028ea:	601a      	str	r2, [r3, #0]
			myRxData[32+1] = '\n';
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3384      	adds	r3, #132	; 0x84
 80028f0:	220a      	movs	r2, #10
 80028f2:	601a      	str	r2, [r3, #0]
			xQueueSend(simpleQueue3,(void*)myRxData,34); // envoie vers uart
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <taskNrfRx+0xf8>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	2222      	movs	r2, #34	; 0x22
 80028fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fe:	f003 fb41 	bl	8005f84 <xQueueGenericSend>
			//HAL_UART_Transmit(&huart2, (uint8_t *)b, strlen(b), 10);
			free(b);
 8002902:	6938      	ldr	r0, [r7, #16]
 8002904:	f005 fc86 	bl	8008214 <free>
			free(c);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f005 fc83 	bl	8008214 <free>
			free(myRxData);
 800290e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002910:	f005 fc80 	bl	8008214 <free>
		}
		xSemaphoreGive( xMutex );
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <taskNrfRx+0xf0>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	f003 fb31 	bl	8005f84 <xQueueGenericSend>
		vTaskDelay(Tickdelay);
 8002922:	69f8      	ldr	r0, [r7, #28]
 8002924:	f004 f8ea 	bl	8006afc <vTaskDelay>
		xSemaphoreTake( xMutex, portMAX_DELAY );
 8002928:	e7ad      	b.n	8002886 <taskNrfRx+0x3e>
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w
 8002930:	223344aa 	.word	0x223344aa
 8002934:	00000011 	.word	0x00000011
 8002938:	200043e8 	.word	0x200043e8
 800293c:	08009ccc 	.word	0x08009ccc
 8002940:	2000428c 	.word	0x2000428c
 8002944:	00000000 	.word	0x00000000

08002948 <taskNrfTx>:
	}
}

void taskNrfTx(void * argument)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	uint32_t Tickdelay = pdMS_TO_TICKS(500);
 8002950:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffTxaa[32] = "";
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	619a      	str	r2, [r3, #24]
	while(1)
	{
		xSemaphoreTake( xMutex, portMAX_DELAY );
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <taskNrfTx+0xa0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f04f 31ff 	mov.w	r1, #4294967295
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fce2 	bl	8006340 <xQueueSemaphoreTake>
		Nrf_tx_init(0x11223344AA);
 800297c:	a118      	add	r1, pc, #96	; (adr r1, 80029e0 <taskNrfTx+0x98>)
 800297e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002982:	f7ff ff47 	bl	8002814 <Nrf_tx_init>
		if (xQueueReceive(simpleQueue4, (void*)buffTxaa, 32) == pdTRUE) // réception depuis l'uart
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <taskNrfTx+0xa4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f107 010c 	add.w	r1, r7, #12
 800298e:	2220      	movs	r2, #32
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fbf5 	bl	8006180 <xQueueReceive>
		{
		}
		if(strlen(buffTxaa)>0){
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <taskNrfTx+0x80>
			Tx_Adding_CRC((uint8_t *)buffTxaa,strlen(buffTxaa)); // calcul du crc
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fc1b 	bl	80001e0 <strlen>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f9b4 	bl	8001d20 <Tx_Adding_CRC>
			if(NRF24_write(buffTxaa, 32)) // envoie vers le nrf
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	2120      	movs	r1, #32
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f860 	bl	8000a84 <NRF24_write>
			{
				//HAL_UART_Transmit(&huart2, (uint8_t *)buffTxaa, strlen(buffTxaa), 20);
			}
			strcpy(buffTxaa,"\0");
 80029c4:	2300      	movs	r3, #0
 80029c6:	733b      	strb	r3, [r7, #12]
		}
		xSemaphoreGive( xMutex );
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <taskNrfTx+0xa0>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	f003 fad7 	bl	8005f84 <xQueueGenericSend>
		vTaskDelay(Tickdelay);
 80029d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029d8:	f004 f890 	bl	8006afc <vTaskDelay>
		xSemaphoreTake( xMutex, portMAX_DELAY );
 80029dc:	e7c7      	b.n	800296e <taskNrfTx+0x26>
 80029de:	bf00      	nop
 80029e0:	223344aa 	.word	0x223344aa
 80029e4:	00000011 	.word	0x00000011
 80029e8:	200043e8 	.word	0x200043e8
 80029ec:	20004284 	.word	0x20004284

080029f0 <taskUartPc>:
	}
}

void taskUartPc(void* argument)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0a4      	sub	sp, #144	; 0x90
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	Ringbuf_init();
 80029f8:	f7fe ff58 	bl	80018ac <Ringbuf_init>
	uint32_t Tickdelay = pdMS_TO_TICKS(500);
 80029fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char buff_Rx[32];
	char buff_Rx2[32];
	while(1)
	{
		//fill the buffer
		while(IsDataAvailable(&huart2))
 8002a04:	e015      	b.n	8002a32 <taskUartPc+0x42>
		{
			char data = Uart_read(&huart2);
 8002a06:	4846      	ldr	r0, [pc, #280]	; (8002b20 <taskUartPc+0x130>)
 8002a08:	f7fe ffb8 	bl	800197c <Uart_read>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			sprintf(buff,"%c",data);
 8002a12:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8002a16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a1a:	4942      	ldr	r1, [pc, #264]	; (8002b24 <taskUartPc+0x134>)
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f005 fd3b 	bl	8008498 <siprintf>
			strcat(buffTx,buff);
 8002a22:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f005 fd96 	bl	800855e <strcat>
		while(IsDataAvailable(&huart2))
 8002a32:	483b      	ldr	r0, [pc, #236]	; (8002b20 <taskUartPc+0x130>)
 8002a34:	f7ff f85c 	bl	8001af0 <IsDataAvailable>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e3      	bne.n	8002a06 <taskUartPc+0x16>
		}

		//check buffer is empty and send it
		if(buffTx[0]!='\0'){
 8002a3e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <taskUartPc+0x7e>

			xQueueSend(simpleQueue,(void*)buffTx,32);
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <taskUartPc+0x138>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2220      	movs	r2, #32
 8002a52:	f003 fa97 	bl	8005f84 <xQueueGenericSend>
			xQueueSend(simpleQueue4,(void*)buffTx,32);
 8002a56:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <taskUartPc+0x13c>)
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2220      	movs	r2, #32
 8002a62:	f003 fa8f 	bl	8005f84 <xQueueGenericSend>
			vTaskDelay(Tickdelay);
 8002a66:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002a6a:	f004 f847 	bl	8006afc <vTaskDelay>
		}
		//reset buffer
		strcpy(buffTx,"\0");
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

		if (xQueueReceive(simpleQueue3, (void*)buff_Rx, 100) != pdTRUE)
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <taskUartPc+0x140>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a7c:	2264      	movs	r2, #100	; 0x64
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fb7e 	bl	8006180 <xQueueReceive>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d11a      	bne.n	8002ac0 <taskUartPc+0xd0>
		{
			//HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue2\n\n", 31, 1000);
		}
		else
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"from NRF: ", strlen("from NRF: "), 1000);
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	220a      	movs	r2, #10
 8002a90:	4928      	ldr	r1, [pc, #160]	; (8002b34 <taskUartPc+0x144>)
 8002a92:	4823      	ldr	r0, [pc, #140]	; (8002b20 <taskUartPc+0x130>)
 8002a94:	f002 f9b3 	bl	8004dfe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)buff_Rx, strlen(buff_Rx), 10);
 8002a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fb9f 	bl	80001e0 <strlen>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002aaa:	230a      	movs	r3, #10
 8002aac:	481c      	ldr	r0, [pc, #112]	; (8002b20 <taskUartPc+0x130>)
 8002aae:	f002 f9a6 	bl	8004dfe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\n", strlen("\n"), 1000);
 8002ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	491f      	ldr	r1, [pc, #124]	; (8002b38 <taskUartPc+0x148>)
 8002aba:	4819      	ldr	r0, [pc, #100]	; (8002b20 <taskUartPc+0x130>)
 8002abc:	f002 f99f 	bl	8004dfe <HAL_UART_Transmit>
		}

		if (xQueueReceive(simpleQueue2, (void*)buff_Rx2, 100) != pdTRUE)
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <taskUartPc+0x14c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f107 0108 	add.w	r1, r7, #8
 8002ac8:	2264      	movs	r2, #100	; 0x64
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 fb58 	bl	8006180 <xQueueReceive>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d11a      	bne.n	8002b0c <taskUartPc+0x11c>
		{
					//HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue2\n\n", 31, 1000);
		}
		else
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"from HC12: ", strlen("from HC12: "), 1000);
 8002ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ada:	220b      	movs	r2, #11
 8002adc:	4918      	ldr	r1, [pc, #96]	; (8002b40 <taskUartPc+0x150>)
 8002ade:	4810      	ldr	r0, [pc, #64]	; (8002b20 <taskUartPc+0x130>)
 8002ae0:	f002 f98d 	bl	8004dfe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)buff_Rx2, strlen(buff_Rx2), 10);
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fb79 	bl	80001e0 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f107 0108 	add.w	r1, r7, #8
 8002af6:	230a      	movs	r3, #10
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <taskUartPc+0x130>)
 8002afa:	f002 f980 	bl	8004dfe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\n", strlen("\n"), 1000);
 8002afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b02:	2201      	movs	r2, #1
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <taskUartPc+0x148>)
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <taskUartPc+0x130>)
 8002b08:	f002 f979 	bl	8004dfe <HAL_UART_Transmit>
//		{
//			HAL_UART_Transmit(&huart2, (uint8_t *)buff_Rx2, strlen(buff_Rx2), 10);
//		}


		strcpy(buff_Rx,"\0");
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		strcpy(buff_Rx2,"\0");
 8002b12:	2300      	movs	r3, #0
 8002b14:	723b      	strb	r3, [r7, #8]
		vTaskDelay(Tickdelay);
 8002b16:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002b1a:	f003 ffef 	bl	8006afc <vTaskDelay>
	{
 8002b1e:	e771      	b.n	8002a04 <taskUartPc+0x14>
 8002b20:	2000435c 	.word	0x2000435c
 8002b24:	08009cd0 	.word	0x08009cd0
 8002b28:	20004298 	.word	0x20004298
 8002b2c:	20004284 	.word	0x20004284
 8002b30:	2000428c 	.word	0x2000428c
 8002b34:	08009cd4 	.word	0x08009cd4
 8002b38:	08009ce0 	.word	0x08009ce0
 8002b3c:	200042a8 	.word	0x200042a8
 8002b40:	08009ce4 	.word	0x08009ce4

08002b44 <taskUartHc12>:
	}
}

void taskUartHc12(void* argument)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0ae      	sub	sp, #184	; 0xb8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	Ringbuf_init();
 8002b4c:	f7fe feae 	bl	80018ac <Ringbuf_init>
	uint32_t Tickdelay = pdMS_TO_TICKS(100);
 8002b50:	2364      	movs	r3, #100	; 0x64
 8002b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char buff[30];
	char buffTx[30]="";
 8002b56:	2300      	movs	r3, #0
 8002b58:	673b      	str	r3, [r7, #112]	; 0x70
 8002b5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	615a      	str	r2, [r3, #20]
 8002b6c:	831a      	strh	r2, [r3, #24]
	char buff_Rx[100];
	char data;
	while(1)
	{
		while(IsDataAvailable(&huart1))
 8002b6e:	e015      	b.n	8002b9c <taskUartHc12+0x58>
		{
			data = Uart_read(&huart1);
 8002b70:	482e      	ldr	r0, [pc, #184]	; (8002c2c <taskUartHc12+0xe8>)
 8002b72:	f7fe ff03 	bl	800197c <Uart_read>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			sprintf(buff,"%c",data);
 8002b7c:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8002b80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b84:	492a      	ldr	r1, [pc, #168]	; (8002c30 <taskUartHc12+0xec>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 fc86 	bl	8008498 <siprintf>
			strcat(buffTx,buff);
 8002b8c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 fce1 	bl	800855e <strcat>
		while(IsDataAvailable(&huart1))
 8002b9c:	4823      	ldr	r0, [pc, #140]	; (8002c2c <taskUartHc12+0xe8>)
 8002b9e:	f7fe ffa7 	bl	8001af0 <IsDataAvailable>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e3      	bne.n	8002b70 <taskUartHc12+0x2c>
		}
		//check buffer is empty and send it
		if(buffTx[0]!='\0')
 8002ba8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <taskUartHc12+0x84>
		{
			xQueueSend(simpleQueue2,(void*)buffTx,32);
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <taskUartHc12+0xf0>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f003 f9e2 	bl	8005f84 <xQueueGenericSend>
			vTaskDelay(Tickdelay);
 8002bc0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002bc4:	f003 ff9a 	bl	8006afc <vTaskDelay>
		}
		//reset buffer
		strcpy(buffTx,"\0");
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70


		if (xQueueReceive(simpleQueue, (void*)buff_Rx, 100) != pdTRUE)
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <taskUartHc12+0xf4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f107 010c 	add.w	r1, r7, #12
 8002bd6:	2264      	movs	r2, #100	; 0x64
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fad1 	bl	8006180 <xQueueReceive>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11c      	bne.n	8002c1e <taskUartHc12+0xda>
		{
			//HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue1\n\n", 31, 1000);
		}
		else
		{
			for(int i=0;i<strlen(buff_Rx);i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bea:	e00e      	b.n	8002c0a <taskUartHc12+0xc6>
			{
				Uart_write((char)buff_Rx[i], &huart1);
 8002bec:	f107 020c 	add.w	r2, r7, #12
 8002bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	490c      	ldr	r1, [pc, #48]	; (8002c2c <taskUartHc12+0xe8>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe ff14 	bl	8001a28 <Uart_write>
			for(int i=0;i<strlen(buff_Rx);i++)
 8002c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c04:	3301      	adds	r3, #1
 8002c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fae6 	bl	80001e0 <strlen>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d8e6      	bhi.n	8002bec <taskUartHc12+0xa8>
			}
		}

		strcpy(buff_Rx,"\0");
 8002c1e:	2300      	movs	r3, #0
 8002c20:	733b      	strb	r3, [r7, #12]
		vTaskDelay(Tickdelay);
 8002c22:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002c26:	f003 ff69 	bl	8006afc <vTaskDelay>
	{
 8002c2a:	e7a0      	b.n	8002b6e <taskUartHc12+0x2a>
 8002c2c:	200042bc 	.word	0x200042bc
 8002c30:	08009cd0 	.word	0x08009cd0
 8002c34:	200042a8 	.word	0x200042a8
 8002c38:	20004298 	.word	0x20004298

08002c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c40:	480d      	ldr	r0, [pc, #52]	; (8002c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c42:	490e      	ldr	r1, [pc, #56]	; (8002c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c44:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c58:	4c0b      	ldr	r4, [pc, #44]	; (8002c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c66:	f7ff fdaf 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f005 faa3 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6e:	f7ff f8c3 	bl	8001df8 <main>
  bx  lr    
 8002c72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c80:	08009f7c 	.word	0x08009f7c
  ldr r2, =_sbss
 8002c84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c88:	20004400 	.word	0x20004400

08002c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <HAL_Init+0x40>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_Init+0x40>)
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_Init+0x40>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 f8fc 	bl	8002eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cbe:	200f      	movs	r0, #15
 8002cc0:	f7ff fc2a 	bl	8002518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc4:	f7ff fb06 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	200043ec 	.word	0x200043ec

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200043ec 	.word	0x200043ec

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff ffee 	bl	8002cfc <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff4c 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ede:	f7ff ff61 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f7ff ffb1 	bl	8002e50 <NVIC_EncodePriority>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff80 	bl	8002dfc <__NVIC_SetPriority>
}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff54 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00e      	b.n	8002f50 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff f9f2 	bl	800232c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e00a      	b.n	8002f9a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3f0      	bcc.n	8002f84 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002fb0:	693b      	ldr	r3, [r7, #16]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fe96 	bl	8002cfc <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d008      	beq.n	8002ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e052      	b.n	8003096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0216 	bic.w	r2, r2, #22
 8002ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <HAL_DMA_Abort+0x62>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0208 	bic.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e013      	b.n	800306a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fe5b 	bl	8002cfc <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d90c      	bls.n	800306a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e015      	b.n	8003096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e4      	bne.n	8003042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00c      	b.n	80030d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2205      	movs	r2, #5
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e159      	b.n	80033b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 8148 	bne.w	80033ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a2 	beq.w	80033ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a56      	ldr	r2, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b54      	ldr	r3, [pc, #336]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_Init+0x2ec>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_GPIO_Init+0x2f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x202>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_GPIO_Init+0x2f4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x1fe>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_GPIO_Init+0x2f8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x1fa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a46      	ldr	r2, [pc, #280]	; (80033e0 <HAL_GPIO_Init+0x2fc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x1f6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <HAL_GPIO_Init+0x300>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x1f2>
 80032d2:	2304      	movs	r3, #4
 80032d4:	e008      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032da:	2303      	movs	r3, #3
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032e6:	2300      	movs	r3, #0
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f002 0203 	and.w	r2, r2, #3
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	4093      	lsls	r3, r2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <HAL_GPIO_Init+0x2ec>)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <HAL_GPIO_Init+0x304>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003354:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_GPIO_Init+0x304>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a8:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <HAL_GPIO_Init+0x304>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	f67f aea2 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003408:	e003      	b.n	8003412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e264      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d075      	beq.n	800352a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343e:	4ba3      	ldr	r3, [pc, #652]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d00c      	beq.n	8003464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344a:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003452:	2b08      	cmp	r3, #8
 8003454:	d112      	bne.n	800347c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003456:	4b9d      	ldr	r3, [pc, #628]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003462:	d10b      	bne.n	800347c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	4b99      	ldr	r3, [pc, #612]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05b      	beq.n	8003528 <HAL_RCC_OscConfig+0x108>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d157      	bne.n	8003528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e23f      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d106      	bne.n	8003494 <HAL_RCC_OscConfig+0x74>
 8003486:	4b91      	ldr	r3, [pc, #580]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a90      	ldr	r2, [pc, #576]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01d      	b.n	80034d0 <HAL_RCC_OscConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x98>
 800349e:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a8a      	ldr	r2, [pc, #552]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a87      	ldr	r2, [pc, #540]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0xb0>
 80034b8:	4b84      	ldr	r3, [pc, #528]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a83      	ldr	r2, [pc, #524]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a80      	ldr	r2, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff fc10 	bl	8002cfc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7ff fc0c 	bl	8002cfc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e204      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0xc0>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7ff fbfc 	bl	8002cfc <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff fbf8 	bl	8002cfc <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1f0      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0xe8>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003536:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003542:	4b62      	ldr	r3, [pc, #392]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d11c      	bne.n	8003588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d116      	bne.n	8003588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_RCC_OscConfig+0x152>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1c4      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4952      	ldr	r1, [pc, #328]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	e03a      	b.n	80035fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCC_OscConfig+0x2b0>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7ff fbb1 	bl	8002cfc <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359e:	f7ff fbad 	bl	8002cfc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1a5      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	4b46      	ldr	r3, [pc, #280]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4940      	ldr	r1, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	e015      	b.n	80035fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_RCC_OscConfig+0x2b0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7ff fb90 	bl	8002cfc <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e0:	f7ff fb8c 	bl	8002cfc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e184      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d030      	beq.n	800366c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x2b4>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7ff fb70 	bl	8002cfc <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003620:	f7ff fb6c 	bl	8002cfc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e164      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x200>
 800363e:	e015      	b.n	800366c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x2b4>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7ff fb59 	bl	8002cfc <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364e:	f7ff fb55 	bl	8002cfc <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e14d      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a0 	beq.w	80037ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d121      	bne.n	80036fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7ff fb1b 	bl	8002cfc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	e011      	b.n	80036ee <HAL_RCC_OscConfig+0x2ce>
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470000 	.word	0x42470000
 80036d4:	42470e80 	.word	0x42470e80
 80036d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7ff fb0e 	bl	8002cfc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e106      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x4e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0x2f0>
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a80      	ldr	r2, [pc, #512]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e01c      	b.n	800374a <HAL_RCC_OscConfig+0x32a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x312>
 8003718:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a7a      	ldr	r2, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x32a>
 8003732:	4b75      	ldr	r3, [pc, #468]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a74      	ldr	r2, [pc, #464]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	4b72      	ldr	r3, [pc, #456]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a71      	ldr	r2, [pc, #452]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7ff fad3 	bl	8002cfc <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7ff facf 	bl	8002cfc <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0c5      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b65      	ldr	r3, [pc, #404]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCC_OscConfig+0x33a>
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7ff fabd 	bl	8002cfc <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7ff fab9 	bl	8002cfc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0af      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4b5a      	ldr	r3, [pc, #360]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a55      	ldr	r2, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 809b 	beq.w	80038fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d05c      	beq.n	800388a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d141      	bne.n	800385c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff fa8d 	bl	8002cfc <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7ff fa89 	bl	8002cfc <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e081      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	4937      	ldr	r1, [pc, #220]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7ff fa62 	bl	8002cfc <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7ff fa5e 	bl	8002cfc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e056      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x41c>
 800385a:	e04e      	b.n	80038fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7ff fa4b 	bl	8002cfc <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7ff fa47 	bl	8002cfc <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e03f      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0x44a>
 8003888:	e037      	b.n	80038fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e032      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d028      	beq.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d11a      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c6:	4013      	ands	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40007000 	.word	0x40007000
 8003908:	40023800 	.word	0x40023800
 800390c:	42470060 	.word	0x42470060

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0cc      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d90c      	bls.n	800394c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e067      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4934      	ldr	r1, [pc, #208]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7ff f97c 	bl	8002cfc <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7ff f978 	bl	8002cfc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d20c      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	5ccb      	ldrb	r3, [r1, r3]
 8003aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fd2e 	bl	8002518 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	08009d08 	.word	0x08009d08
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6079      	str	r1, [r7, #4]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	60f9      	str	r1, [r7, #12]
 8003aea:	2100      	movs	r1, #0
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aee:	2100      	movs	r1, #0
 8003af0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af2:	4952      	ldr	r1, [pc, #328]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003af4:	6889      	ldr	r1, [r1, #8]
 8003af6:	f001 010c 	and.w	r1, r1, #12
 8003afa:	2908      	cmp	r1, #8
 8003afc:	d00d      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3e>
 8003afe:	2908      	cmp	r1, #8
 8003b00:	f200 8094 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x150>
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x32>
 8003b08:	2904      	cmp	r1, #4
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x38>
 8003b0c:	e08e      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0e:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b10:	60bb      	str	r3, [r7, #8]
       break;
 8003b12:	e08e      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b14:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b16:	60bb      	str	r3, [r7, #8]
      break;
 8003b18:	e08b      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b1a:	4948      	ldr	r1, [pc, #288]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b1c:	6849      	ldr	r1, [r1, #4]
 8003b1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b24:	4945      	ldr	r1, [pc, #276]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b26:	6849      	ldr	r1, [r1, #4]
 8003b28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d024      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4942      	ldr	r1, [pc, #264]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b32:	6849      	ldr	r1, [r1, #4]
 8003b34:	0989      	lsrs	r1, r1, #6
 8003b36:	4608      	mov	r0, r1
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b40:	f04f 0500 	mov.w	r5, #0
 8003b44:	ea00 0204 	and.w	r2, r0, r4
 8003b48:	ea01 0305 	and.w	r3, r1, r5
 8003b4c:	493d      	ldr	r1, [pc, #244]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b4e:	fb01 f003 	mul.w	r0, r1, r3
 8003b52:	2100      	movs	r1, #0
 8003b54:	fb01 f102 	mul.w	r1, r1, r2
 8003b58:	1844      	adds	r4, r0, r1
 8003b5a:	493a      	ldr	r1, [pc, #232]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b5c:	fba2 0101 	umull	r0, r1, r2, r1
 8003b60:	1863      	adds	r3, r4, r1
 8003b62:	4619      	mov	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f7fc fb90 	bl	8000290 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e04a      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	461a      	mov	r2, r3
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	ea02 0400 	and.w	r4, r2, r0
 8003b92:	ea03 0501 	and.w	r5, r3, r1
 8003b96:	4620      	mov	r0, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	014b      	lsls	r3, r1, #5
 8003ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ba8:	0142      	lsls	r2, r0, #5
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	1b00      	subs	r0, r0, r4
 8003bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	018b      	lsls	r3, r1, #6
 8003bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bc2:	0182      	lsls	r2, r0, #6
 8003bc4:	1a12      	subs	r2, r2, r0
 8003bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd8:	00d0      	lsls	r0, r2, #3
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	1912      	adds	r2, r2, r4
 8003be0:	eb45 0303 	adc.w	r3, r5, r3
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	0299      	lsls	r1, r3, #10
 8003bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bf2:	0290      	lsls	r0, r2, #10
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f7fc fb44 	bl	8000290 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	60bb      	str	r3, [r7, #8]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c2e:	60bb      	str	r3, [r7, #8]
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	68bb      	ldr	r3, [r7, #8]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	017d7840 	.word	0x017d7840

08003c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff0 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a9b      	lsrs	r3, r3, #10
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08009d18 	.word	0x08009d18

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffdc 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0b5b      	lsrs	r3, r3, #13
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	08009d18 	.word	0x08009d18

08003cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <HAL_RCC_GetClockConfig+0x60>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0207 	and.w	r2, r3, #7
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07b      	b.n	8003e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d009      	beq.n	8003d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe fb02 	bl	8002370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0104 	and.w	r1, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0210 	and.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Transmit+0x22>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e126      	b.n	8004096 <HAL_SPI_Transmit+0x270>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e50:	f7fe ff54 	bl	8002cfc <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e6a:	e10b      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x52>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7c:	e102      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d007      	beq.n	8003f04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d14b      	bne.n	8003fa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Transmit+0xf6>
 8003f16:	8afb      	ldrh	r3, [r7, #22]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d13e      	bne.n	8003f9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f40:	e02b      	b.n	8003f9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d112      	bne.n	8003f76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f74:	e011      	b.n	8003f9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f76:	f7fe fec1 	bl	8002cfc <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d803      	bhi.n	8003f8e <HAL_SPI_Transmit+0x168>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Transmit+0x16e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f98:	e074      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ce      	bne.n	8003f42 <HAL_SPI_Transmit+0x11c>
 8003fa4:	e04c      	b.n	8004040 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0x18e>
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d140      	bne.n	8004036 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fda:	e02c      	b.n	8004036 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d113      	bne.n	8004012 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004010:	e011      	b.n	8004036 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004012:	f7fe fe73 	bl	8002cfc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d803      	bhi.n	800402a <HAL_SPI_Transmit+0x204>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d102      	bne.n	8004030 <HAL_SPI_Transmit+0x20a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004034:	e026      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1cd      	bne.n	8003fdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fbcb 	bl	80047e0 <SPI_EndRxTxTransaction>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e000      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004094:	7ffb      	ldrb	r3, [r7, #31]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b088      	sub	sp, #32
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ba:	d112      	bne.n	80040e2 <HAL_SPI_Receive+0x44>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2204      	movs	r2, #4
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8f1 	bl	80042c0 <HAL_SPI_TransmitReceive>
 80040de:	4603      	mov	r3, r0
 80040e0:	e0ea      	b.n	80042b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_Receive+0x52>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0e3      	b.n	80042b8 <HAL_SPI_Receive+0x21a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f8:	f7fe fe00 	bl	8002cfc <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800410e:	e0ca      	b.n	80042a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_SPI_Receive+0x7e>
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004120:	e0c1      	b.n	80042a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2204      	movs	r2, #4
 8004126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d10f      	bne.n	800418a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d007      	beq.n	80041a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d162      	bne.n	8004276 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041b0:	e02e      	b.n	8004210 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d115      	bne.n	80041ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f103 020c 	add.w	r2, r3, #12
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ea:	e011      	b.n	8004210 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ec:	f7fe fd86 	bl	8002cfc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d803      	bhi.n	8004204 <HAL_SPI_Receive+0x166>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d102      	bne.n	800420a <HAL_SPI_Receive+0x16c>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800420e:	e04a      	b.n	80042a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1cb      	bne.n	80041b2 <HAL_SPI_Receive+0x114>
 800421a:	e031      	b.n	8004280 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d113      	bne.n	8004252 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	b292      	uxth	r2, r2
 8004236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004250:	e011      	b.n	8004276 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004252:	f7fe fd53 	bl	8002cfc <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d803      	bhi.n	800426a <HAL_SPI_Receive+0x1cc>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d102      	bne.n	8004270 <HAL_SPI_Receive+0x1d2>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004274:	e017      	b.n	80042a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cd      	bne.n	800421c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa45 	bl	8004714 <SPI_EndRxTransaction>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
 80042a2:	e000      	b.n	80042a6 <HAL_SPI_Receive+0x208>
  }

error :
 80042a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x26>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e18a      	b.n	80045fc <HAL_SPI_TransmitReceive+0x33c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ee:	f7fe fd05 	bl	8002cfc <HAL_GetTick>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800430c:	2b01      	cmp	r3, #1
 800430e:	d00f      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x70>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d107      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x68>
 8004320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004324:	2b04      	cmp	r3, #4
 8004326:	d003      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004328:	2302      	movs	r3, #2
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800432e:	e15b      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x82>
 800433c:	887b      	ldrh	r3, [r7, #2]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004348:	e14e      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b04      	cmp	r3, #4
 8004354:	d003      	beq.n	800435e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2205      	movs	r2, #5
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d007      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	d178      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x10a>
 80043c4:	8b7b      	ldrh	r3, [r7, #26]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d166      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ee:	e053      	b.n	8004498 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d11b      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x176>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d016      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x176>
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d113      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d119      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x1b8>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d014      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	b292      	uxth	r2, r2
 800445a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004478:	f7fe fc40 	bl	8002cfc <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004484:	429a      	cmp	r2, r3
 8004486:	d807      	bhi.n	8004498 <HAL_SPI_TransmitReceive+0x1d8>
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d003      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004496:	e0a7      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1a6      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x130>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1a1      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x130>
 80044ac:	e07c      	b.n	80045a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x1fc>
 80044b6:	8b7b      	ldrh	r3, [r7, #26]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d16b      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e2:	e057      	b.n	8004594 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d11c      	bne.n	800452c <HAL_SPI_TransmitReceive+0x26c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_SPI_TransmitReceive+0x26c>
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d114      	bne.n	800452c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d119      	bne.n	800456e <HAL_SPI_TransmitReceive+0x2ae>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d014      	beq.n	800456e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800456a:	2301      	movs	r3, #1
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800456e:	f7fe fbc5 	bl	8002cfc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457a:	429a      	cmp	r2, r3
 800457c:	d803      	bhi.n	8004586 <HAL_SPI_TransmitReceive+0x2c6>
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d102      	bne.n	800458c <HAL_SPI_TransmitReceive+0x2cc>
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004592:	e029      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1a2      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x224>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d19d      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f917 	bl	80047e0 <SPI_EndRxTxTransaction>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045c4:	e010      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	e000      	b.n	80045e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3730      	adds	r7, #48	; 0x30
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004614:	f7fe fb72 	bl	8002cfc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	4413      	add	r3, r2
 8004622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004624:	f7fe fb6a 	bl	8002cfc <HAL_GetTick>
 8004628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800462a:	4b39      	ldr	r3, [pc, #228]	; (8004710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	0d1b      	lsrs	r3, r3, #20
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800463a:	e054      	b.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d050      	beq.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004644:	f7fe fb5a 	bl	8002cfc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	429a      	cmp	r2, r3
 8004652:	d902      	bls.n	800465a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d13d      	bne.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d111      	bne.n	8004698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467c:	d004      	beq.n	8004688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d107      	bne.n	8004698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a0:	d10f      	bne.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e017      	b.n	8004706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d19b      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000000 	.word	0x20000000

08004714 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004728:	d111      	bne.n	800474e <SPI_EndRxTransaction+0x3a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d004      	beq.n	800473e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d107      	bne.n	800474e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d12a      	bne.n	80047ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d012      	beq.n	8004788 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff ff49 	bl	8004604 <SPI_WaitFlagStateUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e026      	b.n	80047d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	2101      	movs	r1, #1
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff ff36 	bl	8004604 <SPI_WaitFlagStateUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01a      	beq.n	80047d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e013      	b.n	80047d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2101      	movs	r1, #1
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff ff23 	bl	8004604 <SPI_WaitFlagStateUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f043 0220 	orr.w	r2, r3, #32
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e000      	b.n	80047d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <SPI_EndRxTxTransaction+0x7c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <SPI_EndRxTxTransaction+0x80>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0d5b      	lsrs	r3, r3, #21
 80047f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480a:	d112      	bne.n	8004832 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2200      	movs	r2, #0
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff fef4 	bl	8004604 <SPI_WaitFlagStateUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3b01      	subs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d0f2      	beq.n	8004832 <SPI_EndRxTxTransaction+0x52>
 800484c:	e000      	b.n	8004850 <SPI_EndRxTxTransaction+0x70>
        break;
 800484e:	bf00      	nop
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000000 	.word	0x20000000
 8004860:	165e9f81 	.word	0x165e9f81

08004864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e041      	b.n	80048fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f839 	bl	8004902 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 f9ca 	bl	8004c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e044      	b.n	80049ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x6c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495a:	d013      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x6c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x6c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x6c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x6c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d111      	bne.n	80049a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b06      	cmp	r3, #6
 8004994:	d010      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	e007      	b.n	80049b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40014000 	.word	0x40014000

080049dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0202 	mvn.w	r2, #2
 8004a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8ee 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8e0 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8f1 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0204 	mvn.w	r2, #4
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8c4 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8b6 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8c7 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0208 	mvn.w	r2, #8
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f89a 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f88c 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f89d 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0210 	mvn.w	r2, #16
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f870 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f862 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f873 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0201 	mvn.w	r2, #1
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd fba2 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b80      	cmp	r3, #128	; 0x80
 8004b6c:	d10e      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8e2 	bl	8004d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f838 	bl	8004c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0220 	mvn.w	r2, #32
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8ac 	bl	8004d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <TIM_Base_SetConfig+0xe4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00f      	beq.n	8004c74 <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d00b      	beq.n	8004c74 <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <TIM_Base_SetConfig+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d007      	beq.n	8004c74 <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a30      	ldr	r2, [pc, #192]	; (8004d28 <TIM_Base_SetConfig+0xec>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0xf0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d108      	bne.n	8004c86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <TIM_Base_SetConfig+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01b      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c94:	d017      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <TIM_Base_SetConfig+0xe8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <TIM_Base_SetConfig+0xec>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <TIM_Base_SetConfig+0xf0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <TIM_Base_SetConfig+0xf4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <TIM_Base_SetConfig+0xf8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <TIM_Base_SetConfig+0xfc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <TIM_Base_SetConfig+0xe4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	615a      	str	r2, [r3, #20]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e03f      	b.n	8004df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fb38 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd7b 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08a      	sub	sp, #40	; 0x28
 8004e02:	af02      	add	r7, sp, #8
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d17c      	bne.n	8004f18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_UART_Transmit+0x2c>
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e075      	b.n	8004f1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Transmit+0x3e>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e06e      	b.n	8004f1a <HAL_UART_Transmit+0x11c>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2221      	movs	r2, #33	; 0x21
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e52:	f7fd ff53 	bl	8002cfc <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6c:	d108      	bne.n	8004e80 <HAL_UART_Transmit+0x82>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e003      	b.n	8004e88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e90:	e02a      	b.n	8004ee8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 faf9 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e007      	b.n	8004eda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1cf      	bne.n	8004e92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fac9 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b0ba      	sub	sp, #232	; 0xe8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x66>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fbd3 	bl	800572e <UART_Receive_IT>
      return;
 8004f88:	e256      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80de 	beq.w	8005150 <HAL_UART_IRQHandler+0x22c>
 8004f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80d1 	beq.w	8005150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xae>
 8004fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xd2>
 8004fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xf6>
 8005002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f043 0204 	orr.w	r2, r3, #4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d011      	beq.n	800504a <HAL_UART_IRQHandler+0x126>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 81ed 	beq.w	800542e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_UART_IRQHandler+0x14e>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb5e 	bl	800572e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <HAL_UART_IRQHandler+0x17a>
 8005096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04f      	beq.n	800513e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa66 	bl	8005570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d141      	bne.n	8005136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4a7d      	ldr	r2, [pc, #500]	; (8005300 <HAL_UART_IRQHandler+0x3dc>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd ffc3 	bl	800309e <HAL_DMA_Abort_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e00e      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f99a 	bl	8005468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00a      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f996 	bl	8005468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e006      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f992 	bl	8005468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800514a:	e170      	b.n	800542e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	bf00      	nop
    return;
 800514e:	e16e      	b.n	800542e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	f040 814a 	bne.w	80053ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8143 	beq.w	80053ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 813c 	beq.w	80053ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	f040 80b4 	bne.w	8005304 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8140 	beq.w	8005432 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f080 8139 	bcs.w	8005432 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	f000 8088 	beq.w	80052e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800520e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800521a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800524a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800524e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e1      	bne.n	8005222 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e3      	bne.n	800525e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd fe6c 	bl	8002fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8c0 	bl	800547c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052fc:	e099      	b.n	8005432 <HAL_UART_IRQHandler+0x50e>
 80052fe:	bf00      	nop
 8005300:	08005637 	.word	0x08005637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 808b 	beq.w	8005436 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8086 	beq.w	8005436 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800534e:	647a      	str	r2, [r7, #68]	; 0x44
 8005350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	623b      	str	r3, [r7, #32]
   return(result);
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005386:	633a      	str	r2, [r7, #48]	; 0x30
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e3      	bne.n	8005362 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0310 	bic.w	r3, r3, #16
 80053be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e3      	bne.n	80053a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f848 	bl	800547c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ec:	e023      	b.n	8005436 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_UART_IRQHandler+0x4ea>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f929 	bl	800565e <UART_Transmit_IT>
    return;
 800540c:	e014      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <HAL_UART_IRQHandler+0x514>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f969 	bl	80056fe <UART_EndTransmit_IT>
    return;
 800542c:	e004      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
    return;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
      return;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
      return;
 8005436:	bf00      	nop
  }
}
 8005438:	37e8      	adds	r7, #232	; 0xe8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b090      	sub	sp, #64	; 0x40
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a4:	e050      	b.n	8005548 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d04c      	beq.n	8005548 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054b4:	f7fd fc22 	bl	8002cfc <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d241      	bcs.n	8005548 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054e4:	637a      	str	r2, [r7, #52]	; 0x34
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	613b      	str	r3, [r7, #16]
   return(result);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3314      	adds	r3, #20
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	623a      	str	r2, [r7, #32]
 800551a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	69f9      	ldr	r1, [r7, #28]
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	61bb      	str	r3, [r7, #24]
   return(result);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e5      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e00f      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4013      	ands	r3, r2
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	429a      	cmp	r2, r3
 8005564:	d09f      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3740      	adds	r7, #64	; 0x40
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b095      	sub	sp, #84	; 0x54
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005598:	643a      	str	r2, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d119      	bne.n	800561c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005608:	61ba      	str	r2, [r7, #24]
 800560a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	613b      	str	r3, [r7, #16]
   return(result);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800562a:	bf00      	nop
 800562c:	3754      	adds	r7, #84	; 0x54
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff ff09 	bl	8005468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b21      	cmp	r3, #33	; 0x21
 8005670:	d13e      	bne.n	80056f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d114      	bne.n	80056a6 <UART_Transmit_IT+0x48>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d110      	bne.n	80056a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	1c9a      	adds	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]
 80056a4:	e008      	b.n	80056b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6211      	str	r1, [r2, #32]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4619      	mov	r1, r3
 80056c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10f      	bne.n	80056ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fe8e 	bl	8005440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08c      	sub	sp, #48	; 0x30
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b22      	cmp	r3, #34	; 0x22
 8005740:	f040 80ab 	bne.w	800589a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d117      	bne.n	800577e <UART_Receive_IT+0x50>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d113      	bne.n	800577e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	b29a      	uxth	r2, r3
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	1c9a      	adds	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
 800577c:	e026      	b.n	80057cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d007      	beq.n	80057a2 <UART_Receive_IT+0x74>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <UART_Receive_IT+0x82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e008      	b.n	80057c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4619      	mov	r1, r3
 80057da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d15a      	bne.n	8005896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0220 	bic.w	r2, r2, #32
 80057ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d135      	bne.n	800588c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	613b      	str	r3, [r7, #16]
   return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	623a      	str	r2, [r7, #32]
 8005848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	61bb      	str	r3, [r7, #24]
   return(result);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b10      	cmp	r3, #16
 8005866:	d10a      	bne.n	800587e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fdf9 	bl	800547c <HAL_UARTEx_RxEventCallback>
 800588a:	e002      	b.n	8005892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fde1 	bl	8005454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e002      	b.n	800589c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3730      	adds	r7, #48	; 0x30
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	b09f      	sub	sp, #124	; 0x7c
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	ea40 0301 	orr.w	r3, r0, r1
 80058c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4313      	orrs	r3, r2
 80058dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e8:	f021 010c 	bic.w	r1, r1, #12
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f2:	430b      	orrs	r3, r1
 80058f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	ea40 0301 	orr.w	r3, r0, r1
 800590c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4bc5      	ldr	r3, [pc, #788]	; (8005c28 <UART_SetConfig+0x384>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d004      	beq.n	8005922 <UART_SetConfig+0x7e>
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4bc3      	ldr	r3, [pc, #780]	; (8005c2c <UART_SetConfig+0x388>)
 800591e:	429a      	cmp	r2, r3
 8005920:	d103      	bne.n	800592a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005922:	f7fe f9b1 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8005926:	6778      	str	r0, [r7, #116]	; 0x74
 8005928:	e002      	b.n	8005930 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800592a:	f7fe f999 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 800592e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005938:	f040 80b6 	bne.w	8005aa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800593c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593e:	461c      	mov	r4, r3
 8005940:	f04f 0500 	mov.w	r5, #0
 8005944:	4622      	mov	r2, r4
 8005946:	462b      	mov	r3, r5
 8005948:	1891      	adds	r1, r2, r2
 800594a:	6439      	str	r1, [r7, #64]	; 0x40
 800594c:	415b      	adcs	r3, r3
 800594e:	647b      	str	r3, [r7, #68]	; 0x44
 8005950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005954:	1912      	adds	r2, r2, r4
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f04f 0000 	mov.w	r0, #0
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	00d9      	lsls	r1, r3, #3
 8005964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005968:	00d0      	lsls	r0, r2, #3
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	1911      	adds	r1, r2, r4
 8005970:	6639      	str	r1, [r7, #96]	; 0x60
 8005972:	416b      	adcs	r3, r5
 8005974:	667b      	str	r3, [r7, #100]	; 0x64
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	461a      	mov	r2, r3
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	1891      	adds	r1, r2, r2
 8005982:	63b9      	str	r1, [r7, #56]	; 0x38
 8005984:	415b      	adcs	r3, r3
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800598c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005990:	f7fa fc7e 	bl	8000290 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4ba5      	ldr	r3, [pc, #660]	; (8005c30 <UART_SetConfig+0x38c>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011e      	lsls	r6, r3, #4
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	461c      	mov	r4, r3
 80059a6:	f04f 0500 	mov.w	r5, #0
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	1891      	adds	r1, r2, r2
 80059b0:	6339      	str	r1, [r7, #48]	; 0x30
 80059b2:	415b      	adcs	r3, r3
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
 80059b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059ba:	1912      	adds	r2, r2, r4
 80059bc:	eb45 0303 	adc.w	r3, r5, r3
 80059c0:	f04f 0000 	mov.w	r0, #0
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	00d9      	lsls	r1, r3, #3
 80059ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ce:	00d0      	lsls	r0, r2, #3
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	1911      	adds	r1, r2, r4
 80059d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80059d8:	416b      	adcs	r3, r5
 80059da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80059ea:	415b      	adcs	r3, r3
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059f6:	f7fa fc4b 	bl	8000290 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a87      	ldr	r2, [pc, #540]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a20:	441e      	add	r6, r3
 8005a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a24:	4618      	mov	r0, r3
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	1894      	adds	r4, r2, r2
 8005a30:	623c      	str	r4, [r7, #32]
 8005a32:	415b      	adcs	r3, r3
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
 8005a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a3a:	1812      	adds	r2, r2, r0
 8005a3c:	eb41 0303 	adc.w	r3, r1, r3
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	00dd      	lsls	r5, r3, #3
 8005a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a4e:	00d4      	lsls	r4, r2, #3
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	1814      	adds	r4, r2, r0
 8005a56:	653c      	str	r4, [r7, #80]	; 0x50
 8005a58:	414b      	adcs	r3, r1
 8005a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	1891      	adds	r1, r2, r2
 8005a68:	61b9      	str	r1, [r7, #24]
 8005a6a:	415b      	adcs	r3, r3
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a76:	f7fa fc0b 	bl	8000290 <__aeabi_uldivmod>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a80:	fba3 1302 	umull	r1, r3, r3, r2
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	2164      	movs	r1, #100	; 0x64
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	3332      	adds	r3, #50	; 0x32
 8005a92:	4a67      	ldr	r2, [pc, #412]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	f003 0207 	and.w	r2, r3, #7
 8005a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4432      	add	r2, r6
 8005aa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aa6:	e0b9      	b.n	8005c1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aaa:	461c      	mov	r4, r3
 8005aac:	f04f 0500 	mov.w	r5, #0
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	1891      	adds	r1, r2, r2
 8005ab6:	6139      	str	r1, [r7, #16]
 8005ab8:	415b      	adcs	r3, r3
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ac0:	1912      	adds	r2, r2, r4
 8005ac2:	eb45 0303 	adc.w	r3, r5, r3
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	00d9      	lsls	r1, r3, #3
 8005ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad4:	00d0      	lsls	r0, r2, #3
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	eb12 0804 	adds.w	r8, r2, r4
 8005ade:	eb43 0905 	adc.w	r9, r3, r5
 8005ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	008b      	lsls	r3, r1, #2
 8005af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005afa:	0082      	lsls	r2, r0, #2
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa fbc6 	bl	8000290 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	011e      	lsls	r6, r3, #4
 8005b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b14:	4618      	mov	r0, r3
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	1894      	adds	r4, r2, r2
 8005b20:	60bc      	str	r4, [r7, #8]
 8005b22:	415b      	adcs	r3, r3
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b2a:	1812      	adds	r2, r2, r0
 8005b2c:	eb41 0303 	adc.w	r3, r1, r3
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	f04f 0500 	mov.w	r5, #0
 8005b38:	00dd      	lsls	r5, r3, #3
 8005b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b3e:	00d4      	lsls	r4, r2, #3
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	1814      	adds	r4, r2, r0
 8005b46:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b48:	414b      	adcs	r3, r1
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b64:	0082      	lsls	r2, r0, #2
 8005b66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b6a:	f7fa fb91 	bl	8000290 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b74:	fba3 1302 	umull	r1, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2164      	movs	r1, #100	; 0x64
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	3332      	adds	r3, #50	; 0x32
 8005b86:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b92:	441e      	add	r6, r3
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	4618      	mov	r0, r3
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	1894      	adds	r4, r2, r2
 8005ba2:	603c      	str	r4, [r7, #0]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bac:	1812      	adds	r2, r2, r0
 8005bae:	eb41 0303 	adc.w	r3, r1, r3
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	f04f 0500 	mov.w	r5, #0
 8005bba:	00dd      	lsls	r5, r3, #3
 8005bbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bc0:	00d4      	lsls	r4, r2, #3
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	eb12 0a00 	adds.w	sl, r2, r0
 8005bca:	eb43 0b01 	adc.w	fp, r3, r1
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005be6:	0082      	lsls	r2, r0, #2
 8005be8:	4650      	mov	r0, sl
 8005bea:	4659      	mov	r1, fp
 8005bec:	f7fa fb50 	bl	8000290 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <UART_SetConfig+0x38c>)
 8005bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2164      	movs	r1, #100	; 0x64
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	; 0x32
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <UART_SetConfig+0x38c>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4432      	add	r2, r6
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	377c      	adds	r7, #124	; 0x7c
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	40011000 	.word	0x40011000
 8005c2c:	40011400 	.word	0x40011400
 8005c30:	51eb851f 	.word	0x51eb851f

08005c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 0208 	add.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f103 0208 	add.w	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0208 	add.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d103      	bne.n	8005cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e00c      	b.n	8005d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e002      	b.n	8005d04 <vListInsert+0x2e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d2f6      	bcs.n	8005cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6852      	ldr	r2, [r2, #4]
 8005d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d103      	bne.n	8005d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	1e5a      	subs	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dc6:	f001 fe2d 	bl	8007a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	3b01      	subs	r3, #1
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	22ff      	movs	r2, #255	; 0xff
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d114      	bne.n	8005e46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3310      	adds	r3, #16
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 f8ed 	bl	8007008 <xTaskRemoveFromEventList>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <xQueueGenericReset+0xcc>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	e009      	b.n	8005e5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fef2 	bl	8005c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3324      	adds	r3, #36	; 0x24
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff feed 	bl	8005c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e5a:	f001 fe13 	bl	8007a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e5e:	2301      	movs	r3, #1
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3348      	adds	r3, #72	; 0x48
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fe9f 	bl	8007be8 <pvPortMalloc>
 8005eaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3348      	adds	r3, #72	; 0x48
 8005eba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec4:	79fa      	ldrb	r2, [r7, #7]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f805 	bl	8005ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f0e:	2101      	movs	r1, #1
 8005f10:	69b8      	ldr	r0, [r7, #24]
 8005f12:	f7ff ff43 	bl	8005d9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2200      	movs	r2, #0
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f81d 	bl	8005f84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	461a      	mov	r2, r3
 8005f68:	6939      	ldr	r1, [r7, #16]
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff7e 	bl	8005e6c <xQueueGenericCreate>
 8005f70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff ffd3 	bl	8005f1e <prvInitialiseMutex>

		return xNewQueue;
 8005f78:	68fb      	ldr	r3, [r7, #12]
	}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericSend+0x32>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <xQueueGenericSend+0x40>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <xQueueGenericSend+0x44>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <xQueueGenericSend+0x46>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <xQueueGenericSend+0x60>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSend+0x6e>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <xQueueGenericSend+0x72>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueGenericSend+0x74>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xQueueGenericSend+0x8e>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006012:	f001 f9b9 	bl	8007388 <xTaskGetSchedulerState>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <xQueueGenericSend+0x9e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <xQueueGenericSend+0xa2>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <xQueueGenericSend+0xa4>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueGenericSend+0xbe>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	61fb      	str	r3, [r7, #28]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006042:	f001 fcef 	bl	8007a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <xQueueGenericSend+0xd4>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d129      	bne.n	80060ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f000 fa93 	bl	8006588 <prvCopyDataToQueue>
 8006062:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	3324      	adds	r3, #36	; 0x24
 8006070:	4618      	mov	r0, r3
 8006072:	f000 ffc9 	bl	8007008 <xTaskRemoveFromEventList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d013      	beq.n	80060a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b3f      	ldr	r3, [pc, #252]	; (800617c <xQueueGenericSend+0x1f8>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	e00a      	b.n	80060a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006094:	4b39      	ldr	r3, [pc, #228]	; (800617c <xQueueGenericSend+0x1f8>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060a4:	f001 fcee 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e063      	b.n	8006174 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060b2:	f001 fce7 	bl	8007a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e05c      	b.n	8006174 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f801 	bl	80070cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ce:	f001 fcd9 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060d2:	f000 fdb1 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060d6:	f001 fca5 	bl	8007a24 <vPortEnterCritical>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e0:	b25b      	sxtb	r3, r3
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d103      	bne.n	80060f0 <xQueueGenericSend+0x16c>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <xQueueGenericSend+0x182>
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006106:	f001 fcbd 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800610a:	1d3a      	adds	r2, r7, #4
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fff0 	bl	80070f8 <xTaskCheckForTimeOut>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d124      	bne.n	8006168 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800611e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006120:	f000 fb2a 	bl	8006778 <prvIsQueueFull>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	3310      	adds	r3, #16
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff44 	bl	8006fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800613a:	f000 fab5 	bl	80066a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800613e:	f000 fd89 	bl	8006c54 <xTaskResumeAll>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f af7c 	bne.w	8006042 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <xQueueGenericSend+0x1f8>)
 800614c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	e772      	b.n	8006042 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800615c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800615e:	f000 faa3 	bl	80066a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006162:	f000 fd77 	bl	8006c54 <xTaskResumeAll>
 8006166:	e76c      	b.n	8006042 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800616a:	f000 fa9d 	bl	80066a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800616e:	f000 fd71 	bl	8006c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006174:	4618      	mov	r0, r3
 8006176:	3738      	adds	r7, #56	; 0x38
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xQueueReceive+0x30>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	623b      	str	r3, [r7, #32]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <xQueueReceive+0x3e>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x42>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x44>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueReceive+0x5e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061de:	f001 f8d3 	bl	8007388 <xTaskGetSchedulerState>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <xQueueReceive+0x6e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueReceive+0x72>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueReceive+0x74>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueReceive+0x8e>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61bb      	str	r3, [r7, #24]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620e:	f001 fc09 	bl	8007a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01f      	beq.n	800625e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 fa1b 	bl	800665c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1e5a      	subs	r2, r3, #1
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	3310      	adds	r3, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fee4 	bl	8007008 <xTaskRemoveFromEventList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006246:	4b3d      	ldr	r3, [pc, #244]	; (800633c <xQueueReceive+0x1bc>)
 8006248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006256:	f001 fc15 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 800625a:	2301      	movs	r3, #1
 800625c:	e069      	b.n	8006332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006264:	f001 fc0e 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006268:	2300      	movs	r3, #0
 800626a:	e062      	b.n	8006332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006272:	f107 0310 	add.w	r3, r7, #16
 8006276:	4618      	mov	r0, r3
 8006278:	f000 ff28 	bl	80070cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006280:	f001 fc00 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006284:	f000 fcd8 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006288:	f001 fbcc 	bl	8007a24 <vPortEnterCritical>
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006292:	b25b      	sxtb	r3, r3
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d103      	bne.n	80062a2 <xQueueReceive+0x122>
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <xQueueReceive+0x138>
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b8:	f001 fbe4 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062bc:	1d3a      	adds	r2, r7, #4
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 ff17 	bl	80070f8 <xTaskCheckForTimeOut>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d123      	bne.n	8006318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d2:	f000 fa3b 	bl	800674c <prvIsQueueEmpty>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	3324      	adds	r3, #36	; 0x24
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fe6b 	bl	8006fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ec:	f000 f9dc 	bl	80066a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f0:	f000 fcb0 	bl	8006c54 <xTaskResumeAll>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d189      	bne.n	800620e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <xQueueReceive+0x1bc>)
 80062fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	e780      	b.n	800620e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800630c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630e:	f000 f9cb 	bl	80066a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006312:	f000 fc9f 	bl	8006c54 <xTaskResumeAll>
 8006316:	e77a      	b.n	800620e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631a:	f000 f9c5 	bl	80066a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800631e:	f000 fc99 	bl	8006c54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006324:	f000 fa12 	bl	800674c <prvIsQueueEmpty>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f43f af6f 	beq.w	800620e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	; 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	623b      	str	r3, [r7, #32]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	61fb      	str	r3, [r7, #28]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006390:	f000 fffa 	bl	8007388 <xTaskGetSchedulerState>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <xQueueSemaphoreTake+0x60>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xQueueSemaphoreTake+0x64>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <xQueueSemaphoreTake+0x66>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	61bb      	str	r3, [r7, #24]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063c0:	f001 fb30 	bl	8007a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d024      	beq.n	800641a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	1e5a      	subs	r2, r3, #1
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063e0:	f001 f97a 	bl	80076d8 <pvTaskIncrementMutexHeldCount>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	3310      	adds	r3, #16
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fe06 	bl	8007008 <xTaskRemoveFromEventList>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006402:	4b54      	ldr	r3, [pc, #336]	; (8006554 <xQueueSemaphoreTake+0x214>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006412:	f001 fb37 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 8006416:	2301      	movs	r3, #1
 8006418:	e097      	b.n	800654a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d111      	bne.n	8006444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	617b      	str	r3, [r7, #20]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800643c:	f001 fb22 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006440:	2300      	movs	r3, #0
 8006442:	e082      	b.n	800654a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fe3c 	bl	80070cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006458:	f001 fb14 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800645c:	f000 fbec 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006460:	f001 fae0 	bl	8007a24 <vPortEnterCritical>
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d103      	bne.n	800647a <xQueueSemaphoreTake+0x13a>
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006480:	b25b      	sxtb	r3, r3
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d103      	bne.n	8006490 <xQueueSemaphoreTake+0x150>
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006490:	f001 faf8 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006494:	463a      	mov	r2, r7
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fe2b 	bl	80070f8 <xTaskCheckForTimeOut>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d132      	bne.n	800650e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064aa:	f000 f94f 	bl	800674c <prvIsQueueEmpty>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d026      	beq.n	8006502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064bc:	f001 fab2 	bl	8007a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 ff7d 	bl	80073c4 <xTaskPriorityInherit>
 80064ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064cc:	f001 fada 	bl	8007a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	3324      	adds	r3, #36	; 0x24
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fd71 	bl	8006fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e0:	f000 f8e2 	bl	80066a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064e4:	f000 fbb6 	bl	8006c54 <xTaskResumeAll>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f47f af68 	bne.w	80063c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064f0:	4b18      	ldr	r3, [pc, #96]	; (8006554 <xQueueSemaphoreTake+0x214>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	e75e      	b.n	80063c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006504:	f000 f8d0 	bl	80066a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006508:	f000 fba4 	bl	8006c54 <xTaskResumeAll>
 800650c:	e758      	b.n	80063c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800650e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006510:	f000 f8ca 	bl	80066a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006514:	f000 fb9e 	bl	8006c54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651a:	f000 f917 	bl	800674c <prvIsQueueEmpty>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	f43f af4d 	beq.w	80063c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800652c:	f001 fa7a 	bl	8007a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006532:	f000 f811 	bl	8006558 <prvGetDisinheritPriorityAfterTimeout>
 8006536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f83c 	bl	80075bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006544:	f001 fa9e 	bl	8007a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800654a:	4618      	mov	r0, r3
 800654c:	3738      	adds	r7, #56	; 0x38
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1c3 0307 	rsb	r3, r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e001      	b.n	800657a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800657a:	68fb      	ldr	r3, [r7, #12]
	}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10d      	bne.n	80065c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d14d      	bne.n	800664a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 ff7c 	bl	80074b0 <xTaskPriorityDisinherit>
 80065b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	e043      	b.n	800664a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d119      	bne.n	80065fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6858      	ldr	r0, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	461a      	mov	r2, r3
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	f001 fe26 	bl	8008224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d32b      	bcc.n	800664a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	605a      	str	r2, [r3, #4]
 80065fa:	e026      	b.n	800664a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68d8      	ldr	r0, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	461a      	mov	r2, r3
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	f001 fe0c 	bl	8008224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	425b      	negs	r3, r3
 8006616:	441a      	add	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d207      	bcs.n	8006638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	425b      	negs	r3, r3
 8006632:	441a      	add	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d105      	bne.n	800664a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	3b01      	subs	r3, #1
 8006648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	441a      	add	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	429a      	cmp	r2, r3
 8006686:	d303      	bcc.n	8006690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68d9      	ldr	r1, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	461a      	mov	r2, r3
 800669a:	6838      	ldr	r0, [r7, #0]
 800669c:	f001 fdc2 	bl	8008224 <memcpy>
	}
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066b0:	f001 f9b8 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066bc:	e011      	b.n	80066e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3324      	adds	r3, #36	; 0x24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fc9c 	bl	8007008 <xTaskRemoveFromEventList>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066d6:	f000 fd71 	bl	80071bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	3b01      	subs	r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dce9      	bgt.n	80066be <prvUnlockQueue+0x16>
 80066ea:	e000      	b.n	80066ee <prvUnlockQueue+0x46>
					break;
 80066ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 f9c5 	bl	8007a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066fa:	f001 f993 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006706:	e011      	b.n	800672c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fc77 	bl	8007008 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006720:	f000 fd4c 	bl	80071bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	3b01      	subs	r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800672c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dce9      	bgt.n	8006708 <prvUnlockQueue+0x60>
 8006734:	e000      	b.n	8006738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006740:	f001 f9a0 	bl	8007a84 <vPortExitCritical>
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006754:	f001 f966 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e001      	b.n	800676a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800676a:	f001 f98b 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006780:	f001 f950 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	429a      	cmp	r2, r3
 800678e:	d102      	bne.n	8006796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e001      	b.n	800679a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800679a:	f001 f973 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08e      	sub	sp, #56	; 0x38
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xTaskCreateStatic+0x46>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067ee:	23b4      	movs	r3, #180	; 0xb4
 80067f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2bb4      	cmp	r3, #180	; 0xb4
 80067f6:	d00a      	beq.n	800680e <xTaskCreateStatic+0x66>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800680e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <xTaskCreateStatic+0xac>
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006824:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2202      	movs	r2, #2
 800682a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800682e:	2300      	movs	r3, #0
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f850 	bl	80068ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800684c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684e:	f000 f8eb 	bl	8006a28 <prvAddNewTaskToReadyList>
 8006852:	e001      	b.n	8006858 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006858:	697b      	ldr	r3, [r7, #20]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	3728      	adds	r7, #40	; 0x28
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006862:	b580      	push	{r7, lr}
 8006864:	b08c      	sub	sp, #48	; 0x30
 8006866:	af04      	add	r7, sp, #16
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	4613      	mov	r3, r2
 8006870:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f9b6 	bl	8007be8 <pvPortMalloc>
 800687c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00e      	beq.n	80068a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006884:	20b4      	movs	r0, #180	; 0xb4
 8006886:	f001 f9af 	bl	8007be8 <pvPortMalloc>
 800688a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
 8006898:	e005      	b.n	80068a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800689a:	6978      	ldr	r0, [r7, #20]
 800689c:	f001 fa70 	bl	8007d80 <vPortFree>
 80068a0:	e001      	b.n	80068a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d017      	beq.n	80068dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9303      	str	r3, [sp, #12]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	9302      	str	r3, [sp, #8]
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f80e 	bl	80068ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068d0:	69f8      	ldr	r0, [r7, #28]
 80068d2:	f000 f8a9 	bl	8006a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068d6:	2301      	movs	r3, #1
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e002      	b.n	80068e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068e2:	69bb      	ldr	r3, [r7, #24]
	}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006904:	3b01      	subs	r3, #1
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f023 0307 	bic.w	r3, r3, #7
 8006912:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <prvInitialiseNewTask+0x48>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	617b      	str	r3, [r7, #20]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01f      	beq.n	800697a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	e012      	b.n	8006966 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	7819      	ldrb	r1, [r3, #0]
 8006948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	3334      	adds	r3, #52	; 0x34
 8006950:	460a      	mov	r2, r1
 8006952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	3301      	adds	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	2b0f      	cmp	r3, #15
 800696a:	d9e9      	bls.n	8006940 <prvInitialiseNewTask+0x54>
 800696c:	e000      	b.n	8006970 <prvInitialiseNewTask+0x84>
			{
				break;
 800696e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006978:	e003      	b.n	8006982 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	2b06      	cmp	r3, #6
 8006986:	d901      	bls.n	800698c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006988:	2306      	movs	r3, #6
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006996:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	2200      	movs	r2, #0
 800699c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff f966 	bl	8005c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f961 	bl	8005c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f1c3 0207 	rsb	r2, r3, #7
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	334c      	adds	r3, #76	; 0x4c
 80069dc:	2260      	movs	r2, #96	; 0x60
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fc2d 	bl	8008240 <memset>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <prvInitialiseNewTask+0x130>)
 80069ea:	651a      	str	r2, [r3, #80]	; 0x50
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <prvInitialiseNewTask+0x134>)
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <prvInitialiseNewTask+0x138>)
 80069f6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	69b8      	ldr	r0, [r7, #24]
 80069fe:	f000 fee5 	bl	80077cc <pxPortInitialiseStack>
 8006a02:	4602      	mov	r2, r0
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a14:	bf00      	nop
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08009d40 	.word	0x08009d40
 8006a20:	08009d60 	.word	0x08009d60
 8006a24:	08009d20 	.word	0x08009d20

08006a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a30:	f000 fff8 	bl	8007a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a34:	4b2a      	ldr	r3, [pc, #168]	; (8006ae0 <prvAddNewTaskToReadyList+0xb8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a29      	ldr	r2, [pc, #164]	; (8006ae0 <prvAddNewTaskToReadyList+0xb8>)
 8006a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a3e:	4b29      	ldr	r3, [pc, #164]	; (8006ae4 <prvAddNewTaskToReadyList+0xbc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a46:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <prvAddNewTaskToReadyList+0xbc>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a4c:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <prvAddNewTaskToReadyList+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d110      	bne.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a54:	f000 fbd6 	bl	8007204 <prvInitialiseTaskLists>
 8006a58:	e00d      	b.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a5a:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <prvAddNewTaskToReadyList+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a62:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d802      	bhi.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a70:	4a1c      	ldr	r2, [pc, #112]	; (8006ae4 <prvAddNewTaskToReadyList+0xbc>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <prvAddNewTaskToReadyList+0xc4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <prvAddNewTaskToReadyList+0xc4>)
 8006a7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <prvAddNewTaskToReadyList+0xcc>)
 8006aa0:	441a      	add	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7ff f8f0 	bl	8005c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006aae:	f000 ffe9 	bl	8007a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <prvAddNewTaskToReadyList+0xc0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvAddNewTaskToReadyList+0xbc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d207      	bcs.n	8006ad8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <prvAddNewTaskToReadyList+0xd0>)
 8006aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000624 	.word	0x20000624
 8006ae4:	20000524 	.word	0x20000524
 8006ae8:	20000630 	.word	0x20000630
 8006aec:	20000640 	.word	0x20000640
 8006af0:	2000062c 	.word	0x2000062c
 8006af4:	20000528 	.word	0x20000528
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <vTaskDelay+0x60>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <vTaskDelay+0x30>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b2c:	f000 f884 	bl	8006c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b30:	2100      	movs	r1, #0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fde4 	bl	8007700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b38:	f000 f88c 	bl	8006c54 <xTaskResumeAll>
 8006b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <vTaskDelay+0x64>)
 8006b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	2000064c 	.word	0x2000064c
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b72:	463a      	mov	r2, r7
 8006b74:	1d39      	adds	r1, r7, #4
 8006b76:	f107 0308 	add.w	r3, r7, #8
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fb f892 	bl	8001ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	9202      	str	r2, [sp, #8]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	460a      	mov	r2, r1
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <vTaskStartScheduler+0xb4>)
 8006b94:	4821      	ldr	r0, [pc, #132]	; (8006c1c <vTaskStartScheduler+0xb8>)
 8006b96:	f7ff fe07 	bl	80067a8 <xTaskCreateStatic>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4a20      	ldr	r2, [pc, #128]	; (8006c20 <vTaskStartScheduler+0xbc>)
 8006b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ba0:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <vTaskStartScheduler+0xbc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e001      	b.n	8006bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d11b      	bne.n	8006bf0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	613b      	str	r3, [r7, #16]
}
 8006bca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <vTaskStartScheduler+0xc0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	334c      	adds	r3, #76	; 0x4c
 8006bd2:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <vTaskStartScheduler+0xc4>)
 8006bd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bd6:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <vTaskStartScheduler+0xc8>)
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <vTaskStartScheduler+0xcc>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006be4:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <vTaskStartScheduler+0xd0>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bea:	f000 fe79 	bl	80078e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bee:	e00e      	b.n	8006c0e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d10a      	bne.n	8006c0e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60fb      	str	r3, [r7, #12]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <vTaskStartScheduler+0xa8>
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	08009cf0 	.word	0x08009cf0
 8006c1c:	080071d5 	.word	0x080071d5
 8006c20:	20000648 	.word	0x20000648
 8006c24:	20000524 	.word	0x20000524
 8006c28:	20000010 	.word	0x20000010
 8006c2c:	20000644 	.word	0x20000644
 8006c30:	20000630 	.word	0x20000630
 8006c34:	20000628 	.word	0x20000628

08006c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c3c:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <vTaskSuspendAll+0x18>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a03      	ldr	r2, [pc, #12]	; (8006c50 <vTaskSuspendAll+0x18>)
 8006c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	2000064c 	.word	0x2000064c

08006c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <xTaskResumeAll+0x114>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	603b      	str	r3, [r7, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c80:	f000 fed0 	bl	8007a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c84:	4b38      	ldr	r3, [pc, #224]	; (8006d68 <xTaskResumeAll+0x114>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4a37      	ldr	r2, [pc, #220]	; (8006d68 <xTaskResumeAll+0x114>)
 8006c8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8e:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <xTaskResumeAll+0x114>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d161      	bne.n	8006d5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c96:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <xTaskResumeAll+0x118>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d05d      	beq.n	8006d5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c9e:	e02e      	b.n	8006cfe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca0:	4b33      	ldr	r3, [pc, #204]	; (8006d70 <xTaskResumeAll+0x11c>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3318      	adds	r3, #24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff f84b 	bl	8005d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff f846 	bl	8005d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <xTaskResumeAll+0x120>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <xTaskResumeAll+0x120>)
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <xTaskResumeAll+0x124>)
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fe ffd2 	bl	8005c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <xTaskResumeAll+0x128>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <xTaskResumeAll+0x12c>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <xTaskResumeAll+0x11c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1cc      	bne.n	8006ca0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d0c:	f000 fb1c 	bl	8007348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <xTaskResumeAll+0x130>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d010      	beq.n	8006d3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d1c:	f000 f836 	bl	8006d8c <xTaskIncrementTick>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d26:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <xTaskResumeAll+0x12c>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f1      	bne.n	8006d1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d38:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <xTaskResumeAll+0x130>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <xTaskResumeAll+0x12c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d46:	2301      	movs	r3, #1
 8006d48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <xTaskResumeAll+0x134>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d5a:	f000 fe93 	bl	8007a84 <vPortExitCritical>

	return xAlreadyYielded;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	2000064c 	.word	0x2000064c
 8006d6c:	20000624 	.word	0x20000624
 8006d70:	200005e4 	.word	0x200005e4
 8006d74:	2000062c 	.word	0x2000062c
 8006d78:	20000528 	.word	0x20000528
 8006d7c:	20000524 	.word	0x20000524
 8006d80:	20000638 	.word	0x20000638
 8006d84:	20000634 	.word	0x20000634
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d96:	4b4e      	ldr	r3, [pc, #312]	; (8006ed0 <xTaskIncrementTick+0x144>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 808e 	bne.w	8006ebc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006da0:	4b4c      	ldr	r3, [pc, #304]	; (8006ed4 <xTaskIncrementTick+0x148>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006da8:	4a4a      	ldr	r2, [pc, #296]	; (8006ed4 <xTaskIncrementTick+0x148>)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d120      	bne.n	8006df6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006db4:	4b48      	ldr	r3, [pc, #288]	; (8006ed8 <xTaskIncrementTick+0x14c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	603b      	str	r3, [r7, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xTaskIncrementTick+0x46>
 8006dd4:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <xTaskIncrementTick+0x14c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	4b40      	ldr	r3, [pc, #256]	; (8006edc <xTaskIncrementTick+0x150>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a3e      	ldr	r2, [pc, #248]	; (8006ed8 <xTaskIncrementTick+0x14c>)
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	4a3e      	ldr	r2, [pc, #248]	; (8006edc <xTaskIncrementTick+0x150>)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <xTaskIncrementTick+0x154>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	4a3c      	ldr	r2, [pc, #240]	; (8006ee0 <xTaskIncrementTick+0x154>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	f000 faa9 	bl	8007348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006df6:	4b3b      	ldr	r3, [pc, #236]	; (8006ee4 <xTaskIncrementTick+0x158>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d348      	bcc.n	8006e92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e00:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <xTaskIncrementTick+0x14c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <xTaskIncrementTick+0x158>)
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	601a      	str	r2, [r3, #0]
					break;
 8006e12:	e03e      	b.n	8006e92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <xTaskIncrementTick+0x14c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d203      	bcs.n	8006e34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <xTaskIncrementTick+0x158>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e32:	e02e      	b.n	8006e92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe ff85 	bl	8005d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3318      	adds	r3, #24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe ff7c 	bl	8005d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	2201      	movs	r2, #1
 8006e56:	409a      	lsls	r2, r3
 8006e58:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <xTaskIncrementTick+0x15c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <xTaskIncrementTick+0x15c>)
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	; (8006eec <xTaskIncrementTick+0x160>)
 8006e70:	441a      	add	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fe ff08 	bl	8005c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <xTaskIncrementTick+0x164>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d3b9      	bcc.n	8006e00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e90:	e7b6      	b.n	8006e00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e92:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <xTaskIncrementTick+0x164>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	4914      	ldr	r1, [pc, #80]	; (8006eec <xTaskIncrementTick+0x160>)
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d901      	bls.n	8006eae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <xTaskIncrementTick+0x168>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	e004      	b.n	8006ec6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <xTaskIncrementTick+0x16c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4a0d      	ldr	r2, [pc, #52]	; (8006ef8 <xTaskIncrementTick+0x16c>)
 8006ec4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ec6:	697b      	ldr	r3, [r7, #20]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000064c 	.word	0x2000064c
 8006ed4:	20000628 	.word	0x20000628
 8006ed8:	200005dc 	.word	0x200005dc
 8006edc:	200005e0 	.word	0x200005e0
 8006ee0:	2000063c 	.word	0x2000063c
 8006ee4:	20000644 	.word	0x20000644
 8006ee8:	2000062c 	.word	0x2000062c
 8006eec:	20000528 	.word	0x20000528
 8006ef0:	20000524 	.word	0x20000524
 8006ef4:	20000638 	.word	0x20000638
 8006ef8:	20000634 	.word	0x20000634

08006efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f02:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <vTaskSwitchContext+0xac>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f0a:	4b28      	ldr	r3, [pc, #160]	; (8006fac <vTaskSwitchContext+0xb0>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f10:	e044      	b.n	8006f9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <vTaskSwitchContext+0xb0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <vTaskSwitchContext+0xb4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	fab3 f383 	clz	r3, r3
 8006f24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	f1c3 031f 	rsb	r3, r3, #31
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	4921      	ldr	r1, [pc, #132]	; (8006fb4 <vTaskSwitchContext+0xb8>)
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	607b      	str	r3, [r7, #4]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vTaskSwitchContext+0x5a>
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a14      	ldr	r2, [pc, #80]	; (8006fb4 <vTaskSwitchContext+0xb8>)
 8006f64:	4413      	add	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d104      	bne.n	8006f88 <vTaskSwitchContext+0x8c>
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <vTaskSwitchContext+0xbc>)
 8006f90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <vTaskSwitchContext+0xbc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	334c      	adds	r3, #76	; 0x4c
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <vTaskSwitchContext+0xc0>)
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	2000064c 	.word	0x2000064c
 8006fac:	20000638 	.word	0x20000638
 8006fb0:	2000062c 	.word	0x2000062c
 8006fb4:	20000528 	.word	0x20000528
 8006fb8:	20000524 	.word	0x20000524
 8006fbc:	20000010 	.word	0x20000010

08006fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <vTaskPlaceOnEventList+0x44>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3318      	adds	r3, #24
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fe fe71 	bl	8005cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6838      	ldr	r0, [r7, #0]
 8006ff8:	f000 fb82 	bl	8007700 <prvAddCurrentTaskToDelayedList>
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000524 	.word	0x20000524

08007008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3318      	adds	r3, #24
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fe85 	bl	8005d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703e:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <xTaskRemoveFromEventList+0xac>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d11c      	bne.n	8007080 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3304      	adds	r3, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fe7c 	bl	8005d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	409a      	lsls	r2, r3
 8007058:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <xTaskRemoveFromEventList+0xb0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <xTaskRemoveFromEventList+0xb0>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a13      	ldr	r2, [pc, #76]	; (80070bc <xTaskRemoveFromEventList+0xb4>)
 8007070:	441a      	add	r2, r3
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7fe fe08 	bl	8005c8e <vListInsertEnd>
 800707e:	e005      	b.n	800708c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3318      	adds	r3, #24
 8007084:	4619      	mov	r1, r3
 8007086:	480e      	ldr	r0, [pc, #56]	; (80070c0 <xTaskRemoveFromEventList+0xb8>)
 8007088:	f7fe fe01 	bl	8005c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <xTaskRemoveFromEventList+0xbc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d905      	bls.n	80070a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800709a:	2301      	movs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800709e:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <xTaskRemoveFromEventList+0xc0>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e001      	b.n	80070aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070aa:	697b      	ldr	r3, [r7, #20]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	2000064c 	.word	0x2000064c
 80070b8:	2000062c 	.word	0x2000062c
 80070bc:	20000528 	.word	0x20000528
 80070c0:	200005e4 	.word	0x200005e4
 80070c4:	20000524 	.word	0x20000524
 80070c8:	20000638 	.word	0x20000638

080070cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <vTaskInternalSetTimeOutState+0x24>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <vTaskInternalSetTimeOutState+0x28>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	2000063c 	.word	0x2000063c
 80070f4:	20000628 	.word	0x20000628

080070f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	613b      	str	r3, [r7, #16]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	60fb      	str	r3, [r7, #12]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800713a:	f000 fc73 	bl	8007a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800713e:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <xTaskCheckForTimeOut+0xbc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d102      	bne.n	800715e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
 800715c:	e023      	b.n	80071a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <xTaskCheckForTimeOut+0xc0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d007      	beq.n	800717a <xTaskCheckForTimeOut+0x82>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	429a      	cmp	r2, r3
 8007172:	d302      	bcc.n	800717a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e015      	b.n	80071a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	429a      	cmp	r2, r3
 8007182:	d20b      	bcs.n	800719c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ff9b 	bl	80070cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	e004      	b.n	80071a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071a6:	f000 fc6d 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 80071aa:	69fb      	ldr	r3, [r7, #28]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3720      	adds	r7, #32
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000628 	.word	0x20000628
 80071b8:	2000063c 	.word	0x2000063c

080071bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071c0:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <vTaskMissedYield+0x14>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000638 	.word	0x20000638

080071d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071dc:	f000 f852 	bl	8007284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvIdleTask+0x28>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d9f9      	bls.n	80071dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <prvIdleTask+0x2c>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071f8:	e7f0      	b.n	80071dc <prvIdleTask+0x8>
 80071fa:	bf00      	nop
 80071fc:	20000528 	.word	0x20000528
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
 800720e:	e00c      	b.n	800722a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a12      	ldr	r2, [pc, #72]	; (8007264 <prvInitialiseTaskLists+0x60>)
 800721c:	4413      	add	r3, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fd08 	bl	8005c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3301      	adds	r3, #1
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b06      	cmp	r3, #6
 800722e:	d9ef      	bls.n	8007210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007230:	480d      	ldr	r0, [pc, #52]	; (8007268 <prvInitialiseTaskLists+0x64>)
 8007232:	f7fe fcff 	bl	8005c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007236:	480d      	ldr	r0, [pc, #52]	; (800726c <prvInitialiseTaskLists+0x68>)
 8007238:	f7fe fcfc 	bl	8005c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800723c:	480c      	ldr	r0, [pc, #48]	; (8007270 <prvInitialiseTaskLists+0x6c>)
 800723e:	f7fe fcf9 	bl	8005c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007242:	480c      	ldr	r0, [pc, #48]	; (8007274 <prvInitialiseTaskLists+0x70>)
 8007244:	f7fe fcf6 	bl	8005c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007248:	480b      	ldr	r0, [pc, #44]	; (8007278 <prvInitialiseTaskLists+0x74>)
 800724a:	f7fe fcf3 	bl	8005c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <prvInitialiseTaskLists+0x78>)
 8007250:	4a05      	ldr	r2, [pc, #20]	; (8007268 <prvInitialiseTaskLists+0x64>)
 8007252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <prvInitialiseTaskLists+0x7c>)
 8007256:	4a05      	ldr	r2, [pc, #20]	; (800726c <prvInitialiseTaskLists+0x68>)
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000528 	.word	0x20000528
 8007268:	200005b4 	.word	0x200005b4
 800726c:	200005c8 	.word	0x200005c8
 8007270:	200005e4 	.word	0x200005e4
 8007274:	200005f8 	.word	0x200005f8
 8007278:	20000610 	.word	0x20000610
 800727c:	200005dc 	.word	0x200005dc
 8007280:	200005e0 	.word	0x200005e0

08007284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728a:	e019      	b.n	80072c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800728c:	f000 fbca 	bl	8007a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <prvCheckTasksWaitingTermination+0x50>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe fd53 	bl	8005d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <prvCheckTasksWaitingTermination+0x54>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4a0b      	ldr	r2, [pc, #44]	; (80072d8 <prvCheckTasksWaitingTermination+0x54>)
 80072aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <prvCheckTasksWaitingTermination+0x58>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <prvCheckTasksWaitingTermination+0x58>)
 80072b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072b6:	f000 fbe5 	bl	8007a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f810 	bl	80072e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <prvCheckTasksWaitingTermination+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e1      	bne.n	800728c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200005f8 	.word	0x200005f8
 80072d8:	20000624 	.word	0x20000624
 80072dc:	2000060c 	.word	0x2000060c

080072e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	334c      	adds	r3, #76	; 0x4c
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 f867 	bl	80083c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fd3d 	bl	8007d80 <vPortFree>
				vPortFree( pxTCB );
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fd3a 	bl	8007d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800730c:	e018      	b.n	8007340 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d103      	bne.n	8007320 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fd31 	bl	8007d80 <vPortFree>
	}
 800731e:	e00f      	b.n	8007340 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007326:	2b02      	cmp	r3, #2
 8007328:	d00a      	beq.n	8007340 <prvDeleteTCB+0x60>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60fb      	str	r3, [r7, #12]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <prvDeleteTCB+0x5e>
	}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <prvResetNextTaskUnblockTime+0x38>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <prvResetNextTaskUnblockTime+0x3c>)
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007360:	e008      	b.n	8007374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <prvResetNextTaskUnblockTime+0x38>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4a04      	ldr	r2, [pc, #16]	; (8007384 <prvResetNextTaskUnblockTime+0x3c>)
 8007372:	6013      	str	r3, [r2, #0]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	200005dc 	.word	0x200005dc
 8007384:	20000644 	.word	0x20000644

08007388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <xTaskGetSchedulerState+0x34>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007396:	2301      	movs	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
 800739a:	e008      	b.n	80073ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800739c:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <xTaskGetSchedulerState+0x38>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073a4:	2302      	movs	r3, #2
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e001      	b.n	80073ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ae:	687b      	ldr	r3, [r7, #4]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000630 	.word	0x20000630
 80073c0:	2000064c 	.word	0x2000064c

080073c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d05e      	beq.n	8007498 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <xTaskPriorityInherit+0xe0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d24e      	bcs.n	8007486 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	db06      	blt.n	80073fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f0:	4b2c      	ldr	r3, [pc, #176]	; (80074a4 <xTaskPriorityInherit+0xe0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f1c3 0207 	rsb	r2, r3, #7
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6959      	ldr	r1, [r3, #20]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <xTaskPriorityInherit+0xe4>)
 8007410:	4413      	add	r3, r2
 8007412:	4299      	cmp	r1, r3
 8007414:	d12f      	bne.n	8007476 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fc94 	bl	8005d48 <uxListRemove>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	2201      	movs	r2, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	43da      	mvns	r2, r3
 8007432:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <xTaskPriorityInherit+0xe8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4013      	ands	r3, r2
 8007438:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <xTaskPriorityInherit+0xe8>)
 800743a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800743c:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <xTaskPriorityInherit+0xe0>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	2201      	movs	r2, #1
 800744c:	409a      	lsls	r2, r3
 800744e:	4b17      	ldr	r3, [pc, #92]	; (80074ac <xTaskPriorityInherit+0xe8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	4a15      	ldr	r2, [pc, #84]	; (80074ac <xTaskPriorityInherit+0xe8>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <xTaskPriorityInherit+0xe4>)
 8007466:	441a      	add	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe fc0d 	bl	8005c8e <vListInsertEnd>
 8007474:	e004      	b.n	8007480 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <xTaskPriorityInherit+0xe0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e008      	b.n	8007498 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <xTaskPriorityInherit+0xe0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	429a      	cmp	r2, r3
 8007492:	d201      	bcs.n	8007498 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007498:	68fb      	ldr	r3, [r7, #12]
	}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000524 	.word	0x20000524
 80074a8:	20000528 	.word	0x20000528
 80074ac:	2000062c 	.word	0x2000062c

080074b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d06e      	beq.n	80075a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074c6:	4b3a      	ldr	r3, [pc, #232]	; (80075b0 <xTaskPriorityDisinherit+0x100>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d00a      	beq.n	80074e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60bb      	str	r3, [r7, #8]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007508:	1e5a      	subs	r2, r3, #1
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	429a      	cmp	r2, r3
 8007518:	d044      	beq.n	80075a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	2b00      	cmp	r3, #0
 8007520:	d140      	bne.n	80075a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fc0e 	bl	8005d48 <uxListRemove>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d115      	bne.n	800755e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	491f      	ldr	r1, [pc, #124]	; (80075b4 <xTaskPriorityDisinherit+0x104>)
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <xTaskPriorityDisinherit+0xae>
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	2201      	movs	r2, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	43da      	mvns	r2, r3
 8007554:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <xTaskPriorityDisinherit+0x108>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4013      	ands	r3, r2
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <xTaskPriorityDisinherit+0x108>)
 800755c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f1c3 0207 	rsb	r2, r3, #7
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	2201      	movs	r2, #1
 8007578:	409a      	lsls	r2, r3
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xTaskPriorityDisinherit+0x108>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4313      	orrs	r3, r2
 8007580:	4a0d      	ldr	r2, [pc, #52]	; (80075b8 <xTaskPriorityDisinherit+0x108>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <xTaskPriorityDisinherit+0x104>)
 8007592:	441a      	add	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fe fb77 	bl	8005c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a4:	697b      	ldr	r3, [r7, #20]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000524 	.word	0x20000524
 80075b4:	20000528 	.word	0x20000528
 80075b8:	2000062c 	.word	0x2000062c

080075bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d077      	beq.n	80076c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60fb      	str	r3, [r7, #12]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d902      	bls.n	8007602 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e002      	b.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	429a      	cmp	r2, r3
 8007610:	d058      	beq.n	80076c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	429a      	cmp	r2, r3
 800761a:	d153      	bne.n	80076c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	429a      	cmp	r2, r3
 8007624:	d10a      	bne.n	800763c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60bb      	str	r3, [r7, #8]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	db04      	blt.n	800765a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f1c3 0207 	rsb	r2, r3, #7
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	6959      	ldr	r1, [r3, #20]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800766a:	4413      	add	r3, r2
 800766c:	4299      	cmp	r1, r3
 800766e:	d129      	bne.n	80076c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fb67 	bl	8005d48 <uxListRemove>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	2201      	movs	r2, #1
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	43da      	mvns	r2, r3
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4013      	ands	r3, r2
 8007692:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007694:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	2201      	movs	r2, #1
 800769c:	409a      	lsls	r2, r3
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	4a0b      	ldr	r2, [pc, #44]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076b6:	441a      	add	r2, r3
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f7fe fae5 	bl	8005c8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076c4:	bf00      	nop
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000524 	.word	0x20000524
 80076d0:	20000528 	.word	0x20000528
 80076d4:	2000062c 	.word	0x2000062c

080076d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <pvTaskIncrementMutexHeldCount+0x24>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <pvTaskIncrementMutexHeldCount+0x24>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076ea:	3201      	adds	r2, #1
 80076ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <pvTaskIncrementMutexHeldCount+0x24>)
 80076f0:	681b      	ldr	r3, [r3, #0]
	}
 80076f2:	4618      	mov	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	20000524 	.word	0x20000524

08007700 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800770a:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fb16 	bl	8005d48 <uxListRemove>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10b      	bne.n	800773a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2201      	movs	r2, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43da      	mvns	r2, r3
 8007730:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4013      	ands	r3, r2
 8007736:	4a20      	ldr	r2, [pc, #128]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d10a      	bne.n	8007758 <prvAddCurrentTaskToDelayedList+0x58>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007748:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	481a      	ldr	r0, [pc, #104]	; (80077bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007752:	f7fe fa9c 	bl	8005c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007756:	e026      	b.n	80077a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007760:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	429a      	cmp	r2, r3
 800776e:	d209      	bcs.n	8007784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007770:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7fe faaa 	bl	8005cd6 <vListInsert>
}
 8007782:	e010      	b.n	80077a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3304      	adds	r3, #4
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f7fe faa0 	bl	8005cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	429a      	cmp	r2, r3
 800779e:	d202      	bcs.n	80077a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077a0:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6013      	str	r3, [r2, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000628 	.word	0x20000628
 80077b4:	20000524 	.word	0x20000524
 80077b8:	2000062c 	.word	0x2000062c
 80077bc:	20000610 	.word	0x20000610
 80077c0:	200005e0 	.word	0x200005e0
 80077c4:	200005dc 	.word	0x200005dc
 80077c8:	20000644 	.word	0x20000644

080077cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3b04      	subs	r3, #4
 80077dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3b04      	subs	r3, #4
 80077ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f023 0201 	bic.w	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b04      	subs	r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077fc:	4a0c      	ldr	r2, [pc, #48]	; (8007830 <pxPortInitialiseStack+0x64>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b14      	subs	r3, #20
 8007806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b04      	subs	r3, #4
 8007812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f06f 0202 	mvn.w	r2, #2
 800781a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3b20      	subs	r3, #32
 8007820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007822:	68fb      	ldr	r3, [r7, #12]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	08007835 	.word	0x08007835

08007834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <prvTaskExitError+0x54>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007846:	d00a      	beq.n	800785e <prvTaskExitError+0x2a>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60fb      	str	r3, [r7, #12]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <prvTaskExitError+0x28>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
}
 8007870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007872:	bf00      	nop
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0fc      	beq.n	8007874 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	2000000c 	.word	0x2000000c
 800788c:	00000000 	.word	0x00000000

08007890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pxCurrentTCBConst2>)
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	f380 8809 	msr	PSP, r0
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	4770      	bx	lr
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst2>:
 80078b0:	20000524 	.word	0x20000524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078b8:	4808      	ldr	r0, [pc, #32]	; (80078dc <prvPortStartFirstTask+0x24>)
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f380 8808 	msr	MSP, r0
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	f380 8814 	msr	CONTROL, r0
 80078ca:	b662      	cpsie	i
 80078cc:	b661      	cpsie	f
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	df00      	svc	0
 80078d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078da:	bf00      	nop
 80078dc:	e000ed08 	.word	0xe000ed08

080078e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078e6:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <xPortStartScheduler+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a46      	ldr	r2, [pc, #280]	; (8007a04 <xPortStartScheduler+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10a      	bne.n	8007906 <xPortStartScheduler+0x26>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007906:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <xPortStartScheduler+0x120>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <xPortStartScheduler+0x128>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10a      	bne.n	8007926 <xPortStartScheduler+0x46>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <xPortStartScheduler+0x12c>)
 8007928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <xPortStartScheduler+0x130>)
 800794c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <xPortStartScheduler+0x134>)
 8007950:	2207      	movs	r2, #7
 8007952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007954:	e009      	b.n	800796a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007956:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <xPortStartScheduler+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3b01      	subs	r3, #1
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <xPortStartScheduler+0x134>)
 800795e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d0ef      	beq.n	8007956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007976:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <xPortStartScheduler+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1c3 0307 	rsb	r3, r3, #7
 800797e:	2b04      	cmp	r3, #4
 8007980:	d00a      	beq.n	8007998 <xPortStartScheduler+0xb8>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	60bb      	str	r3, [r7, #8]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <xPortStartScheduler+0x134>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <xPortStartScheduler+0x134>)
 80079ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079b6:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <xPortStartScheduler+0x138>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <xPortStartScheduler+0x138>)
 80079bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079ce:	f000 f8dd 	bl	8007b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <xPortStartScheduler+0x13c>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079d8:	f000 f8fc 	bl	8007bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xPortStartScheduler+0x140>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <xPortStartScheduler+0x140>)
 80079e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079e8:	f7ff ff66 	bl	80078b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ec:	f7ff fa86 	bl	8006efc <vTaskSwitchContext>
	prvTaskExitError();
 80079f0:	f7ff ff20 	bl	8007834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	410fc271 	.word	0x410fc271
 8007a08:	410fc270 	.word	0x410fc270
 8007a0c:	e000e400 	.word	0xe000e400
 8007a10:	20000650 	.word	0x20000650
 8007a14:	20000654 	.word	0x20000654
 8007a18:	e000ed20 	.word	0xe000ed20
 8007a1c:	2000000c 	.word	0x2000000c
 8007a20:	e000ef34 	.word	0xe000ef34

08007a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d10f      	bne.n	8007a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vPortEnterCritical+0x5c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <vPortEnterCritical+0x4a>
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000000c 	.word	0x2000000c
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a8a:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <vPortExitCritical+0x50>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <vPortExitCritical+0x24>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vPortExitCritical+0x50>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <vPortExitCritical+0x42>
 8007aba:	2300      	movs	r3, #0
 8007abc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2000000c 	.word	0x2000000c
	...

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f01e 0f10 	tst.w	lr, #16
 8007af0:	bf08      	it	eq
 8007af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b04:	f380 8811 	msr	BASEPRI, r0
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f7ff f9f4 	bl	8006efc <vTaskSwitchContext>
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f380 8811 	msr	BASEPRI, r0
 8007b1c:	bc09      	pop	{r0, r3}
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	6808      	ldr	r0, [r1, #0]
 8007b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b26:	f01e 0f10 	tst.w	lr, #16
 8007b2a:	bf08      	it	eq
 8007b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b30:	f380 8809 	msr	PSP, r0
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst>:
 8007b40:	20000524 	.word	0x20000524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b62:	f7ff f913 	bl	8006d8c <xTaskIncrementTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <SysTick_Handler+0x40>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <vPortSetupTimerInterrupt+0x38>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <vPortSetupTimerInterrupt+0x3c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <vPortSetupTimerInterrupt+0x40>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <vPortSetupTimerInterrupt+0x44>)
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	e000e010 	.word	0xe000e010
 8007bc4:	e000e018 	.word	0xe000e018
 8007bc8:	20000000 	.word	0x20000000
 8007bcc:	10624dd3 	.word	0x10624dd3
 8007bd0:	e000e014 	.word	0xe000e014

08007bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007be4 <vPortEnableVFP+0x10>
 8007bd8:	6801      	ldr	r1, [r0, #0]
 8007bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bde:	6001      	str	r1, [r0, #0]
 8007be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007be2:	bf00      	nop
 8007be4:	e000ed88 	.word	0xe000ed88

08007be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bf4:	f7ff f820 	bl	8006c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bf8:	4b5b      	ldr	r3, [pc, #364]	; (8007d68 <pvPortMalloc+0x180>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c00:	f000 f920 	bl	8007e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c04:	4b59      	ldr	r3, [pc, #356]	; (8007d6c <pvPortMalloc+0x184>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8093 	bne.w	8007d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01d      	beq.n	8007c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c18:	2208      	movs	r2, #8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d014      	beq.n	8007c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f023 0307 	bic.w	r3, r3, #7
 8007c30:	3308      	adds	r3, #8
 8007c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <pvPortMalloc+0x6c>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d06e      	beq.n	8007d38 <pvPortMalloc+0x150>
 8007c5a:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <pvPortMalloc+0x188>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d869      	bhi.n	8007d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c64:	4b43      	ldr	r3, [pc, #268]	; (8007d74 <pvPortMalloc+0x18c>)
 8007c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c68:	4b42      	ldr	r3, [pc, #264]	; (8007d74 <pvPortMalloc+0x18c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c6e:	e004      	b.n	8007c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d903      	bls.n	8007c8c <pvPortMalloc+0xa4>
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f1      	bne.n	8007c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c8c:	4b36      	ldr	r3, [pc, #216]	; (8007d68 <pvPortMalloc+0x180>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d050      	beq.n	8007d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	4413      	add	r3, r2
 8007c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d91f      	bls.n	8007cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	613b      	str	r3, [r7, #16]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cf2:	69b8      	ldr	r0, [r7, #24]
 8007cf4:	f000 f908 	bl	8007f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cf8:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <pvPortMalloc+0x188>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	4a1b      	ldr	r2, [pc, #108]	; (8007d70 <pvPortMalloc+0x188>)
 8007d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d06:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <pvPortMalloc+0x188>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <pvPortMalloc+0x190>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d203      	bcs.n	8007d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d12:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <pvPortMalloc+0x188>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a18      	ldr	r2, [pc, #96]	; (8007d78 <pvPortMalloc+0x190>)
 8007d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	4b13      	ldr	r3, [pc, #76]	; (8007d6c <pvPortMalloc+0x184>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <pvPortMalloc+0x194>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3301      	adds	r3, #1
 8007d34:	4a11      	ldr	r2, [pc, #68]	; (8007d7c <pvPortMalloc+0x194>)
 8007d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d38:	f7fe ff8c 	bl	8006c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <pvPortMalloc+0x174>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <pvPortMalloc+0x172>
	return pvReturn;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3728      	adds	r7, #40	; 0x28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20004260 	.word	0x20004260
 8007d6c:	20004274 	.word	0x20004274
 8007d70:	20004264 	.word	0x20004264
 8007d74:	20004258 	.word	0x20004258
 8007d78:	20004268 	.word	0x20004268
 8007d7c:	2000426c 	.word	0x2000426c

08007d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d04d      	beq.n	8007e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d92:	2308      	movs	r3, #8
 8007d94:	425b      	negs	r3, r3
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <vPortFree+0xb8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <vPortFree+0x44>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60fb      	str	r3, [r7, #12]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <vPortFree+0x62>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60bb      	str	r3, [r7, #8]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <vPortFree+0xb8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01e      	beq.n	8007e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11a      	bne.n	8007e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	; (8007e38 <vPortFree+0xb8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	401a      	ands	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e08:	f7fe ff16 	bl	8006c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <vPortFree+0xbc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <vPortFree+0xbc>)
 8007e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f000 f874 	bl	8007f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <vPortFree+0xc0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	4a06      	ldr	r2, [pc, #24]	; (8007e40 <vPortFree+0xc0>)
 8007e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e2a:	f7fe ff13 	bl	8006c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e2e:	bf00      	nop
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20004274 	.word	0x20004274
 8007e3c:	20004264 	.word	0x20004264
 8007e40:	20004270 	.word	0x20004270

08007e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <prvHeapInit+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3307      	adds	r3, #7
 8007e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <prvHeapInit+0xac>)
 8007e74:	4413      	add	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <prvHeapInit+0xb0>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <prvHeapInit+0xb0>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e90:	2208      	movs	r2, #8
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0307 	bic.w	r3, r3, #7
 8007e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eae:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <prvHeapInit+0xb4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <prvHeapInit+0xb8>)
 8007ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <prvHeapInit+0xbc>)
 8007eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <prvHeapInit+0xc0>)
 8007ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ee2:	601a      	str	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000658 	.word	0x20000658
 8007ef4:	20004258 	.word	0x20004258
 8007ef8:	20004260 	.word	0x20004260
 8007efc:	20004268 	.word	0x20004268
 8007f00:	20004264 	.word	0x20004264
 8007f04:	20004274 	.word	0x20004274

08007f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <prvInsertBlockIntoFreeList+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e002      	b.n	8007f1c <prvInsertBlockIntoFreeList+0x14>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d8f7      	bhi.n	8007f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d108      	bne.n	8007f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d118      	bne.n	8007f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d00d      	beq.n	8007f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	441a      	add	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e008      	b.n	8007f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e003      	b.n	8007f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d002      	beq.n	8007fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20004258 	.word	0x20004258
 8007fb8:	20004260 	.word	0x20004260

08007fbc <__errno>:
 8007fbc:	4b01      	ldr	r3, [pc, #4]	; (8007fc4 <__errno+0x8>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20000010 	.word	0x20000010

08007fc8 <std>:
 8007fc8:	2300      	movs	r3, #0
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	4604      	mov	r4, r0
 8007fce:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fd6:	6083      	str	r3, [r0, #8]
 8007fd8:	8181      	strh	r1, [r0, #12]
 8007fda:	6643      	str	r3, [r0, #100]	; 0x64
 8007fdc:	81c2      	strh	r2, [r0, #14]
 8007fde:	6183      	str	r3, [r0, #24]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	305c      	adds	r0, #92	; 0x5c
 8007fe6:	f000 f92b 	bl	8008240 <memset>
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x38>)
 8007fec:	6263      	str	r3, [r4, #36]	; 0x24
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <std+0x3c>)
 8007ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <std+0x40>)
 8007ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x44>)
 8007ff8:	6224      	str	r4, [r4, #32]
 8007ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	080084d9 	.word	0x080084d9
 8008004:	080084fb 	.word	0x080084fb
 8008008:	08008533 	.word	0x08008533
 800800c:	08008557 	.word	0x08008557

08008010 <_cleanup_r>:
 8008010:	4901      	ldr	r1, [pc, #4]	; (8008018 <_cleanup_r+0x8>)
 8008012:	f000 b8af 	b.w	8008174 <_fwalk_reent>
 8008016:	bf00      	nop
 8008018:	080088dd 	.word	0x080088dd

0800801c <__sfmoreglue>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	1e4a      	subs	r2, r1, #1
 8008020:	2568      	movs	r5, #104	; 0x68
 8008022:	4355      	muls	r5, r2
 8008024:	460e      	mov	r6, r1
 8008026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800802a:	f000 f961 	bl	80082f0 <_malloc_r>
 800802e:	4604      	mov	r4, r0
 8008030:	b140      	cbz	r0, 8008044 <__sfmoreglue+0x28>
 8008032:	2100      	movs	r1, #0
 8008034:	e9c0 1600 	strd	r1, r6, [r0]
 8008038:	300c      	adds	r0, #12
 800803a:	60a0      	str	r0, [r4, #8]
 800803c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008040:	f000 f8fe 	bl	8008240 <memset>
 8008044:	4620      	mov	r0, r4
 8008046:	bd70      	pop	{r4, r5, r6, pc}

08008048 <__sfp_lock_acquire>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__sfp_lock_acquire+0x8>)
 800804a:	f000 b8d8 	b.w	80081fe <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	200043f8 	.word	0x200043f8

08008054 <__sfp_lock_release>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sfp_lock_release+0x8>)
 8008056:	f000 b8d3 	b.w	8008200 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	200043f8 	.word	0x200043f8

08008060 <__sinit_lock_acquire>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sinit_lock_acquire+0x8>)
 8008062:	f000 b8cc 	b.w	80081fe <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	200043f3 	.word	0x200043f3

0800806c <__sinit_lock_release>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sinit_lock_release+0x8>)
 800806e:	f000 b8c7 	b.w	8008200 <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	200043f3 	.word	0x200043f3

08008078 <__sinit>:
 8008078:	b510      	push	{r4, lr}
 800807a:	4604      	mov	r4, r0
 800807c:	f7ff fff0 	bl	8008060 <__sinit_lock_acquire>
 8008080:	69a3      	ldr	r3, [r4, #24]
 8008082:	b11b      	cbz	r3, 800808c <__sinit+0x14>
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f7ff bff0 	b.w	800806c <__sinit_lock_release>
 800808c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008090:	6523      	str	r3, [r4, #80]	; 0x50
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <__sinit+0x68>)
 8008094:	4a13      	ldr	r2, [pc, #76]	; (80080e4 <__sinit+0x6c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	62a2      	str	r2, [r4, #40]	; 0x28
 800809a:	42a3      	cmp	r3, r4
 800809c:	bf04      	itt	eq
 800809e:	2301      	moveq	r3, #1
 80080a0:	61a3      	streq	r3, [r4, #24]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f820 	bl	80080e8 <__sfp>
 80080a8:	6060      	str	r0, [r4, #4]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f81c 	bl	80080e8 <__sfp>
 80080b0:	60a0      	str	r0, [r4, #8]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f818 	bl	80080e8 <__sfp>
 80080b8:	2200      	movs	r2, #0
 80080ba:	60e0      	str	r0, [r4, #12]
 80080bc:	2104      	movs	r1, #4
 80080be:	6860      	ldr	r0, [r4, #4]
 80080c0:	f7ff ff82 	bl	8007fc8 <std>
 80080c4:	68a0      	ldr	r0, [r4, #8]
 80080c6:	2201      	movs	r2, #1
 80080c8:	2109      	movs	r1, #9
 80080ca:	f7ff ff7d 	bl	8007fc8 <std>
 80080ce:	68e0      	ldr	r0, [r4, #12]
 80080d0:	2202      	movs	r2, #2
 80080d2:	2112      	movs	r1, #18
 80080d4:	f7ff ff78 	bl	8007fc8 <std>
 80080d8:	2301      	movs	r3, #1
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	e7d2      	b.n	8008084 <__sinit+0xc>
 80080de:	bf00      	nop
 80080e0:	08009d80 	.word	0x08009d80
 80080e4:	08008011 	.word	0x08008011

080080e8 <__sfp>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	4607      	mov	r7, r0
 80080ec:	f7ff ffac 	bl	8008048 <__sfp_lock_acquire>
 80080f0:	4b1e      	ldr	r3, [pc, #120]	; (800816c <__sfp+0x84>)
 80080f2:	681e      	ldr	r6, [r3, #0]
 80080f4:	69b3      	ldr	r3, [r6, #24]
 80080f6:	b913      	cbnz	r3, 80080fe <__sfp+0x16>
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ffbd 	bl	8008078 <__sinit>
 80080fe:	3648      	adds	r6, #72	; 0x48
 8008100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008104:	3b01      	subs	r3, #1
 8008106:	d503      	bpl.n	8008110 <__sfp+0x28>
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	b30b      	cbz	r3, 8008150 <__sfp+0x68>
 800810c:	6836      	ldr	r6, [r6, #0]
 800810e:	e7f7      	b.n	8008100 <__sfp+0x18>
 8008110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008114:	b9d5      	cbnz	r5, 800814c <__sfp+0x64>
 8008116:	4b16      	ldr	r3, [pc, #88]	; (8008170 <__sfp+0x88>)
 8008118:	60e3      	str	r3, [r4, #12]
 800811a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800811e:	6665      	str	r5, [r4, #100]	; 0x64
 8008120:	f000 f86c 	bl	80081fc <__retarget_lock_init_recursive>
 8008124:	f7ff ff96 	bl	8008054 <__sfp_lock_release>
 8008128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800812c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008130:	6025      	str	r5, [r4, #0]
 8008132:	61a5      	str	r5, [r4, #24]
 8008134:	2208      	movs	r2, #8
 8008136:	4629      	mov	r1, r5
 8008138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800813c:	f000 f880 	bl	8008240 <memset>
 8008140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008148:	4620      	mov	r0, r4
 800814a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800814c:	3468      	adds	r4, #104	; 0x68
 800814e:	e7d9      	b.n	8008104 <__sfp+0x1c>
 8008150:	2104      	movs	r1, #4
 8008152:	4638      	mov	r0, r7
 8008154:	f7ff ff62 	bl	800801c <__sfmoreglue>
 8008158:	4604      	mov	r4, r0
 800815a:	6030      	str	r0, [r6, #0]
 800815c:	2800      	cmp	r0, #0
 800815e:	d1d5      	bne.n	800810c <__sfp+0x24>
 8008160:	f7ff ff78 	bl	8008054 <__sfp_lock_release>
 8008164:	230c      	movs	r3, #12
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	e7ee      	b.n	8008148 <__sfp+0x60>
 800816a:	bf00      	nop
 800816c:	08009d80 	.word	0x08009d80
 8008170:	ffff0001 	.word	0xffff0001

08008174 <_fwalk_reent>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4606      	mov	r6, r0
 800817a:	4688      	mov	r8, r1
 800817c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008180:	2700      	movs	r7, #0
 8008182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008186:	f1b9 0901 	subs.w	r9, r9, #1
 800818a:	d505      	bpl.n	8008198 <_fwalk_reent+0x24>
 800818c:	6824      	ldr	r4, [r4, #0]
 800818e:	2c00      	cmp	r4, #0
 8008190:	d1f7      	bne.n	8008182 <_fwalk_reent+0xe>
 8008192:	4638      	mov	r0, r7
 8008194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008198:	89ab      	ldrh	r3, [r5, #12]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d907      	bls.n	80081ae <_fwalk_reent+0x3a>
 800819e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081a2:	3301      	adds	r3, #1
 80081a4:	d003      	beq.n	80081ae <_fwalk_reent+0x3a>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	47c0      	blx	r8
 80081ac:	4307      	orrs	r7, r0
 80081ae:	3568      	adds	r5, #104	; 0x68
 80081b0:	e7e9      	b.n	8008186 <_fwalk_reent+0x12>
	...

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	; (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	; (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	; (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	; (80081f8 <__libc_init_array+0x44>)
 80081c8:	f001 fa2a 	bl	8009620 <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	08009f74 	.word	0x08009f74
 80081f0:	08009f74 	.word	0x08009f74
 80081f4:	08009f74 	.word	0x08009f74
 80081f8:	08009f78 	.word	0x08009f78

080081fc <__retarget_lock_init_recursive>:
 80081fc:	4770      	bx	lr

080081fe <__retarget_lock_acquire_recursive>:
 80081fe:	4770      	bx	lr

08008200 <__retarget_lock_release_recursive>:
 8008200:	4770      	bx	lr
	...

08008204 <malloc>:
 8008204:	4b02      	ldr	r3, [pc, #8]	; (8008210 <malloc+0xc>)
 8008206:	4601      	mov	r1, r0
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f000 b871 	b.w	80082f0 <_malloc_r>
 800820e:	bf00      	nop
 8008210:	20000010 	.word	0x20000010

08008214 <free>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <free+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f000 b819 	b.w	8008250 <_free_r>
 800821e:	bf00      	nop
 8008220:	20000010 	.word	0x20000010

08008224 <memcpy>:
 8008224:	440a      	add	r2, r1
 8008226:	4291      	cmp	r1, r2
 8008228:	f100 33ff 	add.w	r3, r0, #4294967295
 800822c:	d100      	bne.n	8008230 <memcpy+0xc>
 800822e:	4770      	bx	lr
 8008230:	b510      	push	{r4, lr}
 8008232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800823a:	4291      	cmp	r1, r2
 800823c:	d1f9      	bne.n	8008232 <memcpy+0xe>
 800823e:	bd10      	pop	{r4, pc}

08008240 <memset>:
 8008240:	4402      	add	r2, r0
 8008242:	4603      	mov	r3, r0
 8008244:	4293      	cmp	r3, r2
 8008246:	d100      	bne.n	800824a <memset+0xa>
 8008248:	4770      	bx	lr
 800824a:	f803 1b01 	strb.w	r1, [r3], #1
 800824e:	e7f9      	b.n	8008244 <memset+0x4>

08008250 <_free_r>:
 8008250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008252:	2900      	cmp	r1, #0
 8008254:	d048      	beq.n	80082e8 <_free_r+0x98>
 8008256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825a:	9001      	str	r0, [sp, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f1a1 0404 	sub.w	r4, r1, #4
 8008262:	bfb8      	it	lt
 8008264:	18e4      	addlt	r4, r4, r3
 8008266:	f000 fb99 	bl	800899c <__malloc_lock>
 800826a:	4a20      	ldr	r2, [pc, #128]	; (80082ec <_free_r+0x9c>)
 800826c:	9801      	ldr	r0, [sp, #4]
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	4615      	mov	r5, r2
 8008272:	b933      	cbnz	r3, 8008282 <_free_r+0x32>
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	6014      	str	r4, [r2, #0]
 8008278:	b003      	add	sp, #12
 800827a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800827e:	f000 bb93 	b.w	80089a8 <__malloc_unlock>
 8008282:	42a3      	cmp	r3, r4
 8008284:	d90b      	bls.n	800829e <_free_r+0x4e>
 8008286:	6821      	ldr	r1, [r4, #0]
 8008288:	1862      	adds	r2, r4, r1
 800828a:	4293      	cmp	r3, r2
 800828c:	bf04      	itt	eq
 800828e:	681a      	ldreq	r2, [r3, #0]
 8008290:	685b      	ldreq	r3, [r3, #4]
 8008292:	6063      	str	r3, [r4, #4]
 8008294:	bf04      	itt	eq
 8008296:	1852      	addeq	r2, r2, r1
 8008298:	6022      	streq	r2, [r4, #0]
 800829a:	602c      	str	r4, [r5, #0]
 800829c:	e7ec      	b.n	8008278 <_free_r+0x28>
 800829e:	461a      	mov	r2, r3
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	b10b      	cbz	r3, 80082a8 <_free_r+0x58>
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d9fa      	bls.n	800829e <_free_r+0x4e>
 80082a8:	6811      	ldr	r1, [r2, #0]
 80082aa:	1855      	adds	r5, r2, r1
 80082ac:	42a5      	cmp	r5, r4
 80082ae:	d10b      	bne.n	80082c8 <_free_r+0x78>
 80082b0:	6824      	ldr	r4, [r4, #0]
 80082b2:	4421      	add	r1, r4
 80082b4:	1854      	adds	r4, r2, r1
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	6011      	str	r1, [r2, #0]
 80082ba:	d1dd      	bne.n	8008278 <_free_r+0x28>
 80082bc:	681c      	ldr	r4, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	6053      	str	r3, [r2, #4]
 80082c2:	4421      	add	r1, r4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	e7d7      	b.n	8008278 <_free_r+0x28>
 80082c8:	d902      	bls.n	80082d0 <_free_r+0x80>
 80082ca:	230c      	movs	r3, #12
 80082cc:	6003      	str	r3, [r0, #0]
 80082ce:	e7d3      	b.n	8008278 <_free_r+0x28>
 80082d0:	6825      	ldr	r5, [r4, #0]
 80082d2:	1961      	adds	r1, r4, r5
 80082d4:	428b      	cmp	r3, r1
 80082d6:	bf04      	itt	eq
 80082d8:	6819      	ldreq	r1, [r3, #0]
 80082da:	685b      	ldreq	r3, [r3, #4]
 80082dc:	6063      	str	r3, [r4, #4]
 80082de:	bf04      	itt	eq
 80082e0:	1949      	addeq	r1, r1, r5
 80082e2:	6021      	streq	r1, [r4, #0]
 80082e4:	6054      	str	r4, [r2, #4]
 80082e6:	e7c7      	b.n	8008278 <_free_r+0x28>
 80082e8:	b003      	add	sp, #12
 80082ea:	bd30      	pop	{r4, r5, pc}
 80082ec:	20004278 	.word	0x20004278

080082f0 <_malloc_r>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	1ccd      	adds	r5, r1, #3
 80082f4:	f025 0503 	bic.w	r5, r5, #3
 80082f8:	3508      	adds	r5, #8
 80082fa:	2d0c      	cmp	r5, #12
 80082fc:	bf38      	it	cc
 80082fe:	250c      	movcc	r5, #12
 8008300:	2d00      	cmp	r5, #0
 8008302:	4606      	mov	r6, r0
 8008304:	db01      	blt.n	800830a <_malloc_r+0x1a>
 8008306:	42a9      	cmp	r1, r5
 8008308:	d903      	bls.n	8008312 <_malloc_r+0x22>
 800830a:	230c      	movs	r3, #12
 800830c:	6033      	str	r3, [r6, #0]
 800830e:	2000      	movs	r0, #0
 8008310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008312:	f000 fb43 	bl	800899c <__malloc_lock>
 8008316:	4921      	ldr	r1, [pc, #132]	; (800839c <_malloc_r+0xac>)
 8008318:	680a      	ldr	r2, [r1, #0]
 800831a:	4614      	mov	r4, r2
 800831c:	b99c      	cbnz	r4, 8008346 <_malloc_r+0x56>
 800831e:	4f20      	ldr	r7, [pc, #128]	; (80083a0 <_malloc_r+0xb0>)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	b923      	cbnz	r3, 800832e <_malloc_r+0x3e>
 8008324:	4621      	mov	r1, r4
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f8a6 	bl	8008478 <_sbrk_r>
 800832c:	6038      	str	r0, [r7, #0]
 800832e:	4629      	mov	r1, r5
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f8a1 	bl	8008478 <_sbrk_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d123      	bne.n	8008382 <_malloc_r+0x92>
 800833a:	230c      	movs	r3, #12
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	4630      	mov	r0, r6
 8008340:	f000 fb32 	bl	80089a8 <__malloc_unlock>
 8008344:	e7e3      	b.n	800830e <_malloc_r+0x1e>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	1b5b      	subs	r3, r3, r5
 800834a:	d417      	bmi.n	800837c <_malloc_r+0x8c>
 800834c:	2b0b      	cmp	r3, #11
 800834e:	d903      	bls.n	8008358 <_malloc_r+0x68>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	441c      	add	r4, r3
 8008354:	6025      	str	r5, [r4, #0]
 8008356:	e004      	b.n	8008362 <_malloc_r+0x72>
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	42a2      	cmp	r2, r4
 800835c:	bf0c      	ite	eq
 800835e:	600b      	streq	r3, [r1, #0]
 8008360:	6053      	strne	r3, [r2, #4]
 8008362:	4630      	mov	r0, r6
 8008364:	f000 fb20 	bl	80089a8 <__malloc_unlock>
 8008368:	f104 000b 	add.w	r0, r4, #11
 800836c:	1d23      	adds	r3, r4, #4
 800836e:	f020 0007 	bic.w	r0, r0, #7
 8008372:	1ac2      	subs	r2, r0, r3
 8008374:	d0cc      	beq.n	8008310 <_malloc_r+0x20>
 8008376:	1a1b      	subs	r3, r3, r0
 8008378:	50a3      	str	r3, [r4, r2]
 800837a:	e7c9      	b.n	8008310 <_malloc_r+0x20>
 800837c:	4622      	mov	r2, r4
 800837e:	6864      	ldr	r4, [r4, #4]
 8008380:	e7cc      	b.n	800831c <_malloc_r+0x2c>
 8008382:	1cc4      	adds	r4, r0, #3
 8008384:	f024 0403 	bic.w	r4, r4, #3
 8008388:	42a0      	cmp	r0, r4
 800838a:	d0e3      	beq.n	8008354 <_malloc_r+0x64>
 800838c:	1a21      	subs	r1, r4, r0
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f872 	bl	8008478 <_sbrk_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d1dd      	bne.n	8008354 <_malloc_r+0x64>
 8008398:	e7cf      	b.n	800833a <_malloc_r+0x4a>
 800839a:	bf00      	nop
 800839c:	20004278 	.word	0x20004278
 80083a0:	2000427c 	.word	0x2000427c

080083a4 <cleanup_glue>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	460c      	mov	r4, r1
 80083a8:	6809      	ldr	r1, [r1, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	b109      	cbz	r1, 80083b2 <cleanup_glue+0xe>
 80083ae:	f7ff fff9 	bl	80083a4 <cleanup_glue>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ba:	f7ff bf49 	b.w	8008250 <_free_r>
	...

080083c0 <_reclaim_reent>:
 80083c0:	4b2c      	ldr	r3, [pc, #176]	; (8008474 <_reclaim_reent+0xb4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4283      	cmp	r3, r0
 80083c6:	b570      	push	{r4, r5, r6, lr}
 80083c8:	4604      	mov	r4, r0
 80083ca:	d051      	beq.n	8008470 <_reclaim_reent+0xb0>
 80083cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083ce:	b143      	cbz	r3, 80083e2 <_reclaim_reent+0x22>
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d14a      	bne.n	800846c <_reclaim_reent+0xac>
 80083d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	b111      	cbz	r1, 80083e2 <_reclaim_reent+0x22>
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff ff37 	bl	8008250 <_free_r>
 80083e2:	6961      	ldr	r1, [r4, #20]
 80083e4:	b111      	cbz	r1, 80083ec <_reclaim_reent+0x2c>
 80083e6:	4620      	mov	r0, r4
 80083e8:	f7ff ff32 	bl	8008250 <_free_r>
 80083ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083ee:	b111      	cbz	r1, 80083f6 <_reclaim_reent+0x36>
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff ff2d 	bl	8008250 <_free_r>
 80083f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083f8:	b111      	cbz	r1, 8008400 <_reclaim_reent+0x40>
 80083fa:	4620      	mov	r0, r4
 80083fc:	f7ff ff28 	bl	8008250 <_free_r>
 8008400:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008402:	b111      	cbz	r1, 800840a <_reclaim_reent+0x4a>
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff ff23 	bl	8008250 <_free_r>
 800840a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800840c:	b111      	cbz	r1, 8008414 <_reclaim_reent+0x54>
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff ff1e 	bl	8008250 <_free_r>
 8008414:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008416:	b111      	cbz	r1, 800841e <_reclaim_reent+0x5e>
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff ff19 	bl	8008250 <_free_r>
 800841e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008420:	b111      	cbz	r1, 8008428 <_reclaim_reent+0x68>
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff ff14 	bl	8008250 <_free_r>
 8008428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800842a:	b111      	cbz	r1, 8008432 <_reclaim_reent+0x72>
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff ff0f 	bl	8008250 <_free_r>
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	b1e3      	cbz	r3, 8008470 <_reclaim_reent+0xb0>
 8008436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008438:	4620      	mov	r0, r4
 800843a:	4798      	blx	r3
 800843c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800843e:	b1b9      	cbz	r1, 8008470 <_reclaim_reent+0xb0>
 8008440:	4620      	mov	r0, r4
 8008442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008446:	f7ff bfad 	b.w	80083a4 <cleanup_glue>
 800844a:	5949      	ldr	r1, [r1, r5]
 800844c:	b941      	cbnz	r1, 8008460 <_reclaim_reent+0xa0>
 800844e:	3504      	adds	r5, #4
 8008450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008452:	2d80      	cmp	r5, #128	; 0x80
 8008454:	68d9      	ldr	r1, [r3, #12]
 8008456:	d1f8      	bne.n	800844a <_reclaim_reent+0x8a>
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff fef9 	bl	8008250 <_free_r>
 800845e:	e7ba      	b.n	80083d6 <_reclaim_reent+0x16>
 8008460:	680e      	ldr	r6, [r1, #0]
 8008462:	4620      	mov	r0, r4
 8008464:	f7ff fef4 	bl	8008250 <_free_r>
 8008468:	4631      	mov	r1, r6
 800846a:	e7ef      	b.n	800844c <_reclaim_reent+0x8c>
 800846c:	2500      	movs	r5, #0
 800846e:	e7ef      	b.n	8008450 <_reclaim_reent+0x90>
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	bf00      	nop
 8008474:	20000010 	.word	0x20000010

08008478 <_sbrk_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d06      	ldr	r5, [pc, #24]	; (8008494 <_sbrk_r+0x1c>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7fa f96a 	bl	800275c <_sbrk>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_sbrk_r+0x1a>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_sbrk_r+0x1a>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	200043fc 	.word	0x200043fc

08008498 <siprintf>:
 8008498:	b40e      	push	{r1, r2, r3}
 800849a:	b500      	push	{lr}
 800849c:	b09c      	sub	sp, #112	; 0x70
 800849e:	ab1d      	add	r3, sp, #116	; 0x74
 80084a0:	9002      	str	r0, [sp, #8]
 80084a2:	9006      	str	r0, [sp, #24]
 80084a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a8:	4809      	ldr	r0, [pc, #36]	; (80084d0 <siprintf+0x38>)
 80084aa:	9107      	str	r1, [sp, #28]
 80084ac:	9104      	str	r1, [sp, #16]
 80084ae:	4909      	ldr	r1, [pc, #36]	; (80084d4 <siprintf+0x3c>)
 80084b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	6800      	ldr	r0, [r0, #0]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	a902      	add	r1, sp, #8
 80084bc:	f000 fad6 	bl	8008a6c <_svfiprintf_r>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	b01c      	add	sp, #112	; 0x70
 80084c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084cc:	b003      	add	sp, #12
 80084ce:	4770      	bx	lr
 80084d0:	20000010 	.word	0x20000010
 80084d4:	ffff0208 	.word	0xffff0208

080084d8 <__sread>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e0:	f000 feb2 	bl	8009248 <_read_r>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	bfab      	itete	ge
 80084e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084ea:	89a3      	ldrhlt	r3, [r4, #12]
 80084ec:	181b      	addge	r3, r3, r0
 80084ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084f2:	bfac      	ite	ge
 80084f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084f6:	81a3      	strhlt	r3, [r4, #12]
 80084f8:	bd10      	pop	{r4, pc}

080084fa <__swrite>:
 80084fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fe:	461f      	mov	r7, r3
 8008500:	898b      	ldrh	r3, [r1, #12]
 8008502:	05db      	lsls	r3, r3, #23
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	4616      	mov	r6, r2
 800850a:	d505      	bpl.n	8008518 <__swrite+0x1e>
 800850c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008510:	2302      	movs	r3, #2
 8008512:	2200      	movs	r2, #0
 8008514:	f000 fa30 	bl	8008978 <_lseek_r>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800851e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	4632      	mov	r2, r6
 8008526:	463b      	mov	r3, r7
 8008528:	4628      	mov	r0, r5
 800852a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	f000 b90f 	b.w	8008750 <_write_r>

08008532 <__sseek>:
 8008532:	b510      	push	{r4, lr}
 8008534:	460c      	mov	r4, r1
 8008536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853a:	f000 fa1d 	bl	8008978 <_lseek_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	bf15      	itete	ne
 8008544:	6560      	strne	r0, [r4, #84]	; 0x54
 8008546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800854a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800854e:	81a3      	strheq	r3, [r4, #12]
 8008550:	bf18      	it	ne
 8008552:	81a3      	strhne	r3, [r4, #12]
 8008554:	bd10      	pop	{r4, pc}

08008556 <__sclose>:
 8008556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800855a:	f000 b929 	b.w	80087b0 <_close_r>

0800855e <strcat>:
 800855e:	b510      	push	{r4, lr}
 8008560:	4602      	mov	r2, r0
 8008562:	7814      	ldrb	r4, [r2, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	3201      	adds	r2, #1
 8008568:	2c00      	cmp	r4, #0
 800856a:	d1fa      	bne.n	8008562 <strcat+0x4>
 800856c:	3b01      	subs	r3, #1
 800856e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008576:	2a00      	cmp	r2, #0
 8008578:	d1f9      	bne.n	800856e <strcat+0x10>
 800857a:	bd10      	pop	{r4, pc}

0800857c <strcpy>:
 800857c:	4603      	mov	r3, r0
 800857e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008582:	f803 2b01 	strb.w	r2, [r3], #1
 8008586:	2a00      	cmp	r2, #0
 8008588:	d1f9      	bne.n	800857e <strcpy+0x2>
 800858a:	4770      	bx	lr

0800858c <strtok>:
 800858c:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <strtok+0x5c>)
 800858e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008590:	681e      	ldr	r6, [r3, #0]
 8008592:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008594:	4605      	mov	r5, r0
 8008596:	b9fc      	cbnz	r4, 80085d8 <strtok+0x4c>
 8008598:	2050      	movs	r0, #80	; 0x50
 800859a:	9101      	str	r1, [sp, #4]
 800859c:	f7ff fe32 	bl	8008204 <malloc>
 80085a0:	9901      	ldr	r1, [sp, #4]
 80085a2:	65b0      	str	r0, [r6, #88]	; 0x58
 80085a4:	4602      	mov	r2, r0
 80085a6:	b920      	cbnz	r0, 80085b2 <strtok+0x26>
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <strtok+0x60>)
 80085aa:	4811      	ldr	r0, [pc, #68]	; (80085f0 <strtok+0x64>)
 80085ac:	2157      	movs	r1, #87	; 0x57
 80085ae:	f000 f8e1 	bl	8008774 <__assert_func>
 80085b2:	e9c0 4400 	strd	r4, r4, [r0]
 80085b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80085c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80085c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80085ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80085ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80085d2:	6184      	str	r4, [r0, #24]
 80085d4:	7704      	strb	r4, [r0, #28]
 80085d6:	6244      	str	r4, [r0, #36]	; 0x24
 80085d8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80085da:	2301      	movs	r3, #1
 80085dc:	4628      	mov	r0, r5
 80085de:	b002      	add	sp, #8
 80085e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085e4:	f000 b806 	b.w	80085f4 <__strtok_r>
 80085e8:	20000010 	.word	0x20000010
 80085ec:	08009d84 	.word	0x08009d84
 80085f0:	08009d9b 	.word	0x08009d9b

080085f4 <__strtok_r>:
 80085f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f6:	b908      	cbnz	r0, 80085fc <__strtok_r+0x8>
 80085f8:	6810      	ldr	r0, [r2, #0]
 80085fa:	b188      	cbz	r0, 8008620 <__strtok_r+0x2c>
 80085fc:	4604      	mov	r4, r0
 80085fe:	4620      	mov	r0, r4
 8008600:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008604:	460f      	mov	r7, r1
 8008606:	f817 6b01 	ldrb.w	r6, [r7], #1
 800860a:	b91e      	cbnz	r6, 8008614 <__strtok_r+0x20>
 800860c:	b965      	cbnz	r5, 8008628 <__strtok_r+0x34>
 800860e:	6015      	str	r5, [r2, #0]
 8008610:	4628      	mov	r0, r5
 8008612:	e005      	b.n	8008620 <__strtok_r+0x2c>
 8008614:	42b5      	cmp	r5, r6
 8008616:	d1f6      	bne.n	8008606 <__strtok_r+0x12>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f0      	bne.n	80085fe <__strtok_r+0xa>
 800861c:	6014      	str	r4, [r2, #0]
 800861e:	7003      	strb	r3, [r0, #0]
 8008620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008622:	461c      	mov	r4, r3
 8008624:	e00c      	b.n	8008640 <__strtok_r+0x4c>
 8008626:	b915      	cbnz	r5, 800862e <__strtok_r+0x3a>
 8008628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800862c:	460e      	mov	r6, r1
 800862e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008632:	42ab      	cmp	r3, r5
 8008634:	d1f7      	bne.n	8008626 <__strtok_r+0x32>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0f3      	beq.n	8008622 <__strtok_r+0x2e>
 800863a:	2300      	movs	r3, #0
 800863c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	e7ed      	b.n	8008620 <__strtok_r+0x2c>

08008644 <_strtoul_l.isra.0>:
 8008644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008648:	4e3b      	ldr	r6, [pc, #236]	; (8008738 <_strtoul_l.isra.0+0xf4>)
 800864a:	4686      	mov	lr, r0
 800864c:	468c      	mov	ip, r1
 800864e:	4660      	mov	r0, ip
 8008650:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008654:	5da5      	ldrb	r5, [r4, r6]
 8008656:	f015 0508 	ands.w	r5, r5, #8
 800865a:	d1f8      	bne.n	800864e <_strtoul_l.isra.0+0xa>
 800865c:	2c2d      	cmp	r4, #45	; 0x2d
 800865e:	d134      	bne.n	80086ca <_strtoul_l.isra.0+0x86>
 8008660:	f89c 4000 	ldrb.w	r4, [ip]
 8008664:	f04f 0801 	mov.w	r8, #1
 8008668:	f100 0c02 	add.w	ip, r0, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05e      	beq.n	800872e <_strtoul_l.isra.0+0xea>
 8008670:	2b10      	cmp	r3, #16
 8008672:	d10c      	bne.n	800868e <_strtoul_l.isra.0+0x4a>
 8008674:	2c30      	cmp	r4, #48	; 0x30
 8008676:	d10a      	bne.n	800868e <_strtoul_l.isra.0+0x4a>
 8008678:	f89c 0000 	ldrb.w	r0, [ip]
 800867c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008680:	2858      	cmp	r0, #88	; 0x58
 8008682:	d14f      	bne.n	8008724 <_strtoul_l.isra.0+0xe0>
 8008684:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008688:	2310      	movs	r3, #16
 800868a:	f10c 0c02 	add.w	ip, ip, #2
 800868e:	f04f 37ff 	mov.w	r7, #4294967295
 8008692:	2500      	movs	r5, #0
 8008694:	fbb7 f7f3 	udiv	r7, r7, r3
 8008698:	fb03 f907 	mul.w	r9, r3, r7
 800869c:	ea6f 0909 	mvn.w	r9, r9
 80086a0:	4628      	mov	r0, r5
 80086a2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80086a6:	2e09      	cmp	r6, #9
 80086a8:	d818      	bhi.n	80086dc <_strtoul_l.isra.0+0x98>
 80086aa:	4634      	mov	r4, r6
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	dd24      	ble.n	80086fa <_strtoul_l.isra.0+0xb6>
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	db1f      	blt.n	80086f4 <_strtoul_l.isra.0+0xb0>
 80086b4:	4287      	cmp	r7, r0
 80086b6:	d31d      	bcc.n	80086f4 <_strtoul_l.isra.0+0xb0>
 80086b8:	d101      	bne.n	80086be <_strtoul_l.isra.0+0x7a>
 80086ba:	45a1      	cmp	r9, r4
 80086bc:	db1a      	blt.n	80086f4 <_strtoul_l.isra.0+0xb0>
 80086be:	fb00 4003 	mla	r0, r0, r3, r4
 80086c2:	2501      	movs	r5, #1
 80086c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80086c8:	e7eb      	b.n	80086a2 <_strtoul_l.isra.0+0x5e>
 80086ca:	2c2b      	cmp	r4, #43	; 0x2b
 80086cc:	bf08      	it	eq
 80086ce:	f89c 4000 	ldrbeq.w	r4, [ip]
 80086d2:	46a8      	mov	r8, r5
 80086d4:	bf08      	it	eq
 80086d6:	f100 0c02 	addeq.w	ip, r0, #2
 80086da:	e7c7      	b.n	800866c <_strtoul_l.isra.0+0x28>
 80086dc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80086e0:	2e19      	cmp	r6, #25
 80086e2:	d801      	bhi.n	80086e8 <_strtoul_l.isra.0+0xa4>
 80086e4:	3c37      	subs	r4, #55	; 0x37
 80086e6:	e7e1      	b.n	80086ac <_strtoul_l.isra.0+0x68>
 80086e8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80086ec:	2e19      	cmp	r6, #25
 80086ee:	d804      	bhi.n	80086fa <_strtoul_l.isra.0+0xb6>
 80086f0:	3c57      	subs	r4, #87	; 0x57
 80086f2:	e7db      	b.n	80086ac <_strtoul_l.isra.0+0x68>
 80086f4:	f04f 35ff 	mov.w	r5, #4294967295
 80086f8:	e7e4      	b.n	80086c4 <_strtoul_l.isra.0+0x80>
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	da07      	bge.n	800870e <_strtoul_l.isra.0+0xca>
 80086fe:	2322      	movs	r3, #34	; 0x22
 8008700:	f8ce 3000 	str.w	r3, [lr]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	b942      	cbnz	r2, 800871c <_strtoul_l.isra.0+0xd8>
 800870a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800870e:	f1b8 0f00 	cmp.w	r8, #0
 8008712:	d000      	beq.n	8008716 <_strtoul_l.isra.0+0xd2>
 8008714:	4240      	negs	r0, r0
 8008716:	2a00      	cmp	r2, #0
 8008718:	d0f7      	beq.n	800870a <_strtoul_l.isra.0+0xc6>
 800871a:	b10d      	cbz	r5, 8008720 <_strtoul_l.isra.0+0xdc>
 800871c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008720:	6011      	str	r1, [r2, #0]
 8008722:	e7f2      	b.n	800870a <_strtoul_l.isra.0+0xc6>
 8008724:	2430      	movs	r4, #48	; 0x30
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1b1      	bne.n	800868e <_strtoul_l.isra.0+0x4a>
 800872a:	2308      	movs	r3, #8
 800872c:	e7af      	b.n	800868e <_strtoul_l.isra.0+0x4a>
 800872e:	2c30      	cmp	r4, #48	; 0x30
 8008730:	d0a2      	beq.n	8008678 <_strtoul_l.isra.0+0x34>
 8008732:	230a      	movs	r3, #10
 8008734:	e7ab      	b.n	800868e <_strtoul_l.isra.0+0x4a>
 8008736:	bf00      	nop
 8008738:	08009e39 	.word	0x08009e39

0800873c <strtoul>:
 800873c:	4613      	mov	r3, r2
 800873e:	460a      	mov	r2, r1
 8008740:	4601      	mov	r1, r0
 8008742:	4802      	ldr	r0, [pc, #8]	; (800874c <strtoul+0x10>)
 8008744:	6800      	ldr	r0, [r0, #0]
 8008746:	f7ff bf7d 	b.w	8008644 <_strtoul_l.isra.0>
 800874a:	bf00      	nop
 800874c:	20000010 	.word	0x20000010

08008750 <_write_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	; (8008770 <_write_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7f9 ffab 	bl	80026ba <_write>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_write_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_write_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	200043fc 	.word	0x200043fc

08008774 <__assert_func>:
 8008774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008776:	4614      	mov	r4, r2
 8008778:	461a      	mov	r2, r3
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <__assert_func+0x2c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4605      	mov	r5, r0
 8008780:	68d8      	ldr	r0, [r3, #12]
 8008782:	b14c      	cbz	r4, 8008798 <__assert_func+0x24>
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <__assert_func+0x30>)
 8008786:	9100      	str	r1, [sp, #0]
 8008788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800878c:	4906      	ldr	r1, [pc, #24]	; (80087a8 <__assert_func+0x34>)
 800878e:	462b      	mov	r3, r5
 8008790:	f000 f8e0 	bl	8008954 <fiprintf>
 8008794:	f000 fe2a 	bl	80093ec <abort>
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <__assert_func+0x38>)
 800879a:	461c      	mov	r4, r3
 800879c:	e7f3      	b.n	8008786 <__assert_func+0x12>
 800879e:	bf00      	nop
 80087a0:	20000010 	.word	0x20000010
 80087a4:	08009dfc 	.word	0x08009dfc
 80087a8:	08009e09 	.word	0x08009e09
 80087ac:	08009e37 	.word	0x08009e37

080087b0 <_close_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d06      	ldr	r5, [pc, #24]	; (80087cc <_close_r+0x1c>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	f7f9 ff99 	bl	80026f2 <_close>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_close_r+0x1a>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_close_r+0x1a>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	200043fc 	.word	0x200043fc

080087d0 <__sflush_r>:
 80087d0:	898a      	ldrh	r2, [r1, #12]
 80087d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	4605      	mov	r5, r0
 80087d8:	0710      	lsls	r0, r2, #28
 80087da:	460c      	mov	r4, r1
 80087dc:	d458      	bmi.n	8008890 <__sflush_r+0xc0>
 80087de:	684b      	ldr	r3, [r1, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dc05      	bgt.n	80087f0 <__sflush_r+0x20>
 80087e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dc02      	bgt.n	80087f0 <__sflush_r+0x20>
 80087ea:	2000      	movs	r0, #0
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	d0f9      	beq.n	80087ea <__sflush_r+0x1a>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087fc:	682f      	ldr	r7, [r5, #0]
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	d032      	beq.n	8008868 <__sflush_r+0x98>
 8008802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	075a      	lsls	r2, r3, #29
 8008808:	d505      	bpl.n	8008816 <__sflush_r+0x46>
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	1ac0      	subs	r0, r0, r3
 800880e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008810:	b10b      	cbz	r3, 8008816 <__sflush_r+0x46>
 8008812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008814:	1ac0      	subs	r0, r0, r3
 8008816:	2300      	movs	r3, #0
 8008818:	4602      	mov	r2, r0
 800881a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800881c:	6a21      	ldr	r1, [r4, #32]
 800881e:	4628      	mov	r0, r5
 8008820:	47b0      	blx	r6
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	d106      	bne.n	8008836 <__sflush_r+0x66>
 8008828:	6829      	ldr	r1, [r5, #0]
 800882a:	291d      	cmp	r1, #29
 800882c:	d82c      	bhi.n	8008888 <__sflush_r+0xb8>
 800882e:	4a2a      	ldr	r2, [pc, #168]	; (80088d8 <__sflush_r+0x108>)
 8008830:	40ca      	lsrs	r2, r1
 8008832:	07d6      	lsls	r6, r2, #31
 8008834:	d528      	bpl.n	8008888 <__sflush_r+0xb8>
 8008836:	2200      	movs	r2, #0
 8008838:	6062      	str	r2, [r4, #4]
 800883a:	04d9      	lsls	r1, r3, #19
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	6022      	str	r2, [r4, #0]
 8008840:	d504      	bpl.n	800884c <__sflush_r+0x7c>
 8008842:	1c42      	adds	r2, r0, #1
 8008844:	d101      	bne.n	800884a <__sflush_r+0x7a>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	b903      	cbnz	r3, 800884c <__sflush_r+0x7c>
 800884a:	6560      	str	r0, [r4, #84]	; 0x54
 800884c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800884e:	602f      	str	r7, [r5, #0]
 8008850:	2900      	cmp	r1, #0
 8008852:	d0ca      	beq.n	80087ea <__sflush_r+0x1a>
 8008854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008858:	4299      	cmp	r1, r3
 800885a:	d002      	beq.n	8008862 <__sflush_r+0x92>
 800885c:	4628      	mov	r0, r5
 800885e:	f7ff fcf7 	bl	8008250 <_free_r>
 8008862:	2000      	movs	r0, #0
 8008864:	6360      	str	r0, [r4, #52]	; 0x34
 8008866:	e7c1      	b.n	80087ec <__sflush_r+0x1c>
 8008868:	6a21      	ldr	r1, [r4, #32]
 800886a:	2301      	movs	r3, #1
 800886c:	4628      	mov	r0, r5
 800886e:	47b0      	blx	r6
 8008870:	1c41      	adds	r1, r0, #1
 8008872:	d1c7      	bne.n	8008804 <__sflush_r+0x34>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0c4      	beq.n	8008804 <__sflush_r+0x34>
 800887a:	2b1d      	cmp	r3, #29
 800887c:	d001      	beq.n	8008882 <__sflush_r+0xb2>
 800887e:	2b16      	cmp	r3, #22
 8008880:	d101      	bne.n	8008886 <__sflush_r+0xb6>
 8008882:	602f      	str	r7, [r5, #0]
 8008884:	e7b1      	b.n	80087ea <__sflush_r+0x1a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	e7ad      	b.n	80087ec <__sflush_r+0x1c>
 8008890:	690f      	ldr	r7, [r1, #16]
 8008892:	2f00      	cmp	r7, #0
 8008894:	d0a9      	beq.n	80087ea <__sflush_r+0x1a>
 8008896:	0793      	lsls	r3, r2, #30
 8008898:	680e      	ldr	r6, [r1, #0]
 800889a:	bf08      	it	eq
 800889c:	694b      	ldreq	r3, [r1, #20]
 800889e:	600f      	str	r7, [r1, #0]
 80088a0:	bf18      	it	ne
 80088a2:	2300      	movne	r3, #0
 80088a4:	eba6 0807 	sub.w	r8, r6, r7
 80088a8:	608b      	str	r3, [r1, #8]
 80088aa:	f1b8 0f00 	cmp.w	r8, #0
 80088ae:	dd9c      	ble.n	80087ea <__sflush_r+0x1a>
 80088b0:	6a21      	ldr	r1, [r4, #32]
 80088b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088b4:	4643      	mov	r3, r8
 80088b6:	463a      	mov	r2, r7
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b0      	blx	r6
 80088bc:	2800      	cmp	r0, #0
 80088be:	dc06      	bgt.n	80088ce <__sflush_r+0xfe>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e78e      	b.n	80087ec <__sflush_r+0x1c>
 80088ce:	4407      	add	r7, r0
 80088d0:	eba8 0800 	sub.w	r8, r8, r0
 80088d4:	e7e9      	b.n	80088aa <__sflush_r+0xda>
 80088d6:	bf00      	nop
 80088d8:	20400001 	.word	0x20400001

080088dc <_fflush_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	b913      	cbnz	r3, 80088ec <_fflush_r+0x10>
 80088e6:	2500      	movs	r5, #0
 80088e8:	4628      	mov	r0, r5
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	b118      	cbz	r0, 80088f6 <_fflush_r+0x1a>
 80088ee:	6983      	ldr	r3, [r0, #24]
 80088f0:	b90b      	cbnz	r3, 80088f6 <_fflush_r+0x1a>
 80088f2:	f7ff fbc1 	bl	8008078 <__sinit>
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <_fflush_r+0x6c>)
 80088f8:	429c      	cmp	r4, r3
 80088fa:	d11b      	bne.n	8008934 <_fflush_r+0x58>
 80088fc:	686c      	ldr	r4, [r5, #4]
 80088fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0ef      	beq.n	80088e6 <_fflush_r+0xa>
 8008906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008908:	07d0      	lsls	r0, r2, #31
 800890a:	d404      	bmi.n	8008916 <_fflush_r+0x3a>
 800890c:	0599      	lsls	r1, r3, #22
 800890e:	d402      	bmi.n	8008916 <_fflush_r+0x3a>
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	f7ff fc74 	bl	80081fe <__retarget_lock_acquire_recursive>
 8008916:	4628      	mov	r0, r5
 8008918:	4621      	mov	r1, r4
 800891a:	f7ff ff59 	bl	80087d0 <__sflush_r>
 800891e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008920:	07da      	lsls	r2, r3, #31
 8008922:	4605      	mov	r5, r0
 8008924:	d4e0      	bmi.n	80088e8 <_fflush_r+0xc>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	059b      	lsls	r3, r3, #22
 800892a:	d4dd      	bmi.n	80088e8 <_fflush_r+0xc>
 800892c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800892e:	f7ff fc67 	bl	8008200 <__retarget_lock_release_recursive>
 8008932:	e7d9      	b.n	80088e8 <_fflush_r+0xc>
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <_fflush_r+0x70>)
 8008936:	429c      	cmp	r4, r3
 8008938:	d101      	bne.n	800893e <_fflush_r+0x62>
 800893a:	68ac      	ldr	r4, [r5, #8]
 800893c:	e7df      	b.n	80088fe <_fflush_r+0x22>
 800893e:	4b04      	ldr	r3, [pc, #16]	; (8008950 <_fflush_r+0x74>)
 8008940:	429c      	cmp	r4, r3
 8008942:	bf08      	it	eq
 8008944:	68ec      	ldreq	r4, [r5, #12]
 8008946:	e7da      	b.n	80088fe <_fflush_r+0x22>
 8008948:	08009d40 	.word	0x08009d40
 800894c:	08009d60 	.word	0x08009d60
 8008950:	08009d20 	.word	0x08009d20

08008954 <fiprintf>:
 8008954:	b40e      	push	{r1, r2, r3}
 8008956:	b503      	push	{r0, r1, lr}
 8008958:	4601      	mov	r1, r0
 800895a:	ab03      	add	r3, sp, #12
 800895c:	4805      	ldr	r0, [pc, #20]	; (8008974 <fiprintf+0x20>)
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	f000 f9ab 	bl	8008cc0 <_vfiprintf_r>
 800896a:	b002      	add	sp, #8
 800896c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008970:	b003      	add	sp, #12
 8008972:	4770      	bx	lr
 8008974:	20000010 	.word	0x20000010

08008978 <_lseek_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_lseek_r+0x20>)
 800897c:	4604      	mov	r4, r0
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	2200      	movs	r2, #0
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f7f9 feda 	bl	8002740 <_lseek>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_lseek_r+0x1e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_lseek_r+0x1e>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200043fc 	.word	0x200043fc

0800899c <__malloc_lock>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__malloc_lock+0x8>)
 800899e:	f7ff bc2e 	b.w	80081fe <__retarget_lock_acquire_recursive>
 80089a2:	bf00      	nop
 80089a4:	200043f4 	.word	0x200043f4

080089a8 <__malloc_unlock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__malloc_unlock+0x8>)
 80089aa:	f7ff bc29 	b.w	8008200 <__retarget_lock_release_recursive>
 80089ae:	bf00      	nop
 80089b0:	200043f4 	.word	0x200043f4

080089b4 <__ssputs_r>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	688e      	ldr	r6, [r1, #8]
 80089ba:	429e      	cmp	r6, r3
 80089bc:	4682      	mov	sl, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	4690      	mov	r8, r2
 80089c2:	461f      	mov	r7, r3
 80089c4:	d838      	bhi.n	8008a38 <__ssputs_r+0x84>
 80089c6:	898a      	ldrh	r2, [r1, #12]
 80089c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089cc:	d032      	beq.n	8008a34 <__ssputs_r+0x80>
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	6909      	ldr	r1, [r1, #16]
 80089d2:	eba5 0901 	sub.w	r9, r5, r1
 80089d6:	6965      	ldr	r5, [r4, #20]
 80089d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e0:	3301      	adds	r3, #1
 80089e2:	444b      	add	r3, r9
 80089e4:	106d      	asrs	r5, r5, #1
 80089e6:	429d      	cmp	r5, r3
 80089e8:	bf38      	it	cc
 80089ea:	461d      	movcc	r5, r3
 80089ec:	0553      	lsls	r3, r2, #21
 80089ee:	d531      	bpl.n	8008a54 <__ssputs_r+0xa0>
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7ff fc7d 	bl	80082f0 <_malloc_r>
 80089f6:	4606      	mov	r6, r0
 80089f8:	b950      	cbnz	r0, 8008a10 <__ssputs_r+0x5c>
 80089fa:	230c      	movs	r3, #12
 80089fc:	f8ca 3000 	str.w	r3, [sl]
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a06:	81a3      	strh	r3, [r4, #12]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a10:	6921      	ldr	r1, [r4, #16]
 8008a12:	464a      	mov	r2, r9
 8008a14:	f7ff fc06 	bl	8008224 <memcpy>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	6126      	str	r6, [r4, #16]
 8008a26:	6165      	str	r5, [r4, #20]
 8008a28:	444e      	add	r6, r9
 8008a2a:	eba5 0509 	sub.w	r5, r5, r9
 8008a2e:	6026      	str	r6, [r4, #0]
 8008a30:	60a5      	str	r5, [r4, #8]
 8008a32:	463e      	mov	r6, r7
 8008a34:	42be      	cmp	r6, r7
 8008a36:	d900      	bls.n	8008a3a <__ssputs_r+0x86>
 8008a38:	463e      	mov	r6, r7
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	4641      	mov	r1, r8
 8008a40:	f000 fd40 	bl	80094c4 <memmove>
 8008a44:	68a3      	ldr	r3, [r4, #8]
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	1b9b      	subs	r3, r3, r6
 8008a4a:	4432      	add	r2, r6
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	2000      	movs	r0, #0
 8008a52:	e7db      	b.n	8008a0c <__ssputs_r+0x58>
 8008a54:	462a      	mov	r2, r5
 8008a56:	f000 fd4f 	bl	80094f8 <_realloc_r>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1e1      	bne.n	8008a24 <__ssputs_r+0x70>
 8008a60:	6921      	ldr	r1, [r4, #16]
 8008a62:	4650      	mov	r0, sl
 8008a64:	f7ff fbf4 	bl	8008250 <_free_r>
 8008a68:	e7c7      	b.n	80089fa <__ssputs_r+0x46>
	...

08008a6c <_svfiprintf_r>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	4698      	mov	r8, r3
 8008a72:	898b      	ldrh	r3, [r1, #12]
 8008a74:	061b      	lsls	r3, r3, #24
 8008a76:	b09d      	sub	sp, #116	; 0x74
 8008a78:	4607      	mov	r7, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	d50e      	bpl.n	8008a9e <_svfiprintf_r+0x32>
 8008a80:	690b      	ldr	r3, [r1, #16]
 8008a82:	b963      	cbnz	r3, 8008a9e <_svfiprintf_r+0x32>
 8008a84:	2140      	movs	r1, #64	; 0x40
 8008a86:	f7ff fc33 	bl	80082f0 <_malloc_r>
 8008a8a:	6028      	str	r0, [r5, #0]
 8008a8c:	6128      	str	r0, [r5, #16]
 8008a8e:	b920      	cbnz	r0, 8008a9a <_svfiprintf_r+0x2e>
 8008a90:	230c      	movs	r3, #12
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	e0d1      	b.n	8008c3e <_svfiprintf_r+0x1d2>
 8008a9a:	2340      	movs	r3, #64	; 0x40
 8008a9c:	616b      	str	r3, [r5, #20]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa2:	2320      	movs	r3, #32
 8008aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aac:	2330      	movs	r3, #48	; 0x30
 8008aae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c58 <_svfiprintf_r+0x1ec>
 8008ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab6:	f04f 0901 	mov.w	r9, #1
 8008aba:	4623      	mov	r3, r4
 8008abc:	469a      	mov	sl, r3
 8008abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac2:	b10a      	cbz	r2, 8008ac8 <_svfiprintf_r+0x5c>
 8008ac4:	2a25      	cmp	r2, #37	; 0x25
 8008ac6:	d1f9      	bne.n	8008abc <_svfiprintf_r+0x50>
 8008ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8008acc:	d00b      	beq.n	8008ae6 <_svfiprintf_r+0x7a>
 8008ace:	465b      	mov	r3, fp
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ff6d 	bl	80089b4 <__ssputs_r>
 8008ada:	3001      	adds	r0, #1
 8008adc:	f000 80aa 	beq.w	8008c34 <_svfiprintf_r+0x1c8>
 8008ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae2:	445a      	add	r2, fp
 8008ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80a2 	beq.w	8008c34 <_svfiprintf_r+0x1c8>
 8008af0:	2300      	movs	r3, #0
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295
 8008af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afa:	f10a 0a01 	add.w	sl, sl, #1
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b06:	931a      	str	r3, [sp, #104]	; 0x68
 8008b08:	4654      	mov	r4, sl
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b10:	4851      	ldr	r0, [pc, #324]	; (8008c58 <_svfiprintf_r+0x1ec>)
 8008b12:	f7f7 fb6d 	bl	80001f0 <memchr>
 8008b16:	9a04      	ldr	r2, [sp, #16]
 8008b18:	b9d8      	cbnz	r0, 8008b52 <_svfiprintf_r+0xe6>
 8008b1a:	06d0      	lsls	r0, r2, #27
 8008b1c:	bf44      	itt	mi
 8008b1e:	2320      	movmi	r3, #32
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b24:	0711      	lsls	r1, r2, #28
 8008b26:	bf44      	itt	mi
 8008b28:	232b      	movmi	r3, #43	; 0x2b
 8008b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b32:	2b2a      	cmp	r3, #42	; 0x2a
 8008b34:	d015      	beq.n	8008b62 <_svfiprintf_r+0xf6>
 8008b36:	9a07      	ldr	r2, [sp, #28]
 8008b38:	4654      	mov	r4, sl
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f04f 0c0a 	mov.w	ip, #10
 8008b40:	4621      	mov	r1, r4
 8008b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b46:	3b30      	subs	r3, #48	; 0x30
 8008b48:	2b09      	cmp	r3, #9
 8008b4a:	d94e      	bls.n	8008bea <_svfiprintf_r+0x17e>
 8008b4c:	b1b0      	cbz	r0, 8008b7c <_svfiprintf_r+0x110>
 8008b4e:	9207      	str	r2, [sp, #28]
 8008b50:	e014      	b.n	8008b7c <_svfiprintf_r+0x110>
 8008b52:	eba0 0308 	sub.w	r3, r0, r8
 8008b56:	fa09 f303 	lsl.w	r3, r9, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	46a2      	mov	sl, r4
 8008b60:	e7d2      	b.n	8008b08 <_svfiprintf_r+0x9c>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	1d19      	adds	r1, r3, #4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9103      	str	r1, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbb      	ittet	lt
 8008b6e:	425b      	neglt	r3, r3
 8008b70:	f042 0202 	orrlt.w	r2, r2, #2
 8008b74:	9307      	strge	r3, [sp, #28]
 8008b76:	9307      	strlt	r3, [sp, #28]
 8008b78:	bfb8      	it	lt
 8008b7a:	9204      	strlt	r2, [sp, #16]
 8008b7c:	7823      	ldrb	r3, [r4, #0]
 8008b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b80:	d10c      	bne.n	8008b9c <_svfiprintf_r+0x130>
 8008b82:	7863      	ldrb	r3, [r4, #1]
 8008b84:	2b2a      	cmp	r3, #42	; 0x2a
 8008b86:	d135      	bne.n	8008bf4 <_svfiprintf_r+0x188>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	1d1a      	adds	r2, r3, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	9203      	str	r2, [sp, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bfb8      	it	lt
 8008b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b98:	3402      	adds	r4, #2
 8008b9a:	9305      	str	r3, [sp, #20]
 8008b9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c68 <_svfiprintf_r+0x1fc>
 8008ba0:	7821      	ldrb	r1, [r4, #0]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	f7f7 fb23 	bl	80001f0 <memchr>
 8008baa:	b140      	cbz	r0, 8008bbe <_svfiprintf_r+0x152>
 8008bac:	2340      	movs	r3, #64	; 0x40
 8008bae:	eba0 000a 	sub.w	r0, r0, sl
 8008bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	4303      	orrs	r3, r0
 8008bba:	3401      	adds	r4, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc2:	4826      	ldr	r0, [pc, #152]	; (8008c5c <_svfiprintf_r+0x1f0>)
 8008bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc8:	2206      	movs	r2, #6
 8008bca:	f7f7 fb11 	bl	80001f0 <memchr>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d038      	beq.n	8008c44 <_svfiprintf_r+0x1d8>
 8008bd2:	4b23      	ldr	r3, [pc, #140]	; (8008c60 <_svfiprintf_r+0x1f4>)
 8008bd4:	bb1b      	cbnz	r3, 8008c1e <_svfiprintf_r+0x1b2>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	3308      	adds	r3, #8
 8008be0:	9303      	str	r3, [sp, #12]
 8008be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be4:	4433      	add	r3, r6
 8008be6:	9309      	str	r3, [sp, #36]	; 0x24
 8008be8:	e767      	b.n	8008aba <_svfiprintf_r+0x4e>
 8008bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bee:	460c      	mov	r4, r1
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	e7a5      	b.n	8008b40 <_svfiprintf_r+0xd4>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f04f 0c0a 	mov.w	ip, #10
 8008c00:	4620      	mov	r0, r4
 8008c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c06:	3a30      	subs	r2, #48	; 0x30
 8008c08:	2a09      	cmp	r2, #9
 8008c0a:	d903      	bls.n	8008c14 <_svfiprintf_r+0x1a8>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0c5      	beq.n	8008b9c <_svfiprintf_r+0x130>
 8008c10:	9105      	str	r1, [sp, #20]
 8008c12:	e7c3      	b.n	8008b9c <_svfiprintf_r+0x130>
 8008c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c18:	4604      	mov	r4, r0
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e7f0      	b.n	8008c00 <_svfiprintf_r+0x194>
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	462a      	mov	r2, r5
 8008c24:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <_svfiprintf_r+0x1f8>)
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f3af 8000 	nop.w
 8008c2e:	1c42      	adds	r2, r0, #1
 8008c30:	4606      	mov	r6, r0
 8008c32:	d1d6      	bne.n	8008be2 <_svfiprintf_r+0x176>
 8008c34:	89ab      	ldrh	r3, [r5, #12]
 8008c36:	065b      	lsls	r3, r3, #25
 8008c38:	f53f af2c 	bmi.w	8008a94 <_svfiprintf_r+0x28>
 8008c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c3e:	b01d      	add	sp, #116	; 0x74
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	ab03      	add	r3, sp, #12
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <_svfiprintf_r+0x1f8>)
 8008c4c:	a904      	add	r1, sp, #16
 8008c4e:	4638      	mov	r0, r7
 8008c50:	f000 f9d4 	bl	8008ffc <_printf_i>
 8008c54:	e7eb      	b.n	8008c2e <_svfiprintf_r+0x1c2>
 8008c56:	bf00      	nop
 8008c58:	08009f39 	.word	0x08009f39
 8008c5c:	08009f43 	.word	0x08009f43
 8008c60:	00000000 	.word	0x00000000
 8008c64:	080089b5 	.word	0x080089b5
 8008c68:	08009f3f 	.word	0x08009f3f

08008c6c <__sfputc_r>:
 8008c6c:	6893      	ldr	r3, [r2, #8]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	b410      	push	{r4}
 8008c74:	6093      	str	r3, [r2, #8]
 8008c76:	da08      	bge.n	8008c8a <__sfputc_r+0x1e>
 8008c78:	6994      	ldr	r4, [r2, #24]
 8008c7a:	42a3      	cmp	r3, r4
 8008c7c:	db01      	blt.n	8008c82 <__sfputc_r+0x16>
 8008c7e:	290a      	cmp	r1, #10
 8008c80:	d103      	bne.n	8008c8a <__sfputc_r+0x1e>
 8008c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c86:	f000 baf1 	b.w	800926c <__swbuf_r>
 8008c8a:	6813      	ldr	r3, [r2, #0]
 8008c8c:	1c58      	adds	r0, r3, #1
 8008c8e:	6010      	str	r0, [r2, #0]
 8008c90:	7019      	strb	r1, [r3, #0]
 8008c92:	4608      	mov	r0, r1
 8008c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <__sfputs_r>:
 8008c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	18d5      	adds	r5, r2, r3
 8008ca4:	42ac      	cmp	r4, r5
 8008ca6:	d101      	bne.n	8008cac <__sfputs_r+0x12>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e007      	b.n	8008cbc <__sfputs_r+0x22>
 8008cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb0:	463a      	mov	r2, r7
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ffda 	bl	8008c6c <__sfputc_r>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d1f3      	bne.n	8008ca4 <__sfputs_r+0xa>
 8008cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cc0 <_vfiprintf_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	4614      	mov	r4, r2
 8008cca:	4698      	mov	r8, r3
 8008ccc:	4606      	mov	r6, r0
 8008cce:	b118      	cbz	r0, 8008cd8 <_vfiprintf_r+0x18>
 8008cd0:	6983      	ldr	r3, [r0, #24]
 8008cd2:	b90b      	cbnz	r3, 8008cd8 <_vfiprintf_r+0x18>
 8008cd4:	f7ff f9d0 	bl	8008078 <__sinit>
 8008cd8:	4b89      	ldr	r3, [pc, #548]	; (8008f00 <_vfiprintf_r+0x240>)
 8008cda:	429d      	cmp	r5, r3
 8008cdc:	d11b      	bne.n	8008d16 <_vfiprintf_r+0x56>
 8008cde:	6875      	ldr	r5, [r6, #4]
 8008ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	d405      	bmi.n	8008cf2 <_vfiprintf_r+0x32>
 8008ce6:	89ab      	ldrh	r3, [r5, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d402      	bmi.n	8008cf2 <_vfiprintf_r+0x32>
 8008cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cee:	f7ff fa86 	bl	80081fe <__retarget_lock_acquire_recursive>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	071b      	lsls	r3, r3, #28
 8008cf6:	d501      	bpl.n	8008cfc <_vfiprintf_r+0x3c>
 8008cf8:	692b      	ldr	r3, [r5, #16]
 8008cfa:	b9eb      	cbnz	r3, 8008d38 <_vfiprintf_r+0x78>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f000 fb06 	bl	8009310 <__swsetup_r>
 8008d04:	b1c0      	cbz	r0, 8008d38 <_vfiprintf_r+0x78>
 8008d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d08:	07dc      	lsls	r4, r3, #31
 8008d0a:	d50e      	bpl.n	8008d2a <_vfiprintf_r+0x6a>
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b01d      	add	sp, #116	; 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	4b7b      	ldr	r3, [pc, #492]	; (8008f04 <_vfiprintf_r+0x244>)
 8008d18:	429d      	cmp	r5, r3
 8008d1a:	d101      	bne.n	8008d20 <_vfiprintf_r+0x60>
 8008d1c:	68b5      	ldr	r5, [r6, #8]
 8008d1e:	e7df      	b.n	8008ce0 <_vfiprintf_r+0x20>
 8008d20:	4b79      	ldr	r3, [pc, #484]	; (8008f08 <_vfiprintf_r+0x248>)
 8008d22:	429d      	cmp	r5, r3
 8008d24:	bf08      	it	eq
 8008d26:	68f5      	ldreq	r5, [r6, #12]
 8008d28:	e7da      	b.n	8008ce0 <_vfiprintf_r+0x20>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	0598      	lsls	r0, r3, #22
 8008d2e:	d4ed      	bmi.n	8008d0c <_vfiprintf_r+0x4c>
 8008d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d32:	f7ff fa65 	bl	8008200 <__retarget_lock_release_recursive>
 8008d36:	e7e9      	b.n	8008d0c <_vfiprintf_r+0x4c>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d46:	2330      	movs	r3, #48	; 0x30
 8008d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f0c <_vfiprintf_r+0x24c>
 8008d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d50:	f04f 0901 	mov.w	r9, #1
 8008d54:	4623      	mov	r3, r4
 8008d56:	469a      	mov	sl, r3
 8008d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d5c:	b10a      	cbz	r2, 8008d62 <_vfiprintf_r+0xa2>
 8008d5e:	2a25      	cmp	r2, #37	; 0x25
 8008d60:	d1f9      	bne.n	8008d56 <_vfiprintf_r+0x96>
 8008d62:	ebba 0b04 	subs.w	fp, sl, r4
 8008d66:	d00b      	beq.n	8008d80 <_vfiprintf_r+0xc0>
 8008d68:	465b      	mov	r3, fp
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ff93 	bl	8008c9a <__sfputs_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	f000 80aa 	beq.w	8008ece <_vfiprintf_r+0x20e>
 8008d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d7c:	445a      	add	r2, fp
 8008d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d80:	f89a 3000 	ldrb.w	r3, [sl]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80a2 	beq.w	8008ece <_vfiprintf_r+0x20e>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d94:	f10a 0a01 	add.w	sl, sl, #1
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008da0:	931a      	str	r3, [sp, #104]	; 0x68
 8008da2:	4654      	mov	r4, sl
 8008da4:	2205      	movs	r2, #5
 8008da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008daa:	4858      	ldr	r0, [pc, #352]	; (8008f0c <_vfiprintf_r+0x24c>)
 8008dac:	f7f7 fa20 	bl	80001f0 <memchr>
 8008db0:	9a04      	ldr	r2, [sp, #16]
 8008db2:	b9d8      	cbnz	r0, 8008dec <_vfiprintf_r+0x12c>
 8008db4:	06d1      	lsls	r1, r2, #27
 8008db6:	bf44      	itt	mi
 8008db8:	2320      	movmi	r3, #32
 8008dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbe:	0713      	lsls	r3, r2, #28
 8008dc0:	bf44      	itt	mi
 8008dc2:	232b      	movmi	r3, #43	; 0x2b
 8008dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dce:	d015      	beq.n	8008dfc <_vfiprintf_r+0x13c>
 8008dd0:	9a07      	ldr	r2, [sp, #28]
 8008dd2:	4654      	mov	r4, sl
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f04f 0c0a 	mov.w	ip, #10
 8008dda:	4621      	mov	r1, r4
 8008ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de0:	3b30      	subs	r3, #48	; 0x30
 8008de2:	2b09      	cmp	r3, #9
 8008de4:	d94e      	bls.n	8008e84 <_vfiprintf_r+0x1c4>
 8008de6:	b1b0      	cbz	r0, 8008e16 <_vfiprintf_r+0x156>
 8008de8:	9207      	str	r2, [sp, #28]
 8008dea:	e014      	b.n	8008e16 <_vfiprintf_r+0x156>
 8008dec:	eba0 0308 	sub.w	r3, r0, r8
 8008df0:	fa09 f303 	lsl.w	r3, r9, r3
 8008df4:	4313      	orrs	r3, r2
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	46a2      	mov	sl, r4
 8008dfa:	e7d2      	b.n	8008da2 <_vfiprintf_r+0xe2>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	1d19      	adds	r1, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	9103      	str	r1, [sp, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfbb      	ittet	lt
 8008e08:	425b      	neglt	r3, r3
 8008e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e0e:	9307      	strge	r3, [sp, #28]
 8008e10:	9307      	strlt	r3, [sp, #28]
 8008e12:	bfb8      	it	lt
 8008e14:	9204      	strlt	r2, [sp, #16]
 8008e16:	7823      	ldrb	r3, [r4, #0]
 8008e18:	2b2e      	cmp	r3, #46	; 0x2e
 8008e1a:	d10c      	bne.n	8008e36 <_vfiprintf_r+0x176>
 8008e1c:	7863      	ldrb	r3, [r4, #1]
 8008e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e20:	d135      	bne.n	8008e8e <_vfiprintf_r+0x1ce>
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	1d1a      	adds	r2, r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	9203      	str	r2, [sp, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfb8      	it	lt
 8008e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e32:	3402      	adds	r4, #2
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f1c <_vfiprintf_r+0x25c>
 8008e3a:	7821      	ldrb	r1, [r4, #0]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	4650      	mov	r0, sl
 8008e40:	f7f7 f9d6 	bl	80001f0 <memchr>
 8008e44:	b140      	cbz	r0, 8008e58 <_vfiprintf_r+0x198>
 8008e46:	2340      	movs	r3, #64	; 0x40
 8008e48:	eba0 000a 	sub.w	r0, r0, sl
 8008e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	4303      	orrs	r3, r0
 8008e54:	3401      	adds	r4, #1
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5c:	482c      	ldr	r0, [pc, #176]	; (8008f10 <_vfiprintf_r+0x250>)
 8008e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e62:	2206      	movs	r2, #6
 8008e64:	f7f7 f9c4 	bl	80001f0 <memchr>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d03f      	beq.n	8008eec <_vfiprintf_r+0x22c>
 8008e6c:	4b29      	ldr	r3, [pc, #164]	; (8008f14 <_vfiprintf_r+0x254>)
 8008e6e:	bb1b      	cbnz	r3, 8008eb8 <_vfiprintf_r+0x1f8>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	3307      	adds	r3, #7
 8008e74:	f023 0307 	bic.w	r3, r3, #7
 8008e78:	3308      	adds	r3, #8
 8008e7a:	9303      	str	r3, [sp, #12]
 8008e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7e:	443b      	add	r3, r7
 8008e80:	9309      	str	r3, [sp, #36]	; 0x24
 8008e82:	e767      	b.n	8008d54 <_vfiprintf_r+0x94>
 8008e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e88:	460c      	mov	r4, r1
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	e7a5      	b.n	8008dda <_vfiprintf_r+0x11a>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	3401      	adds	r4, #1
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	4619      	mov	r1, r3
 8008e96:	f04f 0c0a 	mov.w	ip, #10
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea0:	3a30      	subs	r2, #48	; 0x30
 8008ea2:	2a09      	cmp	r2, #9
 8008ea4:	d903      	bls.n	8008eae <_vfiprintf_r+0x1ee>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0c5      	beq.n	8008e36 <_vfiprintf_r+0x176>
 8008eaa:	9105      	str	r1, [sp, #20]
 8008eac:	e7c3      	b.n	8008e36 <_vfiprintf_r+0x176>
 8008eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e7f0      	b.n	8008e9a <_vfiprintf_r+0x1da>
 8008eb8:	ab03      	add	r3, sp, #12
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4b16      	ldr	r3, [pc, #88]	; (8008f18 <_vfiprintf_r+0x258>)
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f3af 8000 	nop.w
 8008ec8:	4607      	mov	r7, r0
 8008eca:	1c78      	adds	r0, r7, #1
 8008ecc:	d1d6      	bne.n	8008e7c <_vfiprintf_r+0x1bc>
 8008ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed0:	07d9      	lsls	r1, r3, #31
 8008ed2:	d405      	bmi.n	8008ee0 <_vfiprintf_r+0x220>
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	059a      	lsls	r2, r3, #22
 8008ed8:	d402      	bmi.n	8008ee0 <_vfiprintf_r+0x220>
 8008eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008edc:	f7ff f990 	bl	8008200 <__retarget_lock_release_recursive>
 8008ee0:	89ab      	ldrh	r3, [r5, #12]
 8008ee2:	065b      	lsls	r3, r3, #25
 8008ee4:	f53f af12 	bmi.w	8008d0c <_vfiprintf_r+0x4c>
 8008ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eea:	e711      	b.n	8008d10 <_vfiprintf_r+0x50>
 8008eec:	ab03      	add	r3, sp, #12
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <_vfiprintf_r+0x258>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f880 	bl	8008ffc <_printf_i>
 8008efc:	e7e4      	b.n	8008ec8 <_vfiprintf_r+0x208>
 8008efe:	bf00      	nop
 8008f00:	08009d40 	.word	0x08009d40
 8008f04:	08009d60 	.word	0x08009d60
 8008f08:	08009d20 	.word	0x08009d20
 8008f0c:	08009f39 	.word	0x08009f39
 8008f10:	08009f43 	.word	0x08009f43
 8008f14:	00000000 	.word	0x00000000
 8008f18:	08008c9b 	.word	0x08008c9b
 8008f1c:	08009f3f 	.word	0x08009f3f

08008f20 <_printf_common>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	4616      	mov	r6, r2
 8008f26:	4699      	mov	r9, r3
 8008f28:	688a      	ldr	r2, [r1, #8]
 8008f2a:	690b      	ldr	r3, [r1, #16]
 8008f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bfb8      	it	lt
 8008f34:	4613      	movlt	r3, r2
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	b10a      	cbz	r2, 8008f46 <_printf_common+0x26>
 8008f42:	3301      	adds	r3, #1
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	0699      	lsls	r1, r3, #26
 8008f4a:	bf42      	ittt	mi
 8008f4c:	6833      	ldrmi	r3, [r6, #0]
 8008f4e:	3302      	addmi	r3, #2
 8008f50:	6033      	strmi	r3, [r6, #0]
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	f015 0506 	ands.w	r5, r5, #6
 8008f58:	d106      	bne.n	8008f68 <_printf_common+0x48>
 8008f5a:	f104 0a19 	add.w	sl, r4, #25
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	6832      	ldr	r2, [r6, #0]
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dc26      	bgt.n	8008fb6 <_printf_common+0x96>
 8008f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f6c:	1e13      	subs	r3, r2, #0
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	bf18      	it	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	0692      	lsls	r2, r2, #26
 8008f76:	d42b      	bmi.n	8008fd0 <_printf_common+0xb0>
 8008f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	3001      	adds	r0, #1
 8008f84:	d01e      	beq.n	8008fc4 <_printf_common+0xa4>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	68e5      	ldr	r5, [r4, #12]
 8008f8a:	6832      	ldr	r2, [r6, #0]
 8008f8c:	f003 0306 	and.w	r3, r3, #6
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	bf08      	it	eq
 8008f94:	1aad      	subeq	r5, r5, r2
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	bf0c      	ite	eq
 8008f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa0:	2500      	movne	r5, #0
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	bfc4      	itt	gt
 8008fa6:	1a9b      	subgt	r3, r3, r2
 8008fa8:	18ed      	addgt	r5, r5, r3
 8008faa:	2600      	movs	r6, #0
 8008fac:	341a      	adds	r4, #26
 8008fae:	42b5      	cmp	r5, r6
 8008fb0:	d11a      	bne.n	8008fe8 <_printf_common+0xc8>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e008      	b.n	8008fc8 <_printf_common+0xa8>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4652      	mov	r2, sl
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	47c0      	blx	r8
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d103      	bne.n	8008fcc <_printf_common+0xac>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7c6      	b.n	8008f5e <_printf_common+0x3e>
 8008fd0:	18e1      	adds	r1, r4, r3
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	2030      	movs	r0, #48	; 0x30
 8008fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fda:	4422      	add	r2, r4
 8008fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	e7c7      	b.n	8008f78 <_printf_common+0x58>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4622      	mov	r2, r4
 8008fec:	4649      	mov	r1, r9
 8008fee:	4638      	mov	r0, r7
 8008ff0:	47c0      	blx	r8
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d0e6      	beq.n	8008fc4 <_printf_common+0xa4>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7d9      	b.n	8008fae <_printf_common+0x8e>
	...

08008ffc <_printf_i>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	460c      	mov	r4, r1
 8009002:	4691      	mov	r9, r2
 8009004:	7e27      	ldrb	r7, [r4, #24]
 8009006:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009008:	2f78      	cmp	r7, #120	; 0x78
 800900a:	4680      	mov	r8, r0
 800900c:	469a      	mov	sl, r3
 800900e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009012:	d807      	bhi.n	8009024 <_printf_i+0x28>
 8009014:	2f62      	cmp	r7, #98	; 0x62
 8009016:	d80a      	bhi.n	800902e <_printf_i+0x32>
 8009018:	2f00      	cmp	r7, #0
 800901a:	f000 80d8 	beq.w	80091ce <_printf_i+0x1d2>
 800901e:	2f58      	cmp	r7, #88	; 0x58
 8009020:	f000 80a3 	beq.w	800916a <_printf_i+0x16e>
 8009024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800902c:	e03a      	b.n	80090a4 <_printf_i+0xa8>
 800902e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009032:	2b15      	cmp	r3, #21
 8009034:	d8f6      	bhi.n	8009024 <_printf_i+0x28>
 8009036:	a001      	add	r0, pc, #4	; (adr r0, 800903c <_printf_i+0x40>)
 8009038:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800903c:	08009095 	.word	0x08009095
 8009040:	080090a9 	.word	0x080090a9
 8009044:	08009025 	.word	0x08009025
 8009048:	08009025 	.word	0x08009025
 800904c:	08009025 	.word	0x08009025
 8009050:	08009025 	.word	0x08009025
 8009054:	080090a9 	.word	0x080090a9
 8009058:	08009025 	.word	0x08009025
 800905c:	08009025 	.word	0x08009025
 8009060:	08009025 	.word	0x08009025
 8009064:	08009025 	.word	0x08009025
 8009068:	080091b5 	.word	0x080091b5
 800906c:	080090d9 	.word	0x080090d9
 8009070:	08009197 	.word	0x08009197
 8009074:	08009025 	.word	0x08009025
 8009078:	08009025 	.word	0x08009025
 800907c:	080091d7 	.word	0x080091d7
 8009080:	08009025 	.word	0x08009025
 8009084:	080090d9 	.word	0x080090d9
 8009088:	08009025 	.word	0x08009025
 800908c:	08009025 	.word	0x08009025
 8009090:	0800919f 	.word	0x0800919f
 8009094:	680b      	ldr	r3, [r1, #0]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	600a      	str	r2, [r1, #0]
 800909c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a4:	2301      	movs	r3, #1
 80090a6:	e0a3      	b.n	80091f0 <_printf_i+0x1f4>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	6808      	ldr	r0, [r1, #0]
 80090ac:	062e      	lsls	r6, r5, #24
 80090ae:	f100 0304 	add.w	r3, r0, #4
 80090b2:	d50a      	bpl.n	80090ca <_printf_i+0xce>
 80090b4:	6805      	ldr	r5, [r0, #0]
 80090b6:	600b      	str	r3, [r1, #0]
 80090b8:	2d00      	cmp	r5, #0
 80090ba:	da03      	bge.n	80090c4 <_printf_i+0xc8>
 80090bc:	232d      	movs	r3, #45	; 0x2d
 80090be:	426d      	negs	r5, r5
 80090c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c4:	485e      	ldr	r0, [pc, #376]	; (8009240 <_printf_i+0x244>)
 80090c6:	230a      	movs	r3, #10
 80090c8:	e019      	b.n	80090fe <_printf_i+0x102>
 80090ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090ce:	6805      	ldr	r5, [r0, #0]
 80090d0:	600b      	str	r3, [r1, #0]
 80090d2:	bf18      	it	ne
 80090d4:	b22d      	sxthne	r5, r5
 80090d6:	e7ef      	b.n	80090b8 <_printf_i+0xbc>
 80090d8:	680b      	ldr	r3, [r1, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	1d18      	adds	r0, r3, #4
 80090de:	6008      	str	r0, [r1, #0]
 80090e0:	0628      	lsls	r0, r5, #24
 80090e2:	d501      	bpl.n	80090e8 <_printf_i+0xec>
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	e002      	b.n	80090ee <_printf_i+0xf2>
 80090e8:	0669      	lsls	r1, r5, #25
 80090ea:	d5fb      	bpl.n	80090e4 <_printf_i+0xe8>
 80090ec:	881d      	ldrh	r5, [r3, #0]
 80090ee:	4854      	ldr	r0, [pc, #336]	; (8009240 <_printf_i+0x244>)
 80090f0:	2f6f      	cmp	r7, #111	; 0x6f
 80090f2:	bf0c      	ite	eq
 80090f4:	2308      	moveq	r3, #8
 80090f6:	230a      	movne	r3, #10
 80090f8:	2100      	movs	r1, #0
 80090fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090fe:	6866      	ldr	r6, [r4, #4]
 8009100:	60a6      	str	r6, [r4, #8]
 8009102:	2e00      	cmp	r6, #0
 8009104:	bfa2      	ittt	ge
 8009106:	6821      	ldrge	r1, [r4, #0]
 8009108:	f021 0104 	bicge.w	r1, r1, #4
 800910c:	6021      	strge	r1, [r4, #0]
 800910e:	b90d      	cbnz	r5, 8009114 <_printf_i+0x118>
 8009110:	2e00      	cmp	r6, #0
 8009112:	d04d      	beq.n	80091b0 <_printf_i+0x1b4>
 8009114:	4616      	mov	r6, r2
 8009116:	fbb5 f1f3 	udiv	r1, r5, r3
 800911a:	fb03 5711 	mls	r7, r3, r1, r5
 800911e:	5dc7      	ldrb	r7, [r0, r7]
 8009120:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009124:	462f      	mov	r7, r5
 8009126:	42bb      	cmp	r3, r7
 8009128:	460d      	mov	r5, r1
 800912a:	d9f4      	bls.n	8009116 <_printf_i+0x11a>
 800912c:	2b08      	cmp	r3, #8
 800912e:	d10b      	bne.n	8009148 <_printf_i+0x14c>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	07df      	lsls	r7, r3, #31
 8009134:	d508      	bpl.n	8009148 <_printf_i+0x14c>
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	4299      	cmp	r1, r3
 800913c:	bfde      	ittt	le
 800913e:	2330      	movle	r3, #48	; 0x30
 8009140:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009144:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009148:	1b92      	subs	r2, r2, r6
 800914a:	6122      	str	r2, [r4, #16]
 800914c:	f8cd a000 	str.w	sl, [sp]
 8009150:	464b      	mov	r3, r9
 8009152:	aa03      	add	r2, sp, #12
 8009154:	4621      	mov	r1, r4
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff fee2 	bl	8008f20 <_printf_common>
 800915c:	3001      	adds	r0, #1
 800915e:	d14c      	bne.n	80091fa <_printf_i+0x1fe>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b004      	add	sp, #16
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	4835      	ldr	r0, [pc, #212]	; (8009240 <_printf_i+0x244>)
 800916c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	680e      	ldr	r6, [r1, #0]
 8009174:	061f      	lsls	r7, r3, #24
 8009176:	f856 5b04 	ldr.w	r5, [r6], #4
 800917a:	600e      	str	r6, [r1, #0]
 800917c:	d514      	bpl.n	80091a8 <_printf_i+0x1ac>
 800917e:	07d9      	lsls	r1, r3, #31
 8009180:	bf44      	itt	mi
 8009182:	f043 0320 	orrmi.w	r3, r3, #32
 8009186:	6023      	strmi	r3, [r4, #0]
 8009188:	b91d      	cbnz	r5, 8009192 <_printf_i+0x196>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f023 0320 	bic.w	r3, r3, #32
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	2310      	movs	r3, #16
 8009194:	e7b0      	b.n	80090f8 <_printf_i+0xfc>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	f043 0320 	orr.w	r3, r3, #32
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	2378      	movs	r3, #120	; 0x78
 80091a0:	4828      	ldr	r0, [pc, #160]	; (8009244 <_printf_i+0x248>)
 80091a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091a6:	e7e3      	b.n	8009170 <_printf_i+0x174>
 80091a8:	065e      	lsls	r6, r3, #25
 80091aa:	bf48      	it	mi
 80091ac:	b2ad      	uxthmi	r5, r5
 80091ae:	e7e6      	b.n	800917e <_printf_i+0x182>
 80091b0:	4616      	mov	r6, r2
 80091b2:	e7bb      	b.n	800912c <_printf_i+0x130>
 80091b4:	680b      	ldr	r3, [r1, #0]
 80091b6:	6826      	ldr	r6, [r4, #0]
 80091b8:	6960      	ldr	r0, [r4, #20]
 80091ba:	1d1d      	adds	r5, r3, #4
 80091bc:	600d      	str	r5, [r1, #0]
 80091be:	0635      	lsls	r5, r6, #24
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	d501      	bpl.n	80091c8 <_printf_i+0x1cc>
 80091c4:	6018      	str	r0, [r3, #0]
 80091c6:	e002      	b.n	80091ce <_printf_i+0x1d2>
 80091c8:	0671      	lsls	r1, r6, #25
 80091ca:	d5fb      	bpl.n	80091c4 <_printf_i+0x1c8>
 80091cc:	8018      	strh	r0, [r3, #0]
 80091ce:	2300      	movs	r3, #0
 80091d0:	6123      	str	r3, [r4, #16]
 80091d2:	4616      	mov	r6, r2
 80091d4:	e7ba      	b.n	800914c <_printf_i+0x150>
 80091d6:	680b      	ldr	r3, [r1, #0]
 80091d8:	1d1a      	adds	r2, r3, #4
 80091da:	600a      	str	r2, [r1, #0]
 80091dc:	681e      	ldr	r6, [r3, #0]
 80091de:	6862      	ldr	r2, [r4, #4]
 80091e0:	2100      	movs	r1, #0
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7f7 f804 	bl	80001f0 <memchr>
 80091e8:	b108      	cbz	r0, 80091ee <_printf_i+0x1f2>
 80091ea:	1b80      	subs	r0, r0, r6
 80091ec:	6060      	str	r0, [r4, #4]
 80091ee:	6863      	ldr	r3, [r4, #4]
 80091f0:	6123      	str	r3, [r4, #16]
 80091f2:	2300      	movs	r3, #0
 80091f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f8:	e7a8      	b.n	800914c <_printf_i+0x150>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	4632      	mov	r2, r6
 80091fe:	4649      	mov	r1, r9
 8009200:	4640      	mov	r0, r8
 8009202:	47d0      	blx	sl
 8009204:	3001      	adds	r0, #1
 8009206:	d0ab      	beq.n	8009160 <_printf_i+0x164>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	079b      	lsls	r3, r3, #30
 800920c:	d413      	bmi.n	8009236 <_printf_i+0x23a>
 800920e:	68e0      	ldr	r0, [r4, #12]
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	4298      	cmp	r0, r3
 8009214:	bfb8      	it	lt
 8009216:	4618      	movlt	r0, r3
 8009218:	e7a4      	b.n	8009164 <_printf_i+0x168>
 800921a:	2301      	movs	r3, #1
 800921c:	4632      	mov	r2, r6
 800921e:	4649      	mov	r1, r9
 8009220:	4640      	mov	r0, r8
 8009222:	47d0      	blx	sl
 8009224:	3001      	adds	r0, #1
 8009226:	d09b      	beq.n	8009160 <_printf_i+0x164>
 8009228:	3501      	adds	r5, #1
 800922a:	68e3      	ldr	r3, [r4, #12]
 800922c:	9903      	ldr	r1, [sp, #12]
 800922e:	1a5b      	subs	r3, r3, r1
 8009230:	42ab      	cmp	r3, r5
 8009232:	dcf2      	bgt.n	800921a <_printf_i+0x21e>
 8009234:	e7eb      	b.n	800920e <_printf_i+0x212>
 8009236:	2500      	movs	r5, #0
 8009238:	f104 0619 	add.w	r6, r4, #25
 800923c:	e7f5      	b.n	800922a <_printf_i+0x22e>
 800923e:	bf00      	nop
 8009240:	08009f4a 	.word	0x08009f4a
 8009244:	08009f5b 	.word	0x08009f5b

08009248 <_read_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_read_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7f9 fa12 	bl	8002680 <_read>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_read_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_read_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	200043fc 	.word	0x200043fc

0800926c <__swbuf_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4614      	mov	r4, r2
 8009272:	4605      	mov	r5, r0
 8009274:	b118      	cbz	r0, 800927e <__swbuf_r+0x12>
 8009276:	6983      	ldr	r3, [r0, #24]
 8009278:	b90b      	cbnz	r3, 800927e <__swbuf_r+0x12>
 800927a:	f7fe fefd 	bl	8008078 <__sinit>
 800927e:	4b21      	ldr	r3, [pc, #132]	; (8009304 <__swbuf_r+0x98>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d12b      	bne.n	80092dc <__swbuf_r+0x70>
 8009284:	686c      	ldr	r4, [r5, #4]
 8009286:	69a3      	ldr	r3, [r4, #24]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	071a      	lsls	r2, r3, #28
 800928e:	d52f      	bpl.n	80092f0 <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	b36b      	cbz	r3, 80092f0 <__swbuf_r+0x84>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	1ac0      	subs	r0, r0, r3
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	b2f6      	uxtb	r6, r6
 800929e:	4283      	cmp	r3, r0
 80092a0:	4637      	mov	r7, r6
 80092a2:	dc04      	bgt.n	80092ae <__swbuf_r+0x42>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff fb18 	bl	80088dc <_fflush_r>
 80092ac:	bb30      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	701e      	strb	r6, [r3, #0]
 80092bc:	6963      	ldr	r3, [r4, #20]
 80092be:	3001      	adds	r0, #1
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d004      	beq.n	80092ce <__swbuf_r+0x62>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	07db      	lsls	r3, r3, #31
 80092c8:	d506      	bpl.n	80092d8 <__swbuf_r+0x6c>
 80092ca:	2e0a      	cmp	r6, #10
 80092cc:	d104      	bne.n	80092d8 <__swbuf_r+0x6c>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f7ff fb03 	bl	80088dc <_fflush_r>
 80092d6:	b988      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092d8:	4638      	mov	r0, r7
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <__swbuf_r+0x9c>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	d101      	bne.n	80092e6 <__swbuf_r+0x7a>
 80092e2:	68ac      	ldr	r4, [r5, #8]
 80092e4:	e7cf      	b.n	8009286 <__swbuf_r+0x1a>
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <__swbuf_r+0xa0>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	bf08      	it	eq
 80092ec:	68ec      	ldreq	r4, [r5, #12]
 80092ee:	e7ca      	b.n	8009286 <__swbuf_r+0x1a>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 f80c 	bl	8009310 <__swsetup_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0cb      	beq.n	8009294 <__swbuf_r+0x28>
 80092fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009300:	e7ea      	b.n	80092d8 <__swbuf_r+0x6c>
 8009302:	bf00      	nop
 8009304:	08009d40 	.word	0x08009d40
 8009308:	08009d60 	.word	0x08009d60
 800930c:	08009d20 	.word	0x08009d20

08009310 <__swsetup_r>:
 8009310:	4b32      	ldr	r3, [pc, #200]	; (80093dc <__swsetup_r+0xcc>)
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	681d      	ldr	r5, [r3, #0]
 8009316:	4606      	mov	r6, r0
 8009318:	460c      	mov	r4, r1
 800931a:	b125      	cbz	r5, 8009326 <__swsetup_r+0x16>
 800931c:	69ab      	ldr	r3, [r5, #24]
 800931e:	b913      	cbnz	r3, 8009326 <__swsetup_r+0x16>
 8009320:	4628      	mov	r0, r5
 8009322:	f7fe fea9 	bl	8008078 <__sinit>
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <__swsetup_r+0xd0>)
 8009328:	429c      	cmp	r4, r3
 800932a:	d10f      	bne.n	800934c <__swsetup_r+0x3c>
 800932c:	686c      	ldr	r4, [r5, #4]
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009334:	0719      	lsls	r1, r3, #28
 8009336:	d42c      	bmi.n	8009392 <__swsetup_r+0x82>
 8009338:	06dd      	lsls	r5, r3, #27
 800933a:	d411      	bmi.n	8009360 <__swsetup_r+0x50>
 800933c:	2309      	movs	r3, #9
 800933e:	6033      	str	r3, [r6, #0]
 8009340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	e03e      	b.n	80093ca <__swsetup_r+0xba>
 800934c:	4b25      	ldr	r3, [pc, #148]	; (80093e4 <__swsetup_r+0xd4>)
 800934e:	429c      	cmp	r4, r3
 8009350:	d101      	bne.n	8009356 <__swsetup_r+0x46>
 8009352:	68ac      	ldr	r4, [r5, #8]
 8009354:	e7eb      	b.n	800932e <__swsetup_r+0x1e>
 8009356:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <__swsetup_r+0xd8>)
 8009358:	429c      	cmp	r4, r3
 800935a:	bf08      	it	eq
 800935c:	68ec      	ldreq	r4, [r5, #12]
 800935e:	e7e6      	b.n	800932e <__swsetup_r+0x1e>
 8009360:	0758      	lsls	r0, r3, #29
 8009362:	d512      	bpl.n	800938a <__swsetup_r+0x7a>
 8009364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009366:	b141      	cbz	r1, 800937a <__swsetup_r+0x6a>
 8009368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__swsetup_r+0x66>
 8009370:	4630      	mov	r0, r6
 8009372:	f7fe ff6d 	bl	8008250 <_free_r>
 8009376:	2300      	movs	r3, #0
 8009378:	6363      	str	r3, [r4, #52]	; 0x34
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	b94b      	cbnz	r3, 80093aa <__swsetup_r+0x9a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800939c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a0:	d003      	beq.n	80093aa <__swsetup_r+0x9a>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	f000 f84d 	bl	8009444 <__smakebuf_r>
 80093aa:	89a0      	ldrh	r0, [r4, #12]
 80093ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b0:	f010 0301 	ands.w	r3, r0, #1
 80093b4:	d00a      	beq.n	80093cc <__swsetup_r+0xbc>
 80093b6:	2300      	movs	r3, #0
 80093b8:	60a3      	str	r3, [r4, #8]
 80093ba:	6963      	ldr	r3, [r4, #20]
 80093bc:	425b      	negs	r3, r3
 80093be:	61a3      	str	r3, [r4, #24]
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	b943      	cbnz	r3, 80093d6 <__swsetup_r+0xc6>
 80093c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093c8:	d1ba      	bne.n	8009340 <__swsetup_r+0x30>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	0781      	lsls	r1, r0, #30
 80093ce:	bf58      	it	pl
 80093d0:	6963      	ldrpl	r3, [r4, #20]
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	e7f4      	b.n	80093c0 <__swsetup_r+0xb0>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e7f7      	b.n	80093ca <__swsetup_r+0xba>
 80093da:	bf00      	nop
 80093dc:	20000010 	.word	0x20000010
 80093e0:	08009d40 	.word	0x08009d40
 80093e4:	08009d60 	.word	0x08009d60
 80093e8:	08009d20 	.word	0x08009d20

080093ec <abort>:
 80093ec:	b508      	push	{r3, lr}
 80093ee:	2006      	movs	r0, #6
 80093f0:	f000 f8d0 	bl	8009594 <raise>
 80093f4:	2001      	movs	r0, #1
 80093f6:	f7f9 f939 	bl	800266c <_exit>

080093fa <__swhatbuf_r>:
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	460e      	mov	r6, r1
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	2900      	cmp	r1, #0
 8009404:	b096      	sub	sp, #88	; 0x58
 8009406:	4614      	mov	r4, r2
 8009408:	461d      	mov	r5, r3
 800940a:	da07      	bge.n	800941c <__swhatbuf_r+0x22>
 800940c:	2300      	movs	r3, #0
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	89b3      	ldrh	r3, [r6, #12]
 8009412:	061a      	lsls	r2, r3, #24
 8009414:	d410      	bmi.n	8009438 <__swhatbuf_r+0x3e>
 8009416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941a:	e00e      	b.n	800943a <__swhatbuf_r+0x40>
 800941c:	466a      	mov	r2, sp
 800941e:	f000 f8d5 	bl	80095cc <_fstat_r>
 8009422:	2800      	cmp	r0, #0
 8009424:	dbf2      	blt.n	800940c <__swhatbuf_r+0x12>
 8009426:	9a01      	ldr	r2, [sp, #4]
 8009428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800942c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009430:	425a      	negs	r2, r3
 8009432:	415a      	adcs	r2, r3
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	e7ee      	b.n	8009416 <__swhatbuf_r+0x1c>
 8009438:	2340      	movs	r3, #64	; 0x40
 800943a:	2000      	movs	r0, #0
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	b016      	add	sp, #88	; 0x58
 8009440:	bd70      	pop	{r4, r5, r6, pc}
	...

08009444 <__smakebuf_r>:
 8009444:	898b      	ldrh	r3, [r1, #12]
 8009446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009448:	079d      	lsls	r5, r3, #30
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	d507      	bpl.n	8009460 <__smakebuf_r+0x1c>
 8009450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	2301      	movs	r3, #1
 800945a:	6163      	str	r3, [r4, #20]
 800945c:	b002      	add	sp, #8
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	ab01      	add	r3, sp, #4
 8009462:	466a      	mov	r2, sp
 8009464:	f7ff ffc9 	bl	80093fa <__swhatbuf_r>
 8009468:	9900      	ldr	r1, [sp, #0]
 800946a:	4605      	mov	r5, r0
 800946c:	4630      	mov	r0, r6
 800946e:	f7fe ff3f 	bl	80082f0 <_malloc_r>
 8009472:	b948      	cbnz	r0, 8009488 <__smakebuf_r+0x44>
 8009474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d4ef      	bmi.n	800945c <__smakebuf_r+0x18>
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7e3      	b.n	8009450 <__smakebuf_r+0xc>
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <__smakebuf_r+0x7c>)
 800948a:	62b3      	str	r3, [r6, #40]	; 0x28
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	b15b      	cbz	r3, 80094b8 <__smakebuf_r+0x74>
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f8a3 	bl	80095f0 <_isatty_r>
 80094aa:	b128      	cbz	r0, 80094b8 <__smakebuf_r+0x74>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	89a0      	ldrh	r0, [r4, #12]
 80094ba:	4305      	orrs	r5, r0
 80094bc:	81a5      	strh	r5, [r4, #12]
 80094be:	e7cd      	b.n	800945c <__smakebuf_r+0x18>
 80094c0:	08008011 	.word	0x08008011

080094c4 <memmove>:
 80094c4:	4288      	cmp	r0, r1
 80094c6:	b510      	push	{r4, lr}
 80094c8:	eb01 0402 	add.w	r4, r1, r2
 80094cc:	d902      	bls.n	80094d4 <memmove+0x10>
 80094ce:	4284      	cmp	r4, r0
 80094d0:	4623      	mov	r3, r4
 80094d2:	d807      	bhi.n	80094e4 <memmove+0x20>
 80094d4:	1e43      	subs	r3, r0, #1
 80094d6:	42a1      	cmp	r1, r4
 80094d8:	d008      	beq.n	80094ec <memmove+0x28>
 80094da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094e2:	e7f8      	b.n	80094d6 <memmove+0x12>
 80094e4:	4402      	add	r2, r0
 80094e6:	4601      	mov	r1, r0
 80094e8:	428a      	cmp	r2, r1
 80094ea:	d100      	bne.n	80094ee <memmove+0x2a>
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094f6:	e7f7      	b.n	80094e8 <memmove+0x24>

080094f8 <_realloc_r>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	4607      	mov	r7, r0
 80094fc:	4614      	mov	r4, r2
 80094fe:	460e      	mov	r6, r1
 8009500:	b921      	cbnz	r1, 800950c <_realloc_r+0x14>
 8009502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009506:	4611      	mov	r1, r2
 8009508:	f7fe bef2 	b.w	80082f0 <_malloc_r>
 800950c:	b922      	cbnz	r2, 8009518 <_realloc_r+0x20>
 800950e:	f7fe fe9f 	bl	8008250 <_free_r>
 8009512:	4625      	mov	r5, r4
 8009514:	4628      	mov	r0, r5
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009518:	f000 f87a 	bl	8009610 <_malloc_usable_size_r>
 800951c:	42a0      	cmp	r0, r4
 800951e:	d20f      	bcs.n	8009540 <_realloc_r+0x48>
 8009520:	4621      	mov	r1, r4
 8009522:	4638      	mov	r0, r7
 8009524:	f7fe fee4 	bl	80082f0 <_malloc_r>
 8009528:	4605      	mov	r5, r0
 800952a:	2800      	cmp	r0, #0
 800952c:	d0f2      	beq.n	8009514 <_realloc_r+0x1c>
 800952e:	4631      	mov	r1, r6
 8009530:	4622      	mov	r2, r4
 8009532:	f7fe fe77 	bl	8008224 <memcpy>
 8009536:	4631      	mov	r1, r6
 8009538:	4638      	mov	r0, r7
 800953a:	f7fe fe89 	bl	8008250 <_free_r>
 800953e:	e7e9      	b.n	8009514 <_realloc_r+0x1c>
 8009540:	4635      	mov	r5, r6
 8009542:	e7e7      	b.n	8009514 <_realloc_r+0x1c>

08009544 <_raise_r>:
 8009544:	291f      	cmp	r1, #31
 8009546:	b538      	push	{r3, r4, r5, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	d904      	bls.n	8009558 <_raise_r+0x14>
 800954e:	2316      	movs	r3, #22
 8009550:	6003      	str	r3, [r0, #0]
 8009552:	f04f 30ff 	mov.w	r0, #4294967295
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800955a:	b112      	cbz	r2, 8009562 <_raise_r+0x1e>
 800955c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009560:	b94b      	cbnz	r3, 8009576 <_raise_r+0x32>
 8009562:	4620      	mov	r0, r4
 8009564:	f000 f830 	bl	80095c8 <_getpid_r>
 8009568:	462a      	mov	r2, r5
 800956a:	4601      	mov	r1, r0
 800956c:	4620      	mov	r0, r4
 800956e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009572:	f000 b817 	b.w	80095a4 <_kill_r>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d00a      	beq.n	8009590 <_raise_r+0x4c>
 800957a:	1c59      	adds	r1, r3, #1
 800957c:	d103      	bne.n	8009586 <_raise_r+0x42>
 800957e:	2316      	movs	r3, #22
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	2001      	movs	r0, #1
 8009584:	e7e7      	b.n	8009556 <_raise_r+0x12>
 8009586:	2400      	movs	r4, #0
 8009588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800958c:	4628      	mov	r0, r5
 800958e:	4798      	blx	r3
 8009590:	2000      	movs	r0, #0
 8009592:	e7e0      	b.n	8009556 <_raise_r+0x12>

08009594 <raise>:
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <raise+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f7ff bfd3 	b.w	8009544 <_raise_r>
 800959e:	bf00      	nop
 80095a0:	20000010 	.word	0x20000010

080095a4 <_kill_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4d07      	ldr	r5, [pc, #28]	; (80095c4 <_kill_r+0x20>)
 80095a8:	2300      	movs	r3, #0
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	f7f9 f84b 	bl	800264c <_kill>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d102      	bne.n	80095c0 <_kill_r+0x1c>
 80095ba:	682b      	ldr	r3, [r5, #0]
 80095bc:	b103      	cbz	r3, 80095c0 <_kill_r+0x1c>
 80095be:	6023      	str	r3, [r4, #0]
 80095c0:	bd38      	pop	{r3, r4, r5, pc}
 80095c2:	bf00      	nop
 80095c4:	200043fc 	.word	0x200043fc

080095c8 <_getpid_r>:
 80095c8:	f7f9 b838 	b.w	800263c <_getpid>

080095cc <_fstat_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_fstat_r+0x20>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f7f9 f896 	bl	800270a <_fstat>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d102      	bne.n	80095e8 <_fstat_r+0x1c>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	b103      	cbz	r3, 80095e8 <_fstat_r+0x1c>
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	200043fc 	.word	0x200043fc

080095f0 <_isatty_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d06      	ldr	r5, [pc, #24]	; (800960c <_isatty_r+0x1c>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f9 f895 	bl	800272a <_isatty>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_isatty_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_isatty_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200043fc 	.word	0x200043fc

08009610 <_malloc_usable_size_r>:
 8009610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009614:	1f18      	subs	r0, r3, #4
 8009616:	2b00      	cmp	r3, #0
 8009618:	bfbc      	itt	lt
 800961a:	580b      	ldrlt	r3, [r1, r0]
 800961c:	18c0      	addlt	r0, r0, r3
 800961e:	4770      	bx	lr

08009620 <_init>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	bf00      	nop
 8009624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009626:	bc08      	pop	{r3}
 8009628:	469e      	mov	lr, r3
 800962a:	4770      	bx	lr

0800962c <_fini>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr
